<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Eclipsepedia</sitename>
    <dbname>my_wiki</dbname>
    <base>https://wiki.eclipse.org/Main_Page</base>
    <generator>MediaWiki 1.26.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Eclipsepedia</namespace>
      <namespace key="5" case="first-letter">Eclipsepedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Tycho/Additional Tools</title>
    <ns>0</ns>
    <id>32470</id>
    <revision>
      <id>364571</id>
      <parentid>357984</parentid>
      <timestamp>2014-06-06T12:15:38Z</timestamp>
      <contributor>
        <username>Mike.vorburger.ch</username>
        <id>12301</id>
      </contributor>
      <comment>replaced &amp;&amp; by &amp;amp;&amp;amp; for IU expression, it needs proper XML escaping</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15397">The Tycho project provides additional tools that may be useful when working with Tycho.

=tycho-p2-extras-plugin=

== &lt;tt&gt;mirror&lt;/tt&gt; goal ==

The &lt;tt&gt;mirror&lt;/tt&gt; goal of the &lt;tt&gt;tycho-p2-extras-plugin&lt;/tt&gt; copies installable units (plus their corresponding artifacts) from one or more p2 repositories to a p2 repository in the file system. The goal has almost the same parameters as the [http://help.eclipse.org/helios/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Fguide%2Fp2_repositorytasks.htm p2.mirror ant task].

Also see the [http://eclipse.org/tycho/sitedocs-extras/tycho-p2-extras-plugin/mirror-mojo.html p2 mirror goal reference documentation] .

Example usage: Mirror the org.eclipse.rcp feature from the Indigo p2 repository to target/repository.
Filter the platform-specific fragments to only include linux/gtk/x86_64 os/ws/arch.
&lt;pre&gt;
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
            &lt;artifactId&gt;tycho-p2-extras-plugin&lt;/artifactId&gt;
            &lt;version&gt;${tycho-version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;phase&gt;prepare-package&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;mirror&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
                &lt;source&gt;
                    &lt;!-- source repositories to mirror from --&gt;
                    &lt;repository&gt;
                        &lt;url&gt;http://download.eclipse.org/releases/indigo/&lt;/url&gt;
                        &lt;layout&gt;p2&lt;/layout&gt;
                        &lt;!-- supported layouts are &quot;p2-metadata&quot;, &quot;p2-artifacts&quot;, and &quot;p2&quot; (for joint repositories; default) --&gt;
                    &lt;/repository&gt;
                &lt;/source&gt;

                &lt;!-- starting from here all configuration parameters are optional --&gt;
                &lt;!-- they are only shown here with default values for documentation purpose --&gt;

                &lt;!-- List of IUs to mirror. If omitted, allIUs will be mirrored. --&gt;
                &lt;!-- Omitted IU version element means latest version of the IU --&gt;
                &lt;ius&gt;
                    &lt;iu&gt;
                        &lt;id&gt;org.eclipse.rcp.feature.group&lt;/id&gt;
                    &lt;/iu&gt;
                    &lt;!-- since tycho-extras 0.17.0, IUs can also be selected using p2 match queries  --&gt;
                    &lt;!-- http://wiki.eclipse.org/Query_Language_for_p2 --&gt;
                    &lt;iu&gt;
                        &lt;query&gt;
                           &lt;expression&gt;id == $0 &amp;amp;&amp;amp; version == $1&lt;/expression&gt;
                           &lt;parameters&gt;org.eclipse.tycho.sampleid,1.0.0&lt;/parameters&gt;
                        &lt;/query&gt;
                    &lt;/iu&gt;
                &lt;/ius&gt;
                &lt;!-- The destination directory to mirror to. --&gt;
                &lt;destination&gt;${project.build.directory}/repository&lt;/destination&gt;
                &lt;!-- Whether only strict dependencies should be followed. --&gt;
                &lt;!-- &quot;strict&quot; means perfect version match --&gt;
                &lt;followStrictOnly&gt;false&lt;/followStrictOnly&gt;
                &lt;!-- Whether or not to follow optional requirements. --&gt;
                &lt;includeOptional&gt;true&lt;/includeOptional&gt;
                &lt;!-- Whether or not to follow non-greedy requirements. --&gt;
                &lt;includeNonGreedy&gt;true&lt;/includeNonGreedy&gt;
                &lt;!-- Filter properties. E.g. filter only one platform --&gt;
                &lt;filter&gt;
                    &lt;osgi.os&gt;linux&lt;/osgi.os&gt;
                    &lt;osgi.ws&gt;gtk&lt;/osgi.ws&gt;
                    &lt;osgi.arch&gt;x86_64&lt;/osgi.arch&gt;
                &lt;/filter&gt;
                &lt;!-- Whether to filter the resulting set of IUs to only --&gt;
                &lt;!-- include the latest version of each IU --&gt;
                &lt;latestVersionOnly&gt;false&lt;/latestVersionOnly&gt;
                &lt;!-- don't mirror artifacts, only metadata --&gt;
                &lt;mirrorMetadataOnly&gt;false&lt;/mirrorMetadataOnly&gt;
                &lt;!-- whether to compress the content.xml/artifacts.xml --&gt;
                &lt;compress&gt;true&lt;/compress&gt;
                &lt;!-- whether to append to the target repository content --&gt;
                &lt;append&gt;true&lt;/append&gt;
                &lt;!-- whether to mirror pack200 artifacts also. Available since tycho-extras 0.17.0 --&gt;
                &lt;includePacked&gt;true&lt;/includePacked&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;/pre&gt;

Example usage: Copy the plug-ins and features from the current build into an existing, central update site:

&lt;pre&gt;
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
            &lt;artifactId&gt;tycho-p2-extras-plugin&lt;/artifactId&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;copy-to-central-site&lt;/id&gt;
                    &lt;phase&gt;install&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;mirror&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                        &lt;source&gt;
                            &lt;repository&gt;
                                &lt;url&gt;${project.baseUri}/target/repository&lt;/url&gt;
                            &lt;/repository&gt;
                        &lt;/source&gt;
                        &lt;append&gt;true&lt;/append&gt;
                        &lt;destination&gt;/path/to/central/site&lt;/destination&gt;
                    &lt;/configuration&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;/pre&gt;

== &lt;tt&gt;publish-features-and-bundles&lt;/tt&gt; goal ==

The &lt;tt&gt;publish-features-and-bundles&lt;/tt&gt; goal of the &lt;tt&gt;tycho-p2-extras-plugin&lt;/tt&gt; can be used to add p2 metadata to features and bundles built with other, non-p2-enabled build systems, so that the artifacts can be used in a Tycho build.

Example usage: Generate full p2 metadata for artifacts from an old-style update site.
&lt;pre&gt;
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
            &lt;artifactId&gt;tycho-p2-extras-plugin&lt;/artifactId&gt;
            &lt;version&gt;${tycho-version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;!-- step 1: mirror old-style update site --&gt;
                    &lt;id&gt;mirror-update-sites&lt;/id&gt;
                    &lt;phase&gt;process-resources&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;mirror&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                        &lt;source&gt;
                            &lt;repository&gt;
                                &lt;url&gt;http://example.org/old-style-update-site/&lt;/url&gt;
                            &lt;/repository&gt;
                            &lt;!-- more update sites... --&gt;
                        &lt;/source&gt;
                        &lt;destination&gt;${project.build.directory}/repository&lt;/destination&gt;
                    &lt;/configuration&gt;
                &lt;/execution&gt;
                &lt;execution&gt;
                    &lt;!-- step 3: generate the full p2 metadata for the mirrored artifacts --&gt;
                    &lt;id&gt;generate-full-metadata&lt;/id&gt;
                    &lt;phase&gt;compile&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;publish-features-and-bundles&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                        &lt;sourceLocation&gt;${project.build.directory}/repository&lt;/sourceLocation&gt;
                    &lt;/configuration&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.7&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;!-- step 2: strip the p2 metadata that contains the &quot;partial IUs&quot; that which be used for dependency resolution in Tycho --&gt;
                    &lt;id&gt;remove-incomplete-metadata&lt;/id&gt;
                    &lt;phase&gt;process-resources&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;run&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                        &lt;target&gt;
                            &lt;delete file=&quot;${project.build.directory}/repository/content.jar&quot; /&gt;
                            &lt;delete file=&quot;${project.build.directory}/repository/artifacts.jar&quot; /&gt;
                        &lt;/target&gt;
                    &lt;/configuration&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;/pre&gt;

=tycho-eclipserun-plugin=

This plugin allows to run an Eclipse application from Maven. This plugin is available since version 0.14.0. One use of this plugin is building the documentation index using Eclipse's antRunner and the help.buildHelpIndex Ant task.

Without Tycho, this would typically be done by having an Ant file with the help.buildHelpIndex task. For example, in customBuildCallbacks.xml:

&lt;source lang=&quot;xml&quot;&gt;
&lt;project name=&quot;Build specific targets and properties&quot; default=&quot;noDefault&quot;&gt;
    &lt;target name=&quot;post.build.jars&quot;&gt;
        &lt;antcall target=&quot;build.index&quot;/&gt;
    &lt;/target&gt;

    &lt;target name=&quot;build.index&quot; description=&quot;Builds search index for the plug-in: org.eclipse.someplugin.doc.user.&quot; if=&quot;eclipse.running&quot;&gt;
        &lt;help.buildHelpIndex manifest=&quot;plugin.xml&quot; destination=&quot;.&quot;/&gt;
    &lt;/target&gt;
&lt;/project&gt;
&lt;/source&gt;

tycho-eclipserun-plugin can be used to run Eclipse's antRunner and reuse that Ant file. 

org.eclipse.someplugin.doc.user/pom.xml:

&lt;source lang=&quot;xml&quot;&gt;
&lt;build&gt;
    &lt;plugins&gt;
        ...
        &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
            &lt;artifactId&gt;tycho-eclipserun-plugin&lt;/artifactId&gt;
            &lt;version&gt;${tycho-version}&lt;/version&gt;
            &lt;configuration&gt;
                &lt;appArgLine&gt;-application org.eclipse.ant.core.antRunner -buildfile customBuildCallbacks.xml build.index&lt;/appArgLine&gt;
                &lt;dependencies&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.apache.ant&lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.eclipse.help.base&lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
                &lt;/dependencies&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;eclipse-run&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;phase&gt;compile&lt;/phase&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;/source&gt;

For other scenarios, it might be necessary to change the elements in &lt;dependencies&gt;. Also, note that the JVM arguments can be changed with the &lt;argLine&gt; paremeter.
A version of the plugin compatible with Tycho 0.13 is available at [http://code.google.com/a/eclipselabs.org/p/tycho-eclipserun-plugin/ Eclipse Labs].


For example if you would like to install eclipse using this plugin you could try something like:

&lt;source lang=&quot;xml&quot;&gt;
&lt;properties&gt;
    &lt;tycho-extras-version&gt;0.14.0&lt;/tycho-extras-version&gt;
    &lt;tycho-version&gt;0.14.1&lt;/tycho-version&gt;
    &lt;features&gt;org.eclipse.sdk.ide,org.eclipse.platform,org.eclipse.jdt,org.eclipse.m2e.feature.feature.group,org.eclipse.m2e.logback.feature.feature.group
    &lt;/features&gt;
    &lt;sites&gt;${eclipse.mirror.url}/releases/indigo,${eclipse.mirror.url}/technology/m2e/releases,${eclipse.mirror.url}/eclipse/updates/3.7
    &lt;/sites&gt;
&lt;/properties&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
            &lt;artifactId&gt;tycho-eclipserun-plugin&lt;/artifactId&gt;
            &lt;version&gt;${tycho-extras-version}&lt;/version&gt;
            &lt;configuration&gt;
                &lt;argLine&gt;-Declipse.p2.mirrors=false&lt;/argLine&gt;
                &lt;appArgLine&gt;-consoleLog -application org.eclipse.equinox.p2.director -nosplash -destination ${build.destination} -repository ${sites} -installIUs ${features}&lt;/appArgLine&gt;
                &lt;dependencies&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.eclipse.equinox.p2.transport.ecf&lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.eclipse.equinox.p2.repository&lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.eclipse.equinox.p2.touchpoint.natives&lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.eclipse.equinox.p2.touchpoint.eclipse&lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.eclipse.equinox.p2.artifact.repository
                        &lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.eclipse.equinox.p2.director.app&lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;artifactId&gt;org.eclipse.equinox.ds&lt;/artifactId&gt;
                        &lt;type&gt;eclipse-plugin&lt;/type&gt;
                    &lt;/dependency&gt;
		    &lt;dependency&gt;
			&lt;artifactId&gt;org.eclipse.core.net&lt;/artifactId&gt;
			&lt;type&gt;eclipse-plugin&lt;/type&gt;
		    &lt;/dependency&gt;
                &lt;/dependencies&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;eclipse-run&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;phase&gt;compile&lt;/phase&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;/source&gt;

==tycho-eclipserun-plugin behind a proxy==

If you're behind corporate firewall and you're forced to use proxy you have to configure p2 director to use your proxy.
Here's the answer from [http://dev.eclipse.org/mhonarc/lists/tycho-user/msg03343.html tycho-eclipserun-plugin behind a proxy - solved] by Martin Lippert:

&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
	&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
	&lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
	&lt;version&gt;1.7&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;id&gt;configure-proxies-for-eclipserun&lt;/id&gt;
			&lt;phase&gt;generate-resources&lt;/phase&gt;
			&lt;configuration&gt;
				&lt;target&gt;
					&lt;touch file=&quot;${project.build.directory}/work/configuration/.settings/org.eclipse.core.net.prefs&quot; mkdirs=&quot;true&quot; /&gt;

					&lt;propertyfile file=&quot;${project.build.directory}/work/configuration/.settings/org.eclipse.core.net.prefs&quot;&gt;
						&lt;entry key=&quot;eclipse.preferences.version&quot; value=&quot;1&quot; /&gt;
						&lt;entry key=&quot;nonProxiedHosts&quot; value=&quot;${http.nonProxyHosts}&quot; /&gt;
						&lt;entry key=&quot;org.eclipse.core.net.hasMigrated&quot; value=&quot;true&quot; /&gt;
						&lt;entry key=&quot;proxyData/HTTP/hasAuth&quot; value=&quot;false&quot; /&gt;
						&lt;entry key=&quot;proxyData/HTTP/host&quot; value=&quot;${http.proxyHost}&quot; /&gt;
						&lt;entry key=&quot;proxyData/HTTP/port&quot; value=&quot;${http.proxyPort}&quot; /&gt;
						&lt;entry key=&quot;systemProxiesEnabled&quot; value=&quot;false&quot; /&gt;
					&lt;/propertyfile&gt;
				&lt;/target&gt;
			&lt;/configuration&gt;
			&lt;goals&gt;
				&lt;goal&gt;run&lt;/goal&gt;
			&lt;/goals&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
&lt;/plugin&gt;
&lt;/source&gt;

[[Category:Tycho|Additional Tools]]</text>
      <sha1>l7kr9zl31so0xbinfkynw6euneyaezo</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/category.xml</title>
    <ns>0</ns>
    <id>46965</id>
    <revision>
      <id>426561</id>
      <parentid>378833</parentid>
      <timestamp>2018-07-12T08:35:27Z</timestamp>
      <contributor>
        <username>Mistria.redhat.com</username>
        <id>12101</id>
      </contributor>
      <comment>/* Format overview */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2227">A &lt;tt&gt;category.xml&lt;/tt&gt; file can be used to include content into a p2 repository and to specify how to display the content in the [http://help.eclipse.org/kepler/index.jsp?topic=/org.eclipse.platform.doc.user/tasks/tasks-124.htm p2 installation dialog]. For it to be used by a Tycho build, it needs to be placed into the root of an [[Tycho/eclipse-repository|&lt;tt&gt;eclipse-repository&lt;/tt&gt;]] project.

The &lt;tt&gt;category.xml&lt;/tt&gt; format was originally defined by the Eclipse PDE project. There are extensions to the format only supported by p2 and Tycho.

== Format overview ==

Stub category.xml file:
&lt;source lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;site&gt;
   &lt;!-- Include features --&gt;
   &lt;feature id=&quot;feature.id&quot; version=&quot;1.4.100.v2009&quot;/&gt;
   &lt;!-- Since Tycho 1.1.0 (https://bugs.eclipse.org/bugs/show_bug.cgi?id=407273#c18), features can declare platform-specific compatibility for multi-platform builds --&gt;
   &lt;!-- Examples: https://github.com/mickaelistria/org.eclipse.simrel.build/blob/master/categories/category.xml#L581 --&gt;
   &lt;feature id=&quot;linux.specific.feature.id&quot; version=&quot;0.0.0&quot; os=&quot;linux&quot;/&gt;

   &lt;!-- Directly include bundles, without a feature --&gt;
   &lt;bundle id=&quot;bundle.id&quot; version=&quot;1.3.1.v2013&quot;/&gt;
   &lt;!-- Directly include any iu --&gt;
   &lt;iu id=&quot;unit.id&quot;/&gt;
   &lt;!-- Include all IUs matching an expression --&gt;
   &lt;iu&gt;
     &lt;query&gt; 
       &lt;expression type=&quot;match&quot;&gt;
         &lt;![CDATA[
           id == $0
         ]]&gt;
       &lt;/expression&gt;
       &lt;param&gt;another.unit.id&lt;/param&gt;
     &lt;/query&gt;
   &lt;/iu&gt;

   &lt;!-- Categories --&gt;
   &lt;feature id=&quot;feature.in.category&quot;&gt;
      &lt;category name=&quot;category.id&quot;/&gt;
   &lt;/feature&gt;
   &lt;category-def name=&quot;category.id&quot; label=&quot;Category Label&quot;&gt;
      &lt;description&gt;Details on the category&lt;/description&gt;
   &lt;/category-def&gt;

   &lt;!-- example for a dynamic category --&gt;
   &lt;category-def name=&quot;javax&quot; label=&quot;Bundles starting with javax.&quot;/&gt;
   &lt;iu&gt;
      &lt;category name=&quot;javax&quot;/&gt;
      &lt;query&gt;&lt;expression type=&quot;match&quot;&gt;id ~= /javax.*/&lt;/expression&gt;&lt;/query&gt;
   &lt;/iu&gt;
&lt;/site&gt;
&lt;/source&gt;

== Including artifacts ==

TODO details on feature, bundle, and iu (since Tycho 0.23.0) elements

== Categorizing content ==

TODO details on category-def and category elements

[[Category:Tycho|category.xml]]</text>
      <sha1>90tuu45l7djmbykg9df1z6r4d8pm5cm</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Migration Howto</title>
    <ns>0</ns>
    <id>41527</id>
    <revision>
      <id>358273</id>
      <parentid>350125</parentid>
      <timestamp>2014-03-17T14:28:41Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <comment>/* Manual adjustments */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4125">This page is intended to give existing projects a jumpstart for setting up a Tycho build.

While each project is different, there are some common steps:

== Scaffolding: Generate pom.xml files ==

Maven needs pom.xml files to drive the build (one pom.xml file per plugin/feature). See [[Tycho/Reference_Card#Generating_POM_files|Generating POM files]] on how to generate an initial skeleton for these files.

=== Manual adjustments ===

In the generated top-level (parent) pom.xml, it's a good idea to globally define the tycho version to use

&lt;pre&gt;
&lt;properties&gt;
  &lt;tycho-version&gt;0.20.0&lt;/tycho-version&gt;
&lt;/properties&gt;
&lt;/pre&gt;

so you can reference it using &lt;tt&gt;${tycho-version}&lt;/tt&gt; anywhere in the child pom.xml files e.g. when configuring tycho plugins. See [http://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Project_Inheritance maven project inheritance].

In case you have deeply nested projects and used several generate-poms invocations, add a top-level parent pom.xml and reference it as parent from the intermediate parent poms.
Also, adjust the modules to be built (see [http://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Project_Aggregation maven project aggregation]).

== Adding p2 repositories to resolve external dependencies ==

Almost every project has external dependencies it needs to compile against.
Add all p2 repositories you need for compilation or runtime in the parent pom like in the following snippet:

&lt;pre&gt;
&lt;repositories&gt;
   &lt;repository&gt;
      &lt;id&gt;eclipse-juno&lt;/id&gt;
      &lt;layout&gt;p2&lt;/layout&gt;
      &lt;url&gt;http://download.eclipse.org/releases/juno&lt;/url&gt;
   &lt;/repository&gt;
&lt;/repositories&gt;
&lt;/pre&gt;

See [[Tycho/Reference_Card#Repository_providing_the_context_of_the_build|Tycho Reference card]]

== Run the build ==

Run &lt;tt&gt;mvn clean install&lt;/tt&gt; in the directory of the parent pom.

== Getting tests to run ==

If your test bundle symbolic names end with &lt;tt&gt;.tests&lt;/tt&gt;, the pom generator will accordingly define

&lt;pre&gt;
&lt;packaging&gt;eclipse-test-plugin&lt;/packaging&gt;
&lt;/pre&gt;

This will tell Tycho to scan for test classes and execute them during build. Note that by default, test class scanning is using naming convention

&lt;tt&gt;**/Test*.java **/*Test.java **/*TestCase.java&lt;/tt&gt;

to find tests.

For details, see the [http://eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html Tycho Surefire docs]

Tips:

* To skip test execution temporarily, use commandline option &lt;tt&gt;-DskipTests&lt;/tt&gt;
* To debug tests, use commandline option &lt;tt&gt;-DdebugPort=8000&lt;/tt&gt;
* In case you are using SWTBot, see [[SWTBot/Maven#With_Maven_and_Tycho|Running SWTBot tests with Tycho]]
* [http://eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#testSuite How to run a test suite]
* By default, only the transitive dependencies of the test plugin make up the test runtime. See [[Tycho/Packaging_Types#eclipse-test-plugin|How to add implicit dependencies to the test runtime]] if you have implicit (runtime-only) dependencies.

== Generating source bundles and features ==

See the [[Tycho/Reference_Card#Source_Bundles|Tycho Reference Card]] on how to configure source bundles and feature generation in your parent pom.
See also reference documentation for [http://eclipse.org/tycho/sitedocs/tycho-source-plugin/plugin-source-mojo.html source bundles] and [http://eclipse.org/tycho/sitedocs-extras/tycho-source-feature-plugin/source-feature-mojo.html source features].

== Building a p2 repository ==

Once you have a build with plugin and features up and running, you can create a p2 repository for these bundles and features.
For this, create a pom.xml with

&lt;pre&gt;
  &lt;packaging&gt;eclipse-repository&lt;/packaging&gt;
&lt;/pre&gt;

, add it as a module to the parent pom and place a &lt;tt&gt;category.xml&lt;/tt&gt; file in the root. See [[Tycho/Packaging_Types#eclipse-repository| eclipse-repository]] for details.

== What if I'm stuck? ==

Check all the information sources (sample projects, reference docs, mailing list, tutorial) available from the [http://eclipse.org/tycho/documentation.php Tycho documentation]

[[Category:Tycho|Contributor Guide]]</text>
      <sha1>t5huj3tn1kr5lxwkyd5d7vhqewxj038</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Demo Projects</title>
    <ns>0</ns>
    <id>32440</id>
    <revision>
      <id>443652</id>
      <parentid>324659</parentid>
      <timestamp>2021-07-20T05:34:53Z</timestamp>
      <contributor>
        <username>Jeremie.bresson.unblu.com</username>
        <id>10923</id>
      </contributor>
      <minor/>
      <comment>The tycho demo repository no longer exists</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="266">The Tycho source code contains example projects demonstrating important use cases of Tycho. 

[https://github.com/eclipse/tycho/blob/master/demo/ browse the sources of the example projects].

[[Category:Tycho|Demo Projects]]
[[Category:Tycho Examples|Demo Projects]]</text>
      <sha1>d3dvylpkrspybqnyfy5sttxksgb4nk5</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Demo Projects/RCP Application</title>
    <ns>0</ns>
    <id>32438</id>
    <revision>
      <id>443653</id>
      <parentid>371689</parentid>
      <timestamp>2021-07-20T05:36:47Z</timestamp>
      <contributor>
        <username>Jeremie.bresson.unblu.com</username>
        <id>10923</id>
      </contributor>
      <comment>The tycho demo repository no longer exists</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4387">This page describes the RCP application in [https://github.com/eclipse/tycho/blob/master/demo/itp04-rcp tycho-demo/itp04-rcp]. The project shows how Tycho supports p2-enabled RCP applications, including how to add files to the root of an RCP application.

The RCP application contains a typical feature-based product (&lt;tt&gt;main.product&lt;/tt&gt;) located in the module &lt;tt&gt;eclipse-repository&lt;/tt&gt;. In the same module a category definition file (&lt;tt&gt;category.xml&lt;/tt&gt;) specifies different categories for two features (&lt;tt&gt;example-feature&lt;/tt&gt; and &lt;tt&gt;example-feature-2&lt;/tt&gt;).

Executing &lt;tt&gt;mvn clean install&lt;/tt&gt; on the root directory &lt;tt&gt;tycho-demo/itp04-rcp&lt;/tt&gt; results in a p2 repository in the target folder of the &lt;tt&gt;eclipse-repository&lt;/tt&gt; module (&lt;tt&gt;eclipse-repository/target/repository&lt;/tt&gt;). The repository's content is defined by the product definition &lt;tt&gt;main.product&lt;/tt&gt; and the &lt;tt&gt;category.xml&lt;/tt&gt; in the root of the eclipse repository project.

Another build result are ready-to-use installations of the product as zip/tar.gz archive (&lt;tt&gt;itp04-rcp/eclipse-repository/target/products/&lt;/tt&gt;). These additional artifacts are created by two additional tycho-p2-director-plugin goals configured in the &lt;tt&gt;pom.xml&lt;/tt&gt; of the eclipse-repository module:
&lt;pre&gt;
&lt;plugin&gt;
	&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
	&lt;artifactId&gt;tycho-p2-director-plugin&lt;/artifactId&gt;
	&lt;version&gt;${tycho-version}&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;id&gt;materialize-products&lt;/id&gt;
			&lt;goals&gt;
				&lt;goal&gt;materialize-products&lt;/goal&gt;
			&lt;/goals&gt;
		&lt;/execution&gt;
		&lt;execution&gt;
			&lt;id&gt;archive-products&lt;/id&gt;
			&lt;goals&gt;
				&lt;goal&gt;archive-products&lt;/goal&gt;
			&lt;/goals&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
&lt;/plugin&gt;
&lt;/pre&gt;

Unzipping the product archive &lt;tt&gt;itp04-rcp/eclipse-repository/target/products/example.product.id-win32.win32.x86_64.zip&lt;/tt&gt; and starting the contained &lt;tt&gt;eclipse.exe&lt;/tt&gt; will open a very small application window. Because the feature org.eclipse.equinox.p2.user.ui was added to the &lt;tt&gt;main.product&lt;/tt&gt; file the application also contains the p2 menu entries and actions to update the product.

You can verify that this RCP demo application can be updated using P2:

# '''Install new Software...''' allows to install additional features into the RCP demo application. Just add the desired software site in the '''Available Software Sites''' preferences page and then select '''Help''' &gt; '''Install new Software...'''.
# '''Check for Updates''' allows to update this product. Create a new version to check this:
#* Increment the example product and feature version e.g. from 0.1.0 to 0.2.0 and build again the entire RCP.
#* In the running RCP demo application add the following url as '''Available Software Sites''' in the preferences: &lt;tt&gt;file:/&lt;/tt&gt;&lt;local path&gt;&lt;tt&gt;/itp04-rcp/eclipse-repository/target/repository&lt;/tt&gt;.
#* Select the added software site and press '''Reload'''.
#* Use '''Help''' &gt; '''Check for Updates''' to confirm that product and included feature with a new version can be updated to the new version.

*Adding root files*

Since 0.11.0, Tycho supports root properties according to [http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.pde.doc.user/tasks/pde_rootfiles.htm]. (Limitations: &lt;tt&gt;root.folder&lt;/tt&gt; properties are not supported)

The demo RCP application makes use of the root properties. The &lt;tt&gt;build.properties&lt;/tt&gt; of example-feature, which is installed in the RCP application, has the following effect:
# The file &lt;tt&gt;example-feature/README.txt&lt;/tt&gt; is added to the root of all product installations.
# Different execution environment specific files &lt;tt&gt;doc_linux.html,doc_win.html,doc_macos.html&lt;/tt&gt; are added to a &lt;tt&gt;doc/&lt;/tt&gt; subfolder of the respective product installations. The sources of these files are &lt;tt&gt;example-feature/rootfiles/&lt;/tt&gt;.
# In the product installation for Linux, the executable flag is set for the file &lt;tt&gt;scripts/hello&lt;/tt&gt;. (The file is included through the line &lt;tt&gt;root.linux.gtk.x86_64 = rootfiles/linux&lt;/tt&gt; int the feature's build.properties.)
# A symbolic link &lt;tt&gt;hello_alias&lt;/tt&gt; to the &lt;tt&gt;hello&lt;/tt&gt; script is created in the root of the installation for Linux.

Note: Permissions and symbolic links will only work if the project is built on a filesystem with support for permissions and symbolic links.

[[Category:Tycho|Demo Projects/RCP Application]]
[[Category:Tycho Examples|Demo Projects/RCP Application]]</text>
      <sha1>cjborbvm98ktva9cwta24uub075vhok</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/How Tos/Dependency on pom-first artifacts</title>
    <ns>0</ns>
    <id>37438</id>
    <revision>
      <id>443651</id>
      <parentid>418903</parentid>
      <timestamp>2021-07-20T05:30:17Z</timestamp>
      <contributor>
        <username>Jeremie.bresson.unblu.com</username>
        <id>10923</id>
      </contributor>
      <comment>The tycho demo repository no longer exists</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5433">== Demo application ==

* Checkout demo application, it is located in the &lt;tt&gt;demo/&lt;/tt&gt; folder of the tycho repository:
&lt;pre&gt;
git clone https://github.com/eclipse/tycho.git
&lt;/pre&gt;

Demo application itp02 consist of two parts, &lt;tt&gt;[https://github.com/eclipse/tycho/blob/master/demo/itp02/build01 build01]&lt;/tt&gt; and &lt;tt&gt;[https://github.com/eclipse/tycho/blob/master/demo/itp02/build02 build02]&lt;/tt&gt;.

=== build01 ===

First part (i.e. &lt;tt&gt;build01&lt;/tt&gt;) is a simple project that uses maven-bundle-plugin to generate OSGi bundle manifest.

&lt;tt&gt;[https://github.com/eclipse/tycho/blob/master/demo/itp02/build01/pomfirst-bundle pomfirst-bundle]&lt;/tt&gt; is a simple project with packaging=jar that uses maven-bundle-plugin:manifest goal to generate bundle manifest based on sources of the project and their external dependencies, plexus-utils in this particular example.

&lt;tt&gt;[https://github.com/eclipse/tycho/blob/master/demo/itp02/build01/pomfirst-thirdparty pomfirst-thirdparty]&lt;/tt&gt; does not have any sources itself, but &quot;wraps&quot; thirdparty library available from maven repository in an OSGi bundle.

You can read more about maven-bundle-plugin [http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html here], but important point to note, this is not a tycho project. Artifacts installed into local repository have correct OSGi bundle manifest, but does not have any tycho or p2 specific information.

=== build02 ===

Second part (i.e. build02) is a multi-module tycho project. &lt;tt&gt;tycho.demo.itp02.bundle&lt;/tt&gt; is eclipse-plugin project which depends on pom-first project via &lt;tt&gt;Import-Package: tycho.demo.itp02.pomfirst&lt;/tt&gt; in bundle manifest. &lt;tt&gt;tycho.demo.itp02.bundle.tests&lt;/tt&gt; is a simple junit4 test project.

== Building from command line ==

* Build pom-first project 
&lt;pre&gt;
cd itp02/build01/pomfirst-bundle
MAVEN_HOME/bin/mvn clean install
&lt;/pre&gt;

This will build and install tycho.demo.itp02:pomfirst-bundle:1.0.0-SNAPSHOT into Maven local repository. The build is expected to succeed.

* Build tycho project 
&lt;pre&gt;
cd ../../build02
MAVEN_HOME/bin/mvn clean install
&lt;/pre&gt;

This will build both build02 modules and the build is expected to succeed.

== What happens under the hood ==

There are two &quot;interesting&quot; elements in &lt;tt&gt;build02/pom.xml&lt;/tt&gt;.

First, there is dependency on the pom-first project

&lt;source lang=&quot;xml&quot;&gt;
&lt;dependency&gt;
&lt;groupId&gt;tycho.demo.itp02&lt;/groupId&gt;
&lt;artifactId&gt;pomfirst-bundle&lt;/artifactId&gt;
&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
&lt;/source&gt;

Second, there is &lt;tt&gt;pomDependencies&lt;/tt&gt; target platform configuration parameter.
&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
&lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
&lt;version&gt;${tycho-version}&lt;/version&gt;
&lt;configuration&gt;
&lt;pomDependencies&gt;consider&lt;/pomDependencies&gt;
&lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/source&gt;

pomDependencies=consider tells tycho target platform resolver (p2-based in this example) to ''consider'' &lt;dependencies/&gt; element. In case of p2-based TP resolver, this is a multistep process

# p2 metadata is generated for all maven dependencies. Currently this only works for OSGi bundles, all other dependencies are silently ignored.
# generated p2 metadata is merged with p2 metadata from configured local and remote repositories
# p2 resolver is invoked to calculate project build target platform, i.e. transitive set of dependencies
# finally, equinox resolver is used to resolve actual project dependencies using set of bundles from build target platform

== Limitations ==

=== It is not possible to mix pom-first and manifest-first projects in the same reactor build. ===

Dependency resolution happens very early during maven build, before execution of build lifecycle of any project and well before bundle manifests can be generated for pom-first projects. To resolve dependencies of manifest-first projects, however, Tycho needs to to read bundle manifests of all pom-first artifacts.

This limitation cannot be relaxed without fundamental changes to Maven build lifecycle. Currently, the only solution is to build pom-first projects separately, before building manifest-first projects.

=== Pom-first dependencies of manifest-first projects are not fully transitive ===

Consider the following related projects, all built separately

* ProjectA, is a pom-first project with regular maven dependencies.
* ProjectB, is a manifest-first project with pom-first dependency on ProjectA
* ProjectC, is a manifest-first project with regular OSGi dependency on ProjectB

Currently, ProjectC build will fail because pom-first are not transitive.

Workaround is to add pom-first dependency on ProjectC to ProjectA. If projectB and projectC share a common parent POM, one would typically add the POM dependencies to projectA in that parent POM.

=== Tycho target-platform-configuration/pomDependencies=consider is restricted to packaging=jar ===

If You split up Your project structure like above into build01 and build02. Then Your build01 packaging type must be 'jar' (not 'bundle'). If You use 'bundle' cannot build02 detect the JAR. And the build02 fails. 

* that`s strange. 
* it seems that tycho 'target-platform-configuration' looks into the installed '~/.m2/...build01/..-pom.xml 
* and interpete the packaging type

Than You cannot use the full power of 'maven-bundle-plugin'. 

[[Category:Tycho|Dependency on pom-first artifacts]][[Category:Tycho/How To|Dependency on pom-first artifacts]]</text>
      <sha1>1w6e5kvqzgm3or22qltvd0dv8n0wfnh</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Dependency Resolution Troubleshooting</title>
    <ns>0</ns>
    <id>45684</id>
    <revision>
      <id>371830</id>
      <parentid>371517</parentid>
      <timestamp>2014-10-10T14:27:18Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>be more clear that TP resolution is not dependency resolution</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7079">This page aims to provide help with understanding and analyzing dependency resolution errors that you may see in a Tycho build.

== Error messages from p2 ==

At the core of its dependency resolution, Tycho uses the constraint satisfaction engine of p2, the Eclipse provisioning platform. In case of a dependency resolution failure, Tycho displays the diagnostic message generated by p2. Since p2 is normally used to create or update Eclipse installations, the messages may sound confusing at first, but they contain valuable information. This section provides hints how to read these messages.

Example dependency resolution error message:
&lt;pre&gt;
[INFO] Resolving dependencies of MavenProject: com.mycorp:com.mycorp.myplugin:0.1.0-SNAPSHOT @ C:\Source\MyProject\com.mycorp.myplugin\pom.xml
[INFO] {osgi.ws=win32, osgi.os=win32, osgi.arch=x86_64, org.eclipse.update.install.features=true}
[ERROR] Cannot resolve project dependencies:
[ERROR]   Software being installed: com.mycorp.myplugin 0.1.0.qualifier
[ERROR]   Missing requirement: com.mycorp.mylib 0.1.0.qualifier requires 'package org.eclipse.someproject [1.8.2,2.0.0)' but it could not be found
[ERROR]   Cannot satisfy dependency: com.mycorp.myplugin 0.1.0.qualifier depends on: bundle com.mycorp.mylib 0.0.0
&lt;/pre&gt;

Details on the parts of the message:
* &lt;code&gt;Resolving dependencies of MavenProject ...&lt;/code&gt;
: This line prints the Maven groupId, artifactId, and version and the file system location of the project being resolved.
* &lt;code&gt;Software being installed: ...&lt;/code&gt;
: This line prints the seed of the dependency resolution, i.e. the artifact whose dependencies are being resolved. This is typically the main artifact of the project, but it could also be one of the artifacts specified as &lt;tt&gt;extraRequirements&lt;/tt&gt; (TODO link to documentation).
* &lt;code&gt;Missing requirement: &amp;lt;artifact&amp;gt; requires '&amp;lt;dependency&amp;gt;' but it could not be found&lt;/code&gt;
: This line prints one of the mandatory dependencies which cannot be resolved. This can either be a dependency of the seed artifact, or a dependency of an artifact which is a direct or transitive dependency of the seed artifact. See below for details on the &amp;lt;dependency&amp;gt; part of the message.
* &lt;code&gt;Cannot satisfy dependency: &amp;lt;artifact&amp;gt; depends on: &amp;lt;dependency&amp;gt;&lt;/code&gt;
: In case the missing requirement is not on the seed artifact directly, the error message contains one or more of these lines. They trace the chain of dependencies from the seed artifact to the artifact with the missing requirement.

The message may also look like this
&lt;pre&gt;
[ERROR] Cannot resolve project dependencies:
[ERROR]   You requested to install 'com.mycorp.feature.feature.group 0.0.0' but it could not be found
&lt;/pre&gt;

Details on this message:
* &lt;code&gt;You requested to install '&lt;reference&gt;' but it could not be found&lt;/code&gt;
: This message is shown when one of the &lt;tt&gt;extraRequirements&lt;/tt&gt; specified in the &lt;tt&gt;target-platform-configuration&lt;/tt&gt; cannot be resolved. The &amp;lt;reference&amp;gt; is printed in the same format as the dependencies in missing requirements messages (see below for details).

=== Understanding missing requirement messages ===

Requirements in the p2 error messages consist of three parts: type (optional), ID, and version range.

When the requirement string includes a type, it is either &lt;code&gt;package&lt;/code&gt; for an &lt;tt&gt;Import-Package&lt;/tt&gt; dependency of a bundle, or &lt;code&gt;bundle&lt;/code&gt; for &lt;tt&gt;Require-Bundle&lt;/tt&gt; dependency of a bundle. In case the type is omitted, the requirement is specified in terms of the p2 ID of the required artifact (or more precisely, the ID of the &quot;p2 installable unit&quot;; installable units are the entities on which the p2 resolver works, and most installable units represent an artifact).

For most types of Eclipse artifacts, the p2 IDs are identical to the Eclipse IDs. So from an error message &lt;code&gt;... requires 'org.example.foo 0.0.0' but it could not be found&lt;/code&gt; you can read that the artifact on the left-hand side requires an artifact with p2 ID &lt;tt&gt;org.example.foo&lt;/tt&gt;. Most likely, the requirement expects a bundle with this ID as &lt;tt&gt;Bundle-SymbolicName&lt;/tt&gt;.

For features however, the p2 IDs differ from the Eclipse IDs: The p2 ID of a feature is the feature ID with a &lt;tt&gt;.feature.group&lt;/tt&gt; suffix. So for example &lt;code&gt;Missing requirement: com.mycorp.feature.feature.group 1.0.0.qualifier requires 'org.eclipse.rcp.feature.group 0.0.0' ...&lt;/code&gt; tells you that the feature &lt;tt&gt;com.mycorp.feature&lt;/tt&gt; has an unresolved dependency to the feature &lt;tt&gt;org.eclipse.rcp&lt;/tt&gt;.

The version range has one of the following forms:
* &lt;code&gt;1.2.3.something&lt;/code&gt; - a single version: This stands for &quot;version '1.2.3.something' or higher&quot;, i.e. the dependency only constrains the required artifact's version with a lower bound. Consequently, &lt;code&gt;0.0.0&lt;/code&gt; stands for &quot;any version&quot;.
* &lt;code&gt;[1.2.3,1.3.0)&lt;/code&gt; - two versions in brackets: This stands for &quot;a version between '1.2.3' (inclusive) and '1.3.0' (exclusive)&quot;. The type of the brackets indicated whether the lower and upper bound is included (square brackets) or excluded (parentheses).
* &lt;code&gt;[1.2.3.something]&lt;/code&gt; - a single version in brackets: This stands for &quot;strictly version '1.2.3.something'&quot;, i.e. the dependency is only satisfied by exactly one artifact. This kind of dependencies are also known as &quot;strict version dependencies&quot;.

== Why can dependency XYZ not be resolved? ==

The candidate artifacts to match (=&quot;resolve&quot;) a dependency are the artifacts from the project's target platform. So if Tycho cannot resolve a dependency - and the artifact actually exists somewhere - it means that you do not have it included in the project's target platform. There are various ways to add artifacts to the target platform: See [[Tycho/Target Platform]].

Note that every project has its own target platform, although they are typically configured in the same way by specifying the target-platform-configuration and POM dependencies for &lt;tt&gt;pomDependencies=consider&lt;/tt&gt; in the parent POM.

TODO: How to show the target platform content

== Differential diagnosis ==

This section explains other problems with similar symptoms, but which are not dependency resolution problems.

=== Target definition resolution errors ===

&lt;pre&gt;
[ERROR] Cannot resolve target definition:
&lt;/pre&gt;

This error is message is shown (since Tycho 0.22.0) when a target definition is inconsistent. Target definition files are resolved by Tycho to compute the target platform of a project (see [[Tycho/Target Platform#Target files|here]] for more information). The target platform is needed for the dependency resolution, so this is a separate step before the dependency resolution. To address this problem, open the target definition file in Eclipse with the ''Target Definition Editor''. This editor should always be showing the same or a similar error message as Tycho - so you can attempt to fix the target definition there without having to run the Tycho build over and over again.

[[Category:Tycho|Dependency Resolution Troubleshooting]]</text>
      <sha1>14wk6ao3dpzldpug6sdfxx9h67eh7ld</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/eclipse-repository</title>
    <ns>0</ns>
    <id>43959</id>
    <revision>
      <id>378831</id>
      <parentid>378724</parentid>
      <timestamp>2015-02-25T20:27:20Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <comment>add missing category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9799">&lt;css&gt;
table.nowrap-first-column td:first-child {
    white-space: nowrap;
}
/* this style exists in other MediaWikis but not here, so I define it inline */
table.wikitable {
    margin: 1em 0px;
    background-color: #F9F9F9;
    border: 1px solid #AAA;
    border-collapse: collapse;
    color: #000;
}
table.wikitable tr th, table.wikitable tr td {
    border: 1px solid #AAA;
    padding: 0.2em;
}
&lt;/css&gt; 

The packaging type &lt;tt&gt;eclipse-repository&lt;/tt&gt; is [[Tycho/Packaging Types|Tycho's packaging type]] for aggregating content into a p2 repository (aka &quot;update site&quot;). It can also be used for building Eclipse/RCP application distributions.

== Source files ==

The following source files are taken into account in &lt;tt&gt;eclipse-repository&lt;/tt&gt; projects:

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;tt&gt;category.xml&lt;/tt&gt; (optional): Selects features for the p2 repository and specifies how to categorize them in the [http://help.eclipse.org/kepler/index.jsp?topic=/org.eclipse.platform.doc.user/tasks/tasks-124.htm p2 installation dialog].&lt;/p&gt;
&lt;p&gt;''Example'':
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;site&gt;
   &lt;feature id=&quot;mytool.addon.feature&quot; /&gt;
   &lt;feature id=&quot;mytool.feature&quot;&gt;
      &lt;category name=&quot;mytool.category.id&quot;/&gt;
   &lt;/feature&gt;
   &lt;category-def name=&quot;mytool.category.id&quot; label=&quot;My Tool&quot;&gt;
      &lt;description&gt;
         My Eclipse tool built with Tycho
      &lt;/description&gt;
   &lt;/category-def&gt;
&lt;/site&gt;
&lt;/pre&gt;
With this category.xml, the features mytool.addon.feature and mytool.feature would be included into the p2 repository. mytool.feature would be shown in the category &quot;My Tool&quot;, and mytool.addon.feature in the automatically created category &quot;Uncategorized&quot;.&lt;/p&gt;
&lt;p&gt;
''Editor support'': category.xml files can be edited with the PDE's [http://help.eclipse.org/kepler/index.jsp?topic=/org.eclipse.pde.doc.user/guide/tools/editors/category_editor/definition_page.htm Category Manifest Editor].&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;tt&gt;&amp;lt;productName&amp;gt;.product&lt;/tt&gt; (optional): Defines a product configuration, which contains the information needed to create an Eclipse or RCP application installation. The product definition (and the content listed in it) is included in the p2 repository. See [[#Creating product distributions|this usage scenario]] for how to also create a product installation in the build.&lt;/p&gt;
&lt;p&gt;''Example'':
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;?pde version=&quot;3.5&quot;?&gt;

&lt;product uid=&quot;mytool.product&quot; id=&quot;org.eclipse.platform.ide&quot; version=&quot;1.0.0.qualifier&quot; useFeatures=&quot;true&quot; includeLaunchers=&quot;true&quot;&gt;

   &lt;configIni use=&quot;default&quot;&gt;
   &lt;/configIni&gt;

   &lt;launcherArgs&gt;
      &lt;vmArgsMac&gt;-XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts&lt;/vmArgsMac&gt;
   &lt;/launcherArgs&gt;

   &lt;features&gt;
      &lt;feature id=&quot;org.eclipse.platform&quot;/&gt;
      &lt;feature id=&quot;mytool.feature&quot;/&gt;
      &lt;feature id=&quot;mytool.addon.feature&quot; installMode=&quot;root&quot;/&gt;
   &lt;/features&gt;

   &lt;configurations&gt;
      &lt;plugin id=&quot;org.eclipse.core.runtime&quot; autoStart=&quot;true&quot; startLevel=&quot;0&quot; /&gt;
      &lt;plugin id=&quot;org.eclipse.equinox.common&quot; autoStart=&quot;true&quot; startLevel=&quot;2&quot; /&gt;
      &lt;plugin id=&quot;org.eclipse.equinox.ds&quot; autoStart=&quot;true&quot; startLevel=&quot;2&quot; /&gt;
   &lt;/configurations&gt;

&lt;/product&gt;
&lt;/pre&gt;
This example product definition would result in an Eclipse installation with the features org.eclipse.platform, mytool.feature, and mytool.addon.feature. The mytool.addon.feature would be marked as separately installed feature in the installation, so that it could be updated or uninstalled independently from the product.
&lt;/p&gt;
&lt;p&gt;''Editor support'': product files can be edited with the PDE's [http://help.eclipse.org/kepler/index.jsp?topic=/org.eclipse.pde.doc.user/guide/tools/editors/product_editor/editor.htm Product Configuration Editor].&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;tt&gt;&amp;lt;productName&amp;gt;.p2.inf&lt;/tt&gt; (optional): p2 advice file for low-level [[Equinox/p2/Customizing Metadata|customizations of the p2 metadata]] produced from the product file.&lt;/p&gt;
&lt;p&gt;''Editor support'': None. Only suitable for advanced users.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

== Build results ==

The main artifact of an &lt;tt&gt;eclipse-repository&lt;/tt&gt; project is a zipped p2 repository.

The content of the p2 repository content is aggregated in the following way:
# The categories and products defined in the project are included into the p2 repository.
# Recursively, the features, bundles, and other content ''included'' by already included content is included in the repository. The following artifacts can specify includes of other artifacts: categories, products, and features. (Note: Due to technical limitations in the p2 metadata format, dependencies with a strict version range, i.e. a range which only matches exactly one version of an artifact, are also considered as includes.)

You can also configure the build to include ''all transitive dependencies'' (instead of only transitive includes) by setting [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-repository-plugin/assemble-repository-mojo.html#includeAllDependencies &lt;tt&gt;includeAllDependencies&lt;/tt&gt;] to &lt;tt&gt;true&lt;/tt&gt;. See also [[#Creating a self-contained p2 repository|this usage scenario]].


== Build steps ==

The &lt;tt&gt;eclipse-repository&lt;/tt&gt; packaging types includes the following build steps:

{| class=&quot;wikitable nowrap-first-column&quot;
|-
! Build step
!width=100%| Summary
|-
| [http://www.eclipse.org/tycho/sitedocs/tycho-packaging-plugin/build-qualifier-aggregator-mojo.html &lt;tt&gt;tycho-packaging-plugin:build-qualifier-aggregator&lt;/tt&gt;]
| Determines the replacement value for &lt;tt&gt;qualifier&lt;/tt&gt; literals in product versions
|-
| [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-publisher-plugin/publish-products-mojo.html &lt;tt&gt;tycho-p2-publisher-plugin:publish-products&lt;/tt&gt;]
| Translates the product files into p2 metadata
|-
| [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-publisher-plugin/publish-categories-mojo.html &lt;tt&gt;tycho-p2-publisher-plugin:publish-categories&lt;/tt&gt;]
| Translates the category.xml into p2 metadata
|-
| [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-repository-plugin/assemble-repository-mojo.html &lt;tt&gt;tycho-p2-repository-plugin:assemble-repository&lt;/tt&gt;]
| Aggregates the p2 metadata and artifacts into a p2 repository
|-
| [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-repository-plugin/archive-repository-mojo.html &lt;tt&gt;tycho-p2-repository-plugin:archive-repository&lt;/tt&gt;]
| Compresses the p2 repository to a zip file
|-
| [http://maven.apache.org/plugins/maven-install-plugin/install-mojo.html &lt;tt&gt;maven-install-plugin:install&lt;/tt&gt;]
| Writes the zipped p2 repository to the local Maven repository
|-
| [http://maven.apache.org/plugins/maven-deploy-plugin/deploy-mojo.html &lt;tt&gt;maven-deploy-plugin:deploy&lt;/tt&gt;]
| Deploys the zipped p2 repository to a Maven repository manager. See [[Tycho/Nexus Unzip Plugin]] for one option to use the deployed zipped p2 repository.
|}


== Usage scenarios ==

=== Creating a self-contained p2 repository ===

When a p2 repository is self-contained, users can install from it without having to contact other p2 repositories/update sites. This may be useful if you have dependencies on artifacts from more exotic update sites (which are not pre-configured in a normal Eclipse installation), or if your users are in a restricted environment without Internet access.

In order to create a self-contained p2 repository, set the [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-repository-plugin/assemble-repository-mojo.html#includeAllDependencies &lt;tt&gt;includeAllDependencies&lt;/tt&gt;] parameter of the &lt;tt&gt;tycho-p2-repository-plugin&lt;/tt&gt; to &lt;tt&gt;true&lt;/tt&gt;:
&lt;pre&gt;
&lt;build&gt;
   &lt;plugins&gt;
      &lt;plugin&gt;
         &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
         &lt;artifactId&gt;tycho-p2-repository-plugin&lt;/artifactId&gt;
         &lt;version&gt;${tycho-version}&lt;/version&gt;
         &lt;configuration&gt;
            &lt;includeAllDependencies&gt;true&lt;/includeAllDependencies&gt;
         &lt;/configuration&gt;
      &lt;/plugin&gt;
   &lt;/plugins&gt;
&lt;/build&gt;
&lt;/pre&gt;

=== Creating product distributions ===

The packaging type &lt;tt&gt;eclipse-repository&lt;/tt&gt; creates a p2 repository, which contain the product definition metadata. This metadata can be used to install the product from the p2 repository (using the p2 director), or update an existing installation of your product.

Most likely however, you also want to create ready-to-use distribution archives of your product, which make it easier for your users to get the initial installation of your product. To accomplish this, add the following goals in the project's POM:
&lt;pre&gt;
&lt;build&gt;
   &lt;plugins&gt;
      &lt;plugin&gt;
         &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
         &lt;artifactId&gt;tycho-p2-director-plugin&lt;/artifactId&gt;
         &lt;version&gt;${tycho-version}&lt;/version&gt;
         &lt;executions&gt;
            &lt;execution&gt;
               &lt;id&gt;create-product-distributions&lt;/id&gt;
               &lt;goals&gt;
                  &lt;goal&gt;materialize-products&lt;/goal&gt;
                  &lt;goal&gt;archive-products&lt;/goal&gt;
               &lt;/goals&gt;
            &lt;/execution&gt;
         &lt;/executions&gt;
      &lt;/plugin&gt;
   &lt;/plugins&gt;
&lt;/build&gt;
&lt;/pre&gt;

If the &lt;tt&gt;eclipse-repository&lt;/tt&gt; project contains more than one product file, you need to choose for which ones you want to create distribution archives. See the plugin documentation for how to do this and for other configuration options:

{| class=&quot;wikitable nowrap-first-column&quot;
|-
! Build step
!width=100%| Summary
|-
| [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-director-plugin/materialize-products-mojo.html &lt;tt&gt;tycho-p2-director-plugin:materialize-products&lt;/tt&gt;]
| Creates installations for the products defined in the project.
|-
| [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-director-plugin/archive-products-mojo.html &lt;tt&gt;tycho-p2-director-plugin:archive-products&lt;/tt&gt;]
| Creates archives with the product installations
|}

[[Category:Tycho|eclipse-repository]]</text>
      <sha1>rkryma2l7j46fvgte0h3erglfh9n81u</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Execution Environments</title>
    <ns>0</ns>
    <id>39260</id>
    <revision>
      <id>440514</id>
      <parentid>440095</parentid>
      <timestamp>2020-09-07T17:31:53Z</timestamp>
      <contributor>
        <username>Mistria.redhat.com</username>
        <id>12101</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9117">{{Warning|This is obsolete since Tycho 2.0, documentation about target-platfroms and execution environments is moving to  https://www.eclipse.org/tycho/sitedocs/target-platform-configuration/target-platform-configuration-mojo.html }}

An execution environment profile describes the capabilities of a Java runtime environment (JRE). In order to build for a certain minimal JRE version, e.g. for Java SE 5 and later, Tycho allows you to select the execution environment profile to be used in the build.

Background: In OSGi, you can express that you need a certain minimum version of a library by importing a package from the library with a lower bound on the version. For the JRE itself, this approach is not possible: bundles don't specify imports on &lt;tt&gt;java.*&lt;/tt&gt; packages, so you can't specify through a package import that, for example, your bundle needs &lt;tt&gt;java.lang&lt;/tt&gt; in a version that contains the &lt;tt&gt;Enum&lt;/tt&gt; class. Instead, there is the possibility to specify a requirement on the execution environment, e.g. &lt;tt&gt;Bundle-RequiredExecutionEnvironment: J2SE-1.5&lt;/tt&gt;.

=== Execution environment configuration ===

The execution environment profile for the build can be configured through several configuration parameters (with different precedence). The first one that is defined wins:

# The &lt;tt&gt;&amp;lt;executionEnvironment&amp;gt;&lt;/tt&gt; parameter in &lt;tt&gt;target-platform-configuration/configuration&lt;/tt&gt;
# The &lt;tt&gt;jre.compilation.profile&lt;/tt&gt; property in the build.properties (&lt;tt&gt;eclipse-plugin&lt;/tt&gt; and &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt; modules only)
# The first profile specified in the &lt;tt&gt;Bundle-RequiredExecutionEnvironment&lt;/tt&gt; header (see details below; &lt;tt&gt;eclipse-plugin&lt;/tt&gt; and &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt; modules only)
# The &lt;tt&gt;&amp;lt;executionEnvironmentDefault&amp;gt;&lt;/tt&gt; parameter in &lt;tt&gt;target-platform-configuration/configuration&lt;/tt&gt;
# The global default JavaSE-9 (since Tycho 1.2) &lt;strike&gt;1.7 (Tycho 0.23 to 1.1)&lt;/strike&gt; &lt;strike&gt;JavaSE-1.6 (Tycho 0.17 to 0.22)&lt;/strike&gt;

You can specify the commonly known execution environments, for example &lt;tt&gt;J2SE-1.5&lt;/tt&gt; (!), &lt;tt&gt;JavaSE-1.6&lt;/tt&gt;, &lt;tt&gt;JavaSE-1.7&lt;/tt&gt;, &lt;tt&gt;JavaSE-1.8&lt;/tt&gt;, &lt;tt&gt;JavaSE-9&lt;/tt&gt;, or &lt;tt&gt;OSGi/Minimum-1.2&lt;/tt&gt;.

==== Configuration via the bundle manifest ====

Unlike the other parameters, the &lt;tt&gt;Bundle-RequiredExecutionEnvironment&lt;/tt&gt; header in the MANIFEST.MF allows to specify multiple execution environments (see [http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Fguide%2Ftools%2Feditors%2Fmanifest_editor%2Foverview.htm here for a motivation]). Since Tycho 0.22.0, the execution environment listed first is used - just like in Eclipse. &lt;strike&gt;Before Tycho 0.22.0, Tycho picked the most restricted execution environment according to the following heuristic: From the most restrictive class (with OSGi/Minimum &amp;lt; CDC/Foundation &amp;lt; J2SE or JavaSE), the lowest version is selected.&lt;/strike&gt;

=== Effects of the execution environment in the build ===

The execution environment determined according to the rules above is then used in the following aspects of the build:

* During dependency resolution (and similarly for target definition files with &lt;tt&gt;includeMode=&quot;planner&quot;&lt;/tt&gt;), Tycho ensures that package imports may only be matched against the selected execution environment, and not against other execution environments. This means that Tycho handles the following situation correctly: if your bundle requires the package &lt;tt&gt;javax.xml&lt;/tt&gt; and the execution environment is &lt;tt&gt;J2SE-1.4&lt;/tt&gt;, Tycho will attempt to download and use a dedicated bundle providing &lt;tt&gt;javax.xml&lt;/tt&gt;; if the execution environment was &lt;tt&gt;J2SE-1.5&lt;/tt&gt;, the &lt;tt&gt;javax.xml&lt;/tt&gt; package provided by the JRE would be used. (The package &lt;tt&gt;javax.xml&lt;/tt&gt; was added in Java 5.)
** Limitation: For &lt;tt&gt;eclipse-repository&lt;/tt&gt; modules, the dependency resolution may not be correct for execution environments other than &lt;tt&gt;JavaSE-1.6&lt;/tt&gt;, &lt;tt&gt;JavaSE-1.7&lt;/tt&gt;, and &lt;tt&gt;JavaSE-1.8&lt;/tt&gt; ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=385703 bug 385703]).
** The restriction on the configured execution environment can be disabled for the dependency resolution by setting the &lt;tt&gt;target-platform-configuration&lt;/tt&gt; parameter &lt;tt&gt;resolveWithExecutionEnvironmentConstraints&lt;/tt&gt; to &lt;tt&gt;false&lt;/tt&gt; (since Tycho 0.22.0).
* During compilation, Tycho hides packages which are not provided by the configured execution environment. Note: This filtering only applies to entire packages, and therefore may not detect the use of classes or methods which are not available in the configured execution environment. To also detect these situations, either run the build with a JDK matching the configured execution environment, or configure toolchains (see below).
* If the source/target compliance level to be used for compilation is not configured explicitly (cf. [http://www.eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html tycho-compiler-plugin] documentation), the default source/target level of the execution environment is used. For the execution environments &lt;tt&gt;J2SE-1.5&lt;/tt&gt;, &lt;tt&gt;JavaSE-1.6&lt;/tt&gt;, &lt;tt&gt;JavaSE-1.7&lt;/tt&gt;, the source and target levels are (as expected) 1.5, 1.6, respectively 1.7. For other execution environments, the default source/target level can be found [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/tree/tycho-core/src/test/java/org/eclipse/tycho/core/ee/StandardExecutionEnvironmentTest.java#n88 here].

==== Toolchains ====

By default, Tycho compiles against the JDK that is used to run the Maven/Tycho build. Toolchains allows to configure additional JDKs, so that the build can automatically pick the correct one for the configured execution environment.

See http://www.eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html#useJDK

=== Custom execution environment profiles ===

In order to support special compatibility requirements of OSGi servers, Tycho has basic support for building for non-standard execution environment profiles.

Background: Certain Java packages had been developed for a while before they were eventually added to the JRE. For example, &lt;tt&gt;javax.activation&lt;/tt&gt; is available in the JavaSE-1.6 execution environment, but you'll need a separate bundle that provides the package if you are building for J2SE-1.5. Unfortunately, these set-ups are not completely interchangeable: in JavaSE-1.6 (as defined by Equinox) &lt;tt&gt;javax.activation&lt;/tt&gt; is provided in version &lt;tt&gt;0.0.0&lt;/tt&gt;, whereas bundles providing the package (e.g. from the [http://ebr.springsource.com/ SpringSource EBR]) typically provide the package in a non-zero version. Therefore switching from J2SE-1.5 with the bundle for &lt;tt&gt;javax.activation&lt;/tt&gt; to JavaSE-1.6 without the bundle is not a compatible change for an OSGi server. To mitigate this, the OSGi server may set the system property &lt;tt&gt;org.osgi.framework.system.packages&lt;/tt&gt; in a way so that a package import of &lt;tt&gt;javax.activation;version=&quot;1.1.0&quot;&lt;/tt&gt; is wired to the system bundle. In order to get analogous effect in the build (i.e. during dependency resolution, compilation, and test execution), projects building for that OSGi server may select a special execution environment defined by the OSGi server project.

==== Configuring a custom execution environment ====

You can select a custom execution environment for the build in the same way as you select a standard execution environment, e.g. by configuring &lt;tt&gt;&amp;lt;executionEnvironment&amp;gt;CustomProfile-1.0&amp;lt;/executionEnvironment&amp;gt;&lt;/tt&gt;. Note: Custom profiles cannot be specified in the &lt;tt&gt;Bundle-RequiredExecutionEnvironment&lt;/tt&gt; header.

The specification for the configured custom profile is then taken from the [[Tycho/Target Platform|target platform]], i.e. one of the configured p2 repositories must contain the custom profile specification.

==== Publishing a custom execution environment specification ====

Note: Unless you are building an OSGi server, you should not be defining a custom profile.

In an &lt;tt&gt;eclipse-repository&lt;/tt&gt; module, set the parameter &lt;tt&gt;profileFile&lt;/tt&gt; on the &lt;tt&gt;tycho-p2-publisher-plugin&lt;/tt&gt; so that it points to the execution environment file, and have the goal &lt;tt&gt;tycho-p2-publisher-plugin:publish-ee-profile&lt;/tt&gt; executed. The profile file needs to be in the format commonly used by Equinox ([http://git.eclipse.org/c/equinox/rt.equinox.framework.git/tree/bundles/org.eclipse.osgi/JavaSE-1.6.profile Example]). Tycho reads the following properties from the profile file: &lt;tt&gt;osgi.java.profile.name&lt;/tt&gt;, &lt;tt&gt;org.osgi.framework.system.packages&lt;/tt&gt;, and &lt;tt&gt;org.osgi.framework.system.capabilities&lt;/tt&gt;.

Note: In general, it should be rarely necessary to publish a new version of a custom execution environment profile. Therefore, these profiles should be released independently from the other artifacts produced by the OSGi server project. Due to technical limitations, it is not possible to build a p2 repository with just the custom execution environment profile. You will also need to add one (typically empty) feature to the repository via a category.xml.

[[Category:Tycho|Execution Environments]]</text>
      <sha1>in07df6huj6znu5ae20avq27u1o064l</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/FAQ</title>
    <ns>0</ns>
    <id>33225</id>
    <revision>
      <id>448055</id>
      <parentid>448053</parentid>
      <timestamp>2023-11-22T14:26:46Z</timestamp>
      <contributor>
        <username>Lars.Vogel.vogella.com</username>
        <id>17896</id>
      </contributor>
      <comment>/* Where can I find the Maven generated documentation for the Tycho plug-ins? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29110">This page is being migrated to: https://github.com/eclipse-tycho/tycho/wiki/Frequently-asked-questions

You may also want to check [http://stackoverflow.com/questions/tagged/tycho?sort=faq Frequently asked Tycho questions on stackoverflow.com].

= Compilation =

== How do I embed a configurable build version? ==

To cause your artifacts to be branded with the a build number, modify your manifests (&lt;tt&gt;MANIFEST.MF&lt;/tt&gt;, &lt;tt&gt;feature.xml&lt;/tt&gt;, etc.) to specify the version as &lt;tt&gt;&lt;em&gt;X.Y.Z&lt;/em&gt;.qualifier&lt;/tt&gt;, and the corresponding &lt;tt&gt;pom.xml&lt;/tt&gt; with &lt;tt&gt;X.Y.Z-SNAPSHOT&lt;/tt&gt;.  Tycho will replace the &lt;tt&gt;qualifier&lt;/tt&gt; and &lt;em&gt;SNAPSHOT&lt;/em&gt; with the build timestamp (in UTC).

You can set the build qualifier to a custom value by setting the &lt;tt&gt;forceContextQualifier&lt;/tt&gt; property.  For example:
&lt;pre&gt;mvn -DforceContextQualifier=M01 install&lt;/pre&gt;
You can also set the qualifier by configuring the tycho-packaging-plugin, using some format supported by Java's SimpleDateFormat:
&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
  &lt;artifactId&gt;tycho-packaging-plugin&lt;/artifactId&gt;
  &lt;version&gt;${tycho-version}&lt;/version&gt;
  &lt;configuration&gt;
    &lt;format&gt;'myprefix_'yyyyMMddHHmm&lt;/format&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/source&gt;

Tycho does not directly support embedding the build identifier in resources.  But some workarounds have been suggested in an [http://dev.eclipse.org/mhonarc/lists/tycho-user/msg01115.html email thread on tycho-user].

== How to configure warning/error settings of the OSGi compiler? ==

To configure warnings: 

&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
  &lt;artifactId&gt;tycho-compiler-plugin&lt;/artifactId&gt;
  &lt;version&gt;${tycho-version}&lt;/version&gt;
  &lt;configuration&gt;
    &lt;compilerArgument&gt;-warn:[+|-]warning_tokens_separated_by_comma&lt;/compilerArgument&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/source&gt; 

The available warning tokens are listed in the [http://help.eclipse.org/topic/org.eclipse.jdt.doc.user/tasks/task-using_batch_compiler.htm Eclipse help]. Same applies for the 

-err 

argument for configuring errors.


Alternatively, if you have per-project JDT preferences, you may advise the compiler to use these (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=404633 bug 404633] for a simpler solution since Tycho 0.22.0):
&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
  &lt;artifactId&gt;tycho-compiler-plugin&lt;/artifactId&gt;
  &lt;version&gt;${tycho-version}&lt;/version&gt;
  &lt;configuration&gt;
    &lt;compilerArguments&gt;
      &lt;properties&gt;${project.basedir}/.settings/org.eclipse.jdt.core.prefs&lt;/properties&gt;
    &lt;/compilerArguments&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/source&gt;

== How to compile pre-processed source placed in a different directory? ==

In 0.13.0 you can configure your pom.xml with something like the following:
&lt;pre&gt;
&lt;build&gt;
   &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
      &lt;artifactId&gt;tycho-compiler-plugin&lt;/artifactId&gt;
      &lt;version&gt;${tycho-version}&lt;/version&gt;
      &lt;configuration&gt;
         &lt;source&gt;${project.basedir}/YourNewSourceDirectory&lt;/source&gt;
         &lt;usePdeSourceRoots&gt;false&lt;/usePdeSourceRoots&gt;
      &lt;/configuration&gt;
   &lt;/plugin&gt;
&lt;/build&gt;
&lt;/pre&gt;

But... &quot;usePdeSourceRoots&quot; was removed as part of 0.14.0 (see: [https://bugs.eclipse.org/bugs/show_bug.cgi?id=368083] and [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/commit/?id=ad06d9f10a7ca0dc380848a084ac25d4183c7c75]).  

In 0.16.0 it appears you you must use the build.properties.

== How do I include rootfiles? ==

Tycho provides partial support for [http://help.eclipse.org/indigo/index.jsp?topic=/org.eclipse.pde.doc.user/tasks/pde_rootfiles.htm PDE-style rootfiles]. Rootfiles are associated and installed with a feature. See [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/tree/tycho-its/projects/product.rootFiles the product.rootFiles test] for an example of using rootfiles. 

A different approach is to use the ''maven-assembly-plugin'' to assemble a zip file. We do not have a worked example, but Kai Kreuzer documented his approach that was necessary prior to the introduction of rootfile support [http://kaikreuzer.blogspot.com/2010/12/building-p2-enabled-products-with-tycho.html].

== How should I define the target platform of my tycho project? ==

This question is answered here: [[Tycho/Target Platform]]


== What other options does the Tycho compiler support? ==

Run this command to get a list of options for your version of Tycho:

&lt;tt&gt;mvn help:describe -Dplugin=org.eclipse.tycho:tycho-compiler-plugin -Ddetail&lt;/tt&gt;

Or you can have a look at the [http://eclipse.org/tycho/sitedocs/index.html Maven site for Tycho].

== Can I use the Tycho compiler support in non-OSGi projects, too? ==

When compiling regular maven projects (e.g., packaging &quot;jar&quot;) the plugin &lt;code&gt;tycho-compiler-jdt&lt;/code&gt; can be used to tell maven to use the JDT compiler (aka &quot;Eclipse Compiler for Java(TM)&quot;, &quot;ecj&quot;) for compilation. This is useful to ensure that compilation in the IDE and on the build server show the same compiler messages, specifically JDT's [[JDT_Core/Null_Analysis|annotation-based null analysis]] can be integrated into the build in this way.

Use the following snippet in your &lt;code&gt;build.pluginManagement.plugins&lt;/code&gt; section:
&lt;!-- cannot use source tag, because the source end-tag inside the snippet would terminate the environment, geshi r50696  fixed this by introducing an alternative tag syntaxhighlight--&gt;
&lt;pre lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
	&lt;!-- Use compiler plugin with tycho as the adapter to the JDT compiler. --&gt;
	&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
	&lt;configuration&gt;
		&lt;source&gt;1.7&lt;/source&gt;
		&lt;target&gt;1.7&lt;/target&gt;
		&lt;compilerId&gt;jdt&lt;/compilerId&gt;
		&lt;compilerArgument&gt;-err:nullAnnot,null&lt;/compilerArgument&gt; &lt;!-- insert your warn/err configuration here --&gt;

                &lt;!-- see http://help.eclipse.org/neon/index.jsp?topic=/org.eclipse.jdt.doc.user/tasks/task-using_batch_compiler.htm for available options
                     or instead re-use the exact JDT org.eclipse.jdt.core.compiler properties from *.prefs, like this:

                     &lt;compilerArguments&gt;
                        &lt;properties&gt;.settings/org.eclipse.jdt.core.prefs&lt;/properties&gt;

                     NB: It's NOT possible to list *.prefs properties directly here; see https://issues.apache.org/jira/browse/MCOMPILER-123,
                     so the following in &lt;compilerArguments&gt; does NOT work (unless you contribute to fixing MCOMPILER-123...) :
                        &lt;org.eclipse.jdt.core.compiler.annotation.nullanalysis&gt;enabled&lt;/org.eclipse.jdt.core.compiler.annotation.nullanalysis&gt;
                        &lt;org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations&gt;true&lt;/org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations&gt;
                --&gt;
	&lt;/configuration&gt;
	&lt;dependencies&gt;
		&lt;!-- This dependency provides the implementation of compiler &quot;jdt&quot;: --&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
			&lt;artifactId&gt;tycho-compiler-jdt&lt;/artifactId&gt;
			&lt;version&gt;${tycho-version}&lt;/version&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/plugin&gt;
&lt;/pre&gt;

Again, a &lt;code&gt;build.plugins.plugin.configuration.compilerArguments.properties&lt;/code&gt; element can be used to reference an existing &lt;code&gt;org.eclipse.jdt.core.prefs&lt;/code&gt; file (see [[Tycho/FAQ#How_to_configure_warning.2Ferror_settings_of_the_OSGi_compiler.3F|above]]).

If you use M2E, then in order to address the following errors, it is recommended that you install https://github.com/jbosstools/m2e-jdt-compiler for lifecycle mapping metadata:

* Plugin execution not covered by lifecycle configuration: org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (execution: default-compile, phase: compile)
* Plugin execution not covered by lifecycle configuration: org.apache.maven.plugins:maven-compiler-plugin:3.5.1:testCompile (execution: default-testCompile, phase: test-compile)

= Packaging =

== How to generate Eclipse-SourceReferences MANIFEST header? ==


See [http://eclipse.org/tycho/sitedocs/tycho-packaging-plugin/package-plugin-mojo.html#sourceReferences docs]. Example for git:

&lt;pre&gt;
&lt;properties&gt;
    &lt;tycho.scmUrl&gt;scm:git:https://git.eclipse.org/r/p/egit/egit.git&lt;/tycho.scmUrl&gt;
&lt;/properties&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;tycho-packaging-plugin&lt;/artifactId&gt;
   &lt;version&gt;${tycho-version}&lt;/version&gt;
   &lt;configuration&gt;
      &lt;sourceReferences&gt;
        &lt;generate&gt;true&lt;/generate&gt;
      &lt;/sourceReferences&gt;
   &lt;/configuration&gt;
   &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-sourceref-jgit&lt;/artifactId&gt;
        &lt;version&gt;${tycho-extras-version}&lt;/version&gt;
      &lt;/dependency&gt;
   &lt;/dependencies&gt;
&lt;/plugin&gt;
&lt;/pre&gt;

This will add the Eclipse-SourceReferences header including commit ID used for this build and tag (if present).

== How to use OSGi declarative service annotations ==

See  [https://bugs.eclipse.org/bugs/show_bug.cgi?id=392764#c8|bug 392764]

= Testing =

The [https://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html Tycho Surefire plugin] runs tests within an OSGi container. The [[Tycho/Reference_Card#Test_bundles | Tycho Reference Card]] has several examples relating to configuring tests.

== How to configure HTTP proxy settings during test execution? ==

Eclipse tends to override standard command-line proxy settings (log says ''System property http.proxyHost has been set to proxy.eclipse.org by an external source. This value will be overwritten using the values from the preferences'') so more tweaks are required

Several options:

'''Manually configure the proxy''' 

&lt;source lang=&quot;xml&quot;&gt;
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
      &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;argLine&gt;-Dhttp.proxyHost=myproxy -Dhttp.proxyPort=1234&lt;/argLine&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
&lt;/source&gt; 

and disable the eclipse system proxy setting 

&lt;source lang=&quot;java&quot;&gt;

    if (Platform.isRunning() &amp;&amp; getProxyService() != null
      &amp;&amp; getProxyService().isSystemProxiesEnabled()
      &amp;&amp; !getProxyService().hasSystemProxies()) {
      // XXX e3.5/gtk.x86_64 activate manual proxy configuration which
      // defaults to Java system properties if system proxy support is
      // not available
     getProxyService().setSystemProxiesEnabled(false);
     getProxyService().setProxiesEnabled(true);
    }
&lt;/source&gt; 

- or -

'''Rely on your OS setting and the native org.eclipse.core.net.* fragment'''

Make sure the native org.eclipse.core.net.* fragment for your platform is included in the test runtime so eclipse will pick up proxy settings configured on OS level: 

&lt;source lang=&quot;xml&quot;&gt;
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
      &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;type&gt;p2-installable-unit&lt;/type&gt;
            &lt;artifactId&gt;org.eclipse.core.net.[YOUR_PLATFORM]&lt;/artifactId&gt;
            &lt;version&gt;[VERSION]&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
&lt;/source&gt; 

If you want a multi-platform solution and are not too constrained by dependencies, you can also include the ''org.eclipse.platform'' feature that contains the fragment for all supported platforms

&lt;source lang=&quot;xml&quot;&gt;
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
      &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;!-- Include org.eclipse.core.net.* fragments, to work with system proxies --&gt;
            &lt;type&gt;p2-installable-unit&lt;/type&gt;
            &lt;artifactId&gt;org.eclipse.platform.feature.feature.group&lt;/artifactId&gt;
            &lt;version&gt;[VERSION]&lt;/version&gt; &lt;!-- or 0.0.0, or even omit this line --&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
&lt;/source&gt;

== How to use SWTBot or some UI tool for testing? ==

You need to configure the ''tycho-surefire-plugin'' to use the UI: &lt;source lang=&quot;xml&quot;&gt;
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
      &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;useUIHarness&gt;true&lt;/useUIHarness&gt;
        &lt;useUIThread&gt;false&lt;/useUIThread&gt;
        &lt;argLine&gt;-Xms40m -Xmx512m&lt;/argLine&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
&lt;/source&gt;

&lt;tt&gt;useUIHarness=true&lt;/tt&gt; ensures the workbench is started before the tests are run.  If your app requires a custom application class (&lt;em&gt;viz&lt;/em&gt; the &lt;tt&gt;org.eclipse.core.runtime.applications&lt;/tt&gt; extension point), you will likely need to [[Tycho/Reference Card#Running_an_application_or_a_product | configure the application]].

You may wish to add &lt;tt&gt;--launcher.suppressErrors&lt;/tt&gt; to the &lt;tt&gt;&amp;lt;appArgLine&amp;gt;&lt;/tt&gt; element to suppress Eclipse error dialogs.

== How do I add OS-specific flags? ==

Some OS's may require special flags (e.g., SWT on MacOS X).  The easiest way is to use a Maven profile to configure a property.  For example:
&lt;source lang=&quot;xml&quot;&gt;
  &lt;properties&gt;
     &lt;os-jvm-flags/&gt; &lt;!-- for the default case --&gt;
  &lt;/properties&gt;
 
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho-version}&lt;/version&gt;
        &lt;configuration&gt;
          &lt;useUIHarness&gt;false&lt;/useUIHarness&gt;
          &lt;useUIThread&gt;true&lt;/useUIThread&gt;
          &lt;argLine&gt;-Xms40m -Xmx1G ${os-jvm-flags}&lt;/argLine&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;macosx-jvm-flags&lt;/id&gt;
      &lt;activation&gt;
        &lt;os&gt;&lt;family&gt;mac&lt;/family&gt;&lt;/os&gt;
      &lt;/activation&gt;
      &lt;properties&gt;
        &lt;os-jvm-flags&gt;-XstartOnFirstThread&lt;/os-jvm-flags&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/source&gt;
Alternatively you could configure the surefire plugins within a profile too.

== How to add a undeclared dependency?  (e.g., OSGi declarative service) ==

Use the &lt;tt&gt; tycho-surefire-plugin&lt;/tt&gt; &lt;tt&gt;&amp;lt;dependencies&amp;gt;&lt;/tt&gt; section (see the [[Tycho/Packaging_Types#eclipse-test-plugin | eclipse-test-plugin]] packaging type for an example).

== How do I install the org.eclipse.osgi.compatibility.state fragment? ==

A variety of platform services are orchestrated by PlatformAdmin that from Luna onwards is hosted by the org.eclipse.osgi.compatibility.state fragment.

See https://wiki.eclipse.org/Equinox/Luna_Framework#Removal_of_the_PlatformAdmin_Service_Implementation

If you try to use one of these services, your tests may fail with an exit code of -1073740771 and your the target/work/data/.metadata/.log file in your test plugin may have a message of the form:

  !MESSAGE The Plug-in Development Environment requires the PlatformAdmin service to operate.
   Please install the compatibility fragment 'org.eclipse.osgi.compatibility.state'.

You need to add bundle org.eclipse.osgi.compatibility.state as a target-platform-configuration extraRequirement: 

&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
  &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
  &lt;configuration&gt;
    ...
    &lt;dependency-resolution&gt;
      &lt;extraRequirements&gt;
        &lt;requirement&gt;
          &lt;type&gt;eclipse-plugin&lt;/type&gt;
          &lt;id&gt;org.eclipse.osgi.compatibility.state&lt;/id&gt;
          &lt;versionRange&gt;[1.1.0,2.0.0)&lt;/versionRange&gt;
        &lt;/requirement&gt;
      &lt;/extraRequirements&gt;
    &lt;/dependency-resolution&gt;
    ...
  &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/source&gt;

== How do I enable assertions during testing? ==

Add an &amp;lt;argLine&amp;gt; to the &lt;tt&gt;tycho-surefire-plugin&lt;/tt&gt;'s configuration:
&lt;source lang=&quot;xml&quot;&gt;
&lt;build&gt;
  &lt;pluginManagement&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho-version}&lt;/version&gt;
        &lt;configuration&gt;
          &lt;argLine&gt;-ea&lt;/argLine&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/pluginManagement&gt;
&lt;/build&gt;
&lt;/source&gt;


== How can I debug my tests? ==

Add &lt;tt&gt;-DdebugPort=8000&lt;/tt&gt; to your Maven commandline and attach a remote debug session.

See the docs https://www.eclipse.org/tycho/sitedocs/tycho-surefire-plugin/test-mojo.html#debugPort

== Can I run eclipse-plugin tests also outside an OSGi container? ==

Yes. In a project using packaging type &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt;, you can add the following configuration to your pom.xml to also run unit tests outside an OSGI container using &lt;tt&gt;maven-surefire-plugin&lt;/tt&gt;:

&lt;source lang=&quot;xml&quot;&gt;
  &lt;build&gt;
    &lt;!-- surefire expects test classes in ${project.build.directory}/test-classes by default --&gt;
    &lt;testOutputDirectory&gt;${project.build.directory}/classes&lt;/testOutputDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.20.1&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;!-- explicitly declare surefire provider for JUnit4, see http://maven.apache.org/surefire/maven-surefire-plugin/examples/providers.html --&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;
            &lt;artifactId&gt;surefire-junit4&lt;/artifactId&gt;
            &lt;version&gt;2.20.1&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;default-test&lt;/id&gt;
            &lt;phase&gt;test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

&lt;/source&gt;

Of course this only makes sense for tests and productive code that should run both inside and outside an OSGi container.

== How do I configure toolchains.xml for use with Jenkins? ==

If you need to use non-standard tools or non-standard versions of standard tools, these may be configured in a &lt;tt&gt;toolchains.xml&lt;/tt&gt;. But how? The recommended location is &lt;tt&gt;~/.m2/toolchains.xml&lt;/tt&gt;  which is not easy to define or share when using Jenkins. By adding
  --global-toolchains toolchains.xml
to your Maven command line invocation, you specify that your &lt;tt&gt;toolchains.xml&lt;/tt&gt; can be found at the root of your GIT repository, typically adjacent to your &lt;tt&gt;pom.xml&lt;/tt&gt;.

The following complete &lt;tt&gt;toolchains.xml&lt;/tt&gt; demonstrates how to specify Java 1.5 and Java 1.8 tools. (Trim two leading spaces after cutting and pasting.)

  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
  &lt;toolchains&gt;
    &lt;!-- JDK toolchains --&gt;
    &lt;toolchain&gt;
      &lt;type&gt;jdk&lt;/type&gt;
      &lt;provides&gt;
        &lt;version&gt;1.5&lt;/version&gt;
        &lt;vendor&gt;oracle&lt;/vendor&gt;
      &lt;/provides&gt;
      &lt;configuration&gt;
       &lt;jdkHome&gt;/opt/tools/java/oracle/jdk-5/latest/bin/java&lt;/jdkHome&gt;
      &lt;/configuration&gt;
    &lt;/toolchain&gt;
    &lt;toolchain&gt;
      &lt;type&gt;jdk&lt;/type&gt;
      &lt;provides&gt;
        &lt;version&gt;1.8&lt;/version&gt;
        &lt;vendor&gt;oracle&lt;/vendor&gt;
      &lt;/provides&gt;
      &lt;configuration&gt;
        &lt;jdkHome&gt;/opt/tools/java/oracle/jdk-8/latest/bin/java&lt;/jdkHome&gt;
      &lt;/configuration&gt;
    &lt;/toolchain&gt;
  &lt;/toolchains&gt;

Once these tools have been defined, a particular version may be configured by including the following in your &lt;tt&gt;pom.xml&lt;/tt&gt;.

    &lt;maven-toolchains-version&gt;1.1&lt;/maven-toolchains-version&gt;
...
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-toolchains-plugin&lt;/artifactId&gt;
        &lt;version&gt;${maven-toolchains-version}&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;goals&gt;
              &lt;goal&gt;toolchain&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
        &lt;configuration&gt;
          &lt;toolchains&gt;
            &lt;jdk&gt;
              &lt;version&gt;1.8&lt;/version&gt;
              &lt;vendor&gt;oracle&lt;/vendor&gt;
            &lt;/jdk&gt;
          &lt;/toolchains&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;

The above defines tool paths that sre suitable for Jenkins and almost certainly not suitable for your local machine. You may define an alternate file, perhaps local-toolchains.xml, with appropriate local paths and use it by specifying it on your maven command line:
  --global-toolchains ../../local-toolchains.xml
This may be conveniently appended to the goals of a Maven launch configuration. The &quot;../..&quot; navigates from the working directory of the launch to the local toolchains file.

== How do I test my latest build on a legacy Eclipse installation? ==

Legacy Eclipse platforms such as Oxygen impose a maximum Java version bound of 8.

Current Tycho and Eclipse platforms impose a minimum Java version bound of 11 and probably soon 17.

Naive testing using a single Java version is therefore not possible.

A further complication arises from the latest default Eclipse signer that uses SHA384 rather than SHA256. Tycho versions prior to 2.7.5 are unable to load the OID 1.2.840.113549.1.1.12 for sha384WithRsaEncryption used by the signer.

The option of 'living in the past' with a uniform set of vintage tools fails since they need to load recently signed artefacts.

The solution is to use recent versions of Tycho and Java to download, build and package your products as normal and then to use legacy versions of Java and Eclipse for the legacy testing.

Specifying the legacy Java version is described in [[#How do I configure toolchains.xml for use with Jenkins?]].

Specifying the legacy Eclipse platform requires a &lt;tt&gt;target&lt;/tt&gt; platform definition something like:

  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;?pde version=&quot;3.8&quot;?&gt;&lt;target includeMode=&quot;feature&quot; name=&quot;Eclipse Oxygen Build Target Platform&quot; sequenceNumber=&quot;16&quot;&gt;
    &lt;locations&gt;
      &lt;location includeAllPlatforms=&quot;false&quot; includeConfigurePhase=&quot;false&quot; includeMode=&quot;planner&quot; includeSource=&quot;true&quot; type=&quot;InstallableUnit&quot;&gt;
        &lt;unit id=&quot;org.eclipse.sdk.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
        &lt;unit id=&quot;org.eclipse.emf.sdk.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
        &lt;unit id=&quot;org.eclipse.uml2.sdk.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
        &lt;unit id=&quot;org.eclipse.xtext.sdk.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
        &lt;repository location=&quot;https://download.eclipse.org/releases/oxygen/201804111000&quot;/&gt;
      &lt;/location&gt;
  ...
    &lt;/locations&gt;
  &lt;/target&gt;

= Diagnosing Build Problems =

== What does Tycho's message &quot;XXXX&quot; mean? ==

See the [[Tycho_Messages_Explained | Tycho Messages Explained]] page.


== My build fails with a ClassCastException/NoClassDefFoundError of a Tycho class. What is wrong? ==

ClassCastExceptions or NoClassDefFoundErrors for Tycho classes most probably indicate that different Tycho versions are used in the same reactor. This is not supported.
The problem typically occurs if some of the modules use the incorrect parent POM, e.g. an older version of the correct parent, or if you directly invoke an explicit version of a Tycho goal on the commandline, e.g. &lt;tt&gt;mvn org.eclipse.tycho:tycho-versions-plugin:1.1.0:set-version&lt;/tt&gt; . Check the parent configuration in all modules of the reactor.

== How to switch on HTTP tracing during p2 dependency download? ==

You can enable apache [[Equinox/p2/Reporting Problems|HTTP client tracing for p2]] on the maven commandline using

&lt;pre&gt;
 -Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog \
 -Dorg.apache.commons.logging.simplelog.showdatetime=true \
 -Dorg.apache.commons.logging.simplelog.log.org.apache.http=DEBUG \
 -Dorg.apache.commons.logging.simplelog.log.org.apache.http.wire=ERROR
&lt;/pre&gt;

== How to switch on eclipse tracing during test execution? ==

Eclipse has a [http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Fguide%2Ftools%2Flaunchers%2Ftracing.htm platform tracing mechanism] which is switched on by using commandline option -debug and configured by putting a file named .options into the installation root.
You can enable this tracing mechanism for tycho test executions by running the build in debug mode using commandline option -X and putting a file .options into the test project root.

E.g. a file .options with content

&lt;pre&gt;
org.eclipse.osgi/resolver/debug=true
org.eclipse.osgi/resolver/wiring=true
&lt;/pre&gt;

will switch on equinox wiring tracing.  You may find it useful to use the &quot;tee&quot; command, since running the build in debug mode may generate a lot of output. An example of this syntax is:

&lt;pre&gt;
cd tests/myPlugin
mvn clean install -debug -X  | tee testout.txt
&lt;/pre&gt;

== Why is my app not working? ==

Many people post to tycho-user when they are encounter problems attempting to run their deployed applications, where the apps are missing icons, or throwing &lt;tt&gt;ClassNotFoundException&lt;/tt&gt; and &lt;tt&gt;NoClassDefFoundError&lt;/tt&gt; exceptions.  Most of these problems are traced to errors in the projects' OSGi/p2 metadata.  Some common issues are:

* a bundle declares a runtime dependencies as optional, but the dependency is actually not optional;
* the &lt;tt&gt;build.properties&lt;/tt&gt; does not include some key directories or resources;
* the class files are not being bundled into a library, but the classpath does not include &quot;.&quot;.

Tycho is not the cause of these issues, but Tycho does help &quot;discover&quot; these issues.

Sources of help:
* The [[PDE/FAQ | PDE FAQ]], particularly the section on [[PDE/FAQ#Build_and_Deployment_Errors | Build and Deployment Errors]].
* [[Where_Is_My_Bundle | Tips on diagnosing bundle load failures]].

== Why do some images not get updated in the native launcher for Windows? ==

For Windows, the process of replacing the images in the native launcher is described below. The processing is done by p2 class: &lt;tt&gt;org.eclipse.pde.internal.swt.tools.IconExe&lt;/tt&gt;

This class looks at the resources of native launcher and notes the bitmaps that are in there: their sizes and their color depth.
Then it looks at the provided images. This can be a list of separate BPMs or an ICO file containing multiple BMPs. Their sizes and color depths are also noted.
This only works when all provided images are uncompressed. When one or more of the images is compressed, the process stops and no bitmaps are replaced in the native launcher.
Next it tries to match the provided BMP sizes and color depths to the ones in the native launcher and where they match, they are replaced in the native launcher.
When one or more bitmaps in the native launcher are not available in the provided images, the following message is written to &lt;tt&gt;System.err&lt;/tt&gt;:
&lt;pre&gt;Error - &lt;n&gt; icon(s) not replaced in […]using […]&lt;/pre&gt;
The class &lt;tt&gt;IconExe&lt;/tt&gt; has a main method and can be run as stand-alone. Its first argument is the native launcher that needs to be modified and the following arguments are the provided BPM or ICO files.

For Eclipse 4.3(.x), the native launcher contains 7 bitmaps:
* 256x256, 32 bit (RGB / Alpha Channel)
* 48x48, 32 bit (RGB / Alpha Channel)
* 32x32, 32 bit (RGB / Alpha Channel)
* 16x16, 32 bit (RGB / Alpha Channel)
* 48x48, 8 bit (256 colors)
* 32x32, 8 bit (256 colors)
* 16x16, 8 bit (256 colors)	

So, for the process of replacing the images to be successful, 7 images with the same size and depth need to be provided, either as separate BMPs or inside an ICO.

'''Note:''' some image manipulation applications, that can create ICO files, tend to compress the 256x256x32 image by default. So be careful that all images in the ICO file are uncompressed.

Also see related [http://stackoverflow.com/questions/10999323/error-in-tycho-while-replacing-the-product-ico-files  stackoverflow answer by Andrew Niefer]

= Documentation =

= In Eclipse IDE =

== What do I need to install in my Eclipse IDE to easily work with Tycho? ==

In order to provide a good integration with Tycho, it's recommended that you install in your Eclipse IDE m2e (Maven support) which is often part of your default IDE, and that you install the '''m2e-tycho connector'''. From the pom editor, when opening a pom file for a module with a Tycho packaging-type such as &lt;tt&gt;eclipse-plugin&lt;/tt&gt;, you should find the necessary links to install the connector if it's not already installed. Otherwise, you can go to the ''Window &gt; Preferences'' window, find ''Maven/Discovery'' page, and click ''Load catalog''. The Tycho lifecycle connector should be visible for installation.

== When I import my project in Eclipse, the IDE tells me “Bundle X cannot be resolved.” ==

Currently, there is no mapping between the Tycho &lt;tt&gt;target-platform-configuration&lt;/tt&gt; element as specified in pom files, and the Target-Platform in your IDE. So you need to manually make sure that your Target-Platform enabled in your IDE contains the necessary bundles and dependencies to work with your Tycho project, ideally the exact same content. The Target-Platform in Eclipse IDE can be configured in ''Preferences &gt; Plug-in Development &gt; Target Platforms''.

To easily keep both Tycho and Eclipse/PDE target-platforms synchronized, it is recommended that you define a &lt;tt&gt;.target&lt;/tt&gt; file and configure Tycho build and Eclipse IDE to use it for dependency resolution. See [[../Target_Platform#Target_files]] for more details.

[[Category:Tycho|FAQ]][[Category:FAQ]]</text>
      <sha1>qszlsg88dbx3i4cakassxwfog9pbg2r</sha1>
    </revision>
  </page>
  <page>
    <title>Getting Tycho</title>
    <ns>0</ns>
    <id>47482</id>
    <revision>
      <id>441764</id>
      <parentid>441595</parentid>
      <timestamp>2020-11-25T19:23:07Z</timestamp>
      <contributor>
        <username>Laeubi.laeubi-soft.de</username>
        <id>21454</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2329">__TOC__
=== Introduction ===
Tycho is a Maven extension, so it doesn't need to be downloaded manually. Instead, Maven will automatically download it from [https://search.maven.org/ Maven Central] when you reference the Tycho build extension or one of the Tycho Extras plugins in your POM.

Obviously, you need to have [https://maven.apache.org/download.cgi Maven installed]. We recommend to use at least Maven 3.3.x. The minimum required version is 3.0.

To use the Tycho build extension, add the following configuration in your parent POM:

&lt;pre&gt;
&lt;properties&gt;
   &lt;tycho-version&gt;1.0.0&lt;/tycho-version&gt;
&lt;/properties&gt;

&lt;build&gt;
   &lt;plugins&gt;
      &lt;plugin&gt;
         &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
         &lt;artifactId&gt;tycho-maven-plugin&lt;/artifactId&gt;
         &lt;version&gt;${tycho-version}&lt;/version&gt;
         &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
   &lt;/plugins&gt;
&lt;/build&gt;
&lt;/pre&gt;

Then you can make use of the [[Tycho/Packaging Types|Tycho packaging types]] to build Eclipse plug-ins, features, p2 repositories, and Eclipse-based applications.

See the [[Tycho/Release Notes|release notes]] for a list of all available Tycho versions.


=== Getting Tycho SNAPSHOTS ===

If you want to use the latest development version of Tycho, update the &lt;tt&gt;tycho-version&lt;/tt&gt; property accordingly and add the Maven repository containing the Tycho snapshots in your parent POM:

&lt;pre&gt;
&lt;pluginRepositories&gt;
   &lt;pluginRepository&gt;
      &lt;id&gt;tycho-snapshots&lt;/id&gt;
      &lt;url&gt;https://repo.eclipse.org/content/repositories/tycho-snapshots/&lt;/url&gt;
   &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/pre&gt;


If you want to make the Tycho development version available in all your builds, you can also add the tycho-snapshots repository in your settings.xml:

&lt;pre&gt;
&lt;settings&gt;

   &lt;profiles&gt;
      &lt;profile&gt;
         &lt;id&gt;tycho-snapshots&lt;/id&gt;
         &lt;pluginRepositories&gt;
            &lt;pluginRepository&gt;
               &lt;id&gt;tycho-snapshots&lt;/id&gt;
               &lt;url&gt;https://repo.eclipse.org/content/repositories/tycho-snapshots/&lt;/url&gt;
               &lt;releases&gt;
                  &lt;enabled&gt;false&lt;/enabled&gt;
               &lt;/releases&gt;
            &lt;/pluginRepository&gt;
         &lt;/pluginRepositories&gt;
      &lt;/profile&gt;
   &lt;/profiles&gt;

   &lt;activeProfiles&gt;
      &lt;activeProfile&gt;tycho-snapshots&lt;/activeProfile&gt;
   &lt;/activeProfiles&gt;

&lt;/settings&gt;
&lt;/pre&gt;

[[Category:Tycho]]</text>
      <sha1>4hhm465dvb87cah4641jjlso63gj17j</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Glossary</title>
    <ns>0</ns>
    <id>33332</id>
    <revision>
      <id>271231</id>
      <parentid>271229</parentid>
      <timestamp>2011-10-05T13:13:25Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>&quot;glossary&quot; better matches the content of the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1420">This page describes some important terms and concepts of Tycho.

; &lt;span id=&quot;Dependency_Resolution&quot;&gt;Dependency Resolution&lt;/span&gt;
: During dependency resolution, Tycho matches the references to bundles, packages, etc. in the project's sources (&lt;tt&gt;MANIFEST.MF&lt;/tt&gt;, &lt;tt&gt;feature.xml&lt;/tt&gt;, etc.) with the target platform and the other projects built in the same reactor.

; &lt;span id=&quot;Reactor&quot;&gt;Reactor&lt;/span&gt;
: The Maven reactor, i.e. everything that is built together in the same &lt;tt&gt;mvn&lt;/tt&gt; call.

; &lt;span id=&quot;Target_Definition_Files&quot;&gt;Target Definition Files&lt;/span&gt;
: With the target definition file format, one can select a set of bundles and features from one or more p2 repositories. The same target definition file (or &quot;target file&quot; in short) can be used to define both the target platform for the Eclipse PDE, as well as the target platform in Tycho.

; &lt;span id=&quot;Target_Platform&quot;&gt;Target Platform&lt;/span&gt;
: The target platform is the set of artifacts against which the project resolves its dependencies. There are different ways to define the target platform; the most common ones are repositories with &lt;tt&gt;layout=p2&lt;/tt&gt;, which add an entire repository to the target platform, or target definition files for more fine-grained control. Each module has its own target platform, although with the normal configuration inheritance in Maven, the target platforms often have identical content.

[[Category:Tycho|Glossary]]</text>
      <sha1>635gowg298kwmv3ac1q7hp0ytu73eqo</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho Messages Explained</title>
    <ns>0</ns>
    <id>31818</id>
    <revision>
      <id>416304</id>
      <parentid>303014</parentid>
      <timestamp>2017-05-03T11:55:24Z</timestamp>
      <contributor>
        <username>Psuzzi.gmail.com</username>
        <id>7239</id>
      </contributor>
      <comment>Added a tip to resolve an issue I encountered while fixing a complex Tycho build.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2764">This page explains errors and warnings reported by Tycho. It shall help Tycho users to diagnose and resolve build problems, or to report bugs in Tycho.

== Error Messages ==

(Please help writing this page!)

== Warning Messages ==

&lt;div id=&quot;Mirror_tool&quot;&gt;&lt;/div&gt;
=== &lt;tt&gt;[WARNING] Mirror tool: &quot;Problems resolving provisioning plan.&quot;&lt;/tt&gt; ===

This message may be shown by the tycho-p2-repository-plugin (in version 0.13 or later) when an eclipse-repository module includes a [http://aniefer.blogspot.com/2009/06/patching-features-with-p2.html feature patch]. Feature patches allow to replace plug-ins contained in a feature with different versions of the plug-ins, so a target platform containing a feature and a corresponding feature patch has ''only'' the new versions of the plug-ins. The p2 mirror tool, which is used by the tycho-p2-repository-plugin, mirrors from the resolved target platform, but it is not aware of the semantics of feature patches. Therefore it also tries to mirror the original versions of the plug-ins, and issues a warning when it fails to do so.

In case the warning only reports unsatisfied dependencies to the original versions of plug-ins replaced through a feature patch, it can be safely ignored. All other cases probably indicate an internal error in Tycho and should be [https://bugs.eclipse.org/bugs/query.cgi?product=Tycho reported].

In the case of this message depends on &quot;Cannot resolve target definition:&quot; for some plugins, you can try to adjust the target platform by explicitly adding the plugins and specifying the plug-ins exact version. 

&lt;div id=&quot;Eclipse_Application&quot;&gt;&lt;/div&gt;
=== &lt;tt&gt;[WARNING] The packaging type 'eclipse-application' is deprecated; use 'eclipse-repository' instead.&lt;/tt&gt; ===

This message is shown by the tycho-packaging-plugin (in version 0.15.0 or later) when packaging type &lt;tt&gt;eclipse-application&lt;/tt&gt; is used.
&lt;tt&gt;eclipse-application&lt;/tt&gt; does not produce p2-enabled products and is no longer maintained. Use [[Tycho/Packaging Types#Creating Product Zip Files|eclipse-repository]] instead.

&lt;div id=&quot;Target_File_Include_Bundles&quot;&gt;&lt;/div&gt;
=== &lt;tt&gt;[WARNING] De-selecting bundles in a target definition file is not supported&lt;/tt&gt; ===

The Eclipse Target Editor has the possibiltiy to remove individual bundles from the resolved target definition content. (This is done via the selection on the Content tab of the editor, and results in a &lt;tt&gt;&amp;lt;includeBundles&amp;gt;&lt;/tt&gt; tag in the target definition file.) This configuration is currently ignored Tycho (cf. [https://bugs.eclipse.org/bugs/show_bug.cgi?id=373776 bug 373776]).

As an alternative, you can use [[Tycho/Target Platform#Filtering|target platform filters]] to remove bundles from the target platform.

[[Category:Tycho|Messages Explained]]</text>
      <sha1>84w1wzntndpoanmfg1z0ukwzctcaqog</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Nexus Unzip Plugin</title>
    <ns>0</ns>
    <id>39556</id>
    <revision>
      <id>443499</id>
      <parentid>369605</parentid>
      <timestamp>2021-06-19T02:41:46Z</timestamp>
      <contributor>
        <username>Martindaloia.gmail.com</username>
        <id>13452</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8769">= Nexus Unzip Repository  =

== What is it ? == 

The Unzip Repository is a plugin for the [http://www.sonatype.org/nexus/ Nexus OSS] maven repository manager.&lt;br/&gt;
It enables binary p2 artifact exchange between tycho projects via Nexus.

== How does it work ? == 

# The first tycho project (&quot;producer&quot;) deploys a (zipped) p2 repository to nexus. It does this by simply using &lt;tt&gt;mvn deploy&lt;/tt&gt; on a maven project with packaging type &lt;tt&gt;eclipse-repository&lt;/tt&gt;
# The second tycho project (&quot;consumer&quot;) uses the p2 repository deployed by &quot;producer&quot;. This is done using a special &quot;unzip&quot; URL providing an &quot;unzipped view&quot; on the zipped p2 repository

== Implementation Details == 

The Unzip Repository is a new Nexus repository type that shadows the build results of a standard Maven 2 repository and allows to browse into zip and jar artifacts. 

Example: 

*p2 repo zip as artifact in Maven 2 Repository:&lt;br&gt;
 http&amp;#58;//&amp;lt;NEXUS_HOST&amp;gt;/nexus/content/repositories/public/org/example/org.example.repository/0.1.0/org.example.repository-0.1.0-assembly.zip
*Same artifact viewed as unzipped p2 repository using a virtual unzip repo named &lt;tt&gt;public.unzip&lt;/tt&gt;:
 http&amp;#58;//&amp;lt;NEXUS_HOST&amp;gt;/nexus/content/repositories/'''&lt;font color=&quot;red&quot;&gt;public.unzip&lt;/font&gt;'''/org/example/org.example.repository/0.1.0/org.example.repository-0.1.0-assembly.zip'''&lt;font color=&quot;red&quot;&gt;-unzip&lt;/font&gt;'''

{{warning|&quot;Unzip&quot; URLs of redeployable artifacts (e.g. snapshots) cannot be used while the artifact is redeployed!|The current implementation does not guarantee that you find valid content under the &quot;unzip&quot; URL of such artifacts while they are redeployed. Take care to not access those URLs during redeployment.}}

== Installation and Configuration  ==

=== Prerequisites  ===

Nexus Unzip Repository Plugin 0.14.0 requires [http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22nexus-bundle-template%22 Nexus OSS version 2.8.x or later].

=== Download ===

Get the nexus unzip-repository-plugin version 0.14.0 from [http://repo1.maven.apache.org/maven2/org/eclipse/tycho/nexus/unzip-repository-plugin/0.14.0/unzip-repository-plugin-0.14.0-bundle.zip maven central].

=== Deploying the plug-in  ===

To enable a Nexus server to provide direct access to files inside zip/jar archives, you need to deploy the Nexus Unzip Repository Plugin to the Nexus server instance and configure a new virtual repository using the Unzip Repository type. 

#Stop the Nexus instance 
#Unzip the &lt;tt&gt;unzip-repository-plugin-&amp;lt;VERSION&amp;gt;-bundle.zip&lt;/tt&gt; into &lt;tt&gt;${NEXUS_WORK}/plugin-repository/&lt;/tt&gt;  folder 
#Restart the Nexus server 
#To verify that the Unzip Repository Plugin is activated, open the Plugin Console from the Administration sub-menu of the Nexus UI

=== Configuring an unzip repository (using hosted/proxy/virtual repo as master)  ===

WARNING: Using the Nexus Web UI you can only assign hosted, proxy and virtual repositories as the master repository. To configure a group as the used master , you need to configure it directly in the configuration file on the Nexus host machine. Details in the section below. 

#Open the Nexus Web UI 
#Login with your administrative user 
#Choose the Repositories View from the side menu 
#Open the Add menu and choose Virtual Repository. The detail view below the repository list opens a form to specify further repository configuration. 
#Enter a unique repository ID and choose a (display) name
#Choose &lt;tt&gt;Unzip Repository Template&lt;/tt&gt; as the repository provider
#Select the intended repository from the list of the source nexus repositories (see below if you want to configure a group as source repository)
#Save the repository config 
#To verify the setup of the unzip repository, you can now select the repository from the repository list and start browsing the folders '''and''' into archives that you have deployed into the previously selected master repository. You can also open the URL given in the Repository Path column to browse in the standard web browser.

=== Configuring a group as master for the unzip repository  ===

All groups and repositories configuration are stored in the nexus.xml config file in the Nexus work folder. Due to a limitation of the configuration web UI, you currently have to edit this file directly in a text editor in order to configure a group repository as master. 

#Stop Nexus 
#Open &lt;tt&gt;${NEXUS_WORK}/conf/nexus.xml&lt;/tt&gt; 
#Add a new repository element with following structure
 &amp;lt;repository&amp;gt;
   &amp;lt;id&amp;gt;master.group.unzip&amp;lt;/id&amp;gt;
   &amp;lt;name&amp;gt;Group Unzip&amp;lt;/name&amp;gt;
   &amp;lt;providerRole&amp;gt;org.eclipse.tycho.nexus.internal.plugin.UnzipRepository&amp;lt;/providerRole&amp;gt;
   &amp;lt;providerHint&amp;gt;org.eclipse.tycho.nexus.plugin.DefaultUnzipRepository&amp;lt;/providerHint&amp;gt;
   &amp;lt;localStatus&amp;gt;IN_SERVICE&amp;lt;/localStatus&amp;gt;
   &amp;lt;notFoundCacheActive&amp;gt;true&amp;lt;/notFoundCacheActive&amp;gt;
   &amp;lt;notFoundCacheTTL&amp;gt;15&amp;lt;/notFoundCacheTTL&amp;gt;
   &amp;lt;userManaged&amp;gt;true&amp;lt;/userManaged&amp;gt;
   &amp;lt;exposed&amp;gt;true&amp;lt;/exposed&amp;gt;
   &amp;lt;browseable&amp;gt;true&amp;lt;/browseable&amp;gt;
   &amp;lt;writePolicy&amp;gt;READ_ONLY&amp;lt;/writePolicy&amp;gt;
   &amp;lt;searchable&amp;gt;true&amp;lt;/searchable&amp;gt;
   &amp;lt;localStorage&amp;gt;
     &amp;lt;provider&amp;gt;file&amp;lt;/provider&amp;gt;
   &amp;lt;/localStorage&amp;gt;
   &amp;lt;externalConfiguration&amp;gt;
     &amp;lt;masterRepositoryId&amp;gt;public&amp;lt;/masterRepositoryId&amp;gt;
     &amp;lt;useVirtualVersion&amp;gt;true&amp;lt;/useVirtualVersion&amp;gt;
     &amp;lt;synchronizeAtStartup&amp;gt;false&amp;lt;/synchronizeAtStartup&amp;gt;
   &amp;lt;/externalConfiguration&amp;gt;
 &amp;lt;/repository&amp;gt;
Note that you specify the repository id (not the name) of the group in the &lt;tt&gt;masterRepositoryId&lt;/tt&gt; element. &lt;br&gt;4. Restart Nexus

&lt;span id=&quot;Virtual versions&quot;&gt;
=== Enabling virtual versions SNAPSHOT and RELEASE  ===

Especially for &lt;tt&gt;SNAPSHOT&lt;/tt&gt; versions, it's generally useful to be able to reference the latest SNAPSHOT version of a p2 repository without having to specify the actual timestamp of the latest SNAPSHOT&lt;br&gt;
 http&amp;#58;//&amp;lt;NEXUS_HOST&amp;gt;/nexus/content/repositories/public.unzip/org/example/org.example.repository/0.1.0-SNAPSHOT/org.example.repository-0.1.0'''&lt;font color=&quot;red&quot;&gt;-SNAPSHOT&lt;/font&gt;'''-assembly.zip-unzip

Again due to a limitation of the configuration web UI, you currently have to manually edit &lt;tt&gt;${NEXUS_WORK}/conf/nexus.xml&lt;/tt&gt;. 
To enable virtual SNAPSHOT version expansion, configure '''useVirtualVersion=true''' in &lt;tt&gt;${NEXUS_WORK}/conf/nexus.xml&lt;/tt&gt; and restart nexus. For example:
 &amp;lt;repository&amp;gt;
   &amp;lt;id&amp;gt;master.group.unzip&amp;lt;/id&amp;gt;
   &amp;lt;name&amp;gt;Group Unzip&amp;lt;/name&amp;gt;
   &amp;lt;providerRole&amp;gt;org.eclipse.tycho.nexus.internal.plugin.UnzipRepository&amp;lt;/providerRole&amp;gt;
   &amp;lt;providerHint&amp;gt;org.eclipse.tycho.nexus.plugin.DefaultUnzipRepository&amp;lt;/providerHint&amp;gt;
   &amp;lt;localStatus&amp;gt;IN_SERVICE&amp;lt;/localStatus&amp;gt;
   &amp;lt;notFoundCacheActive&amp;gt;true&amp;lt;/notFoundCacheActive&amp;gt;
   &amp;lt;notFoundCacheTTL&amp;gt;15&amp;lt;/notFoundCacheTTL&amp;gt;
   &amp;lt;userManaged&amp;gt;true&amp;lt;/userManaged&amp;gt;
   &amp;lt;exposed&amp;gt;true&amp;lt;/exposed&amp;gt;
   &amp;lt;browseable&amp;gt;true&amp;lt;/browseable&amp;gt;
   &amp;lt;writePolicy&amp;gt;READ_ONLY&amp;lt;/writePolicy&amp;gt;
   &amp;lt;searchable&amp;gt;true&amp;lt;/searchable&amp;gt;
   &amp;lt;localStorage&amp;gt;
     &amp;lt;provider&amp;gt;file&amp;lt;/provider&amp;gt;
   &amp;lt;/localStorage&amp;gt;
   &amp;lt;externalConfiguration&amp;gt;
     &amp;lt;masterRepositoryId&amp;gt;public&amp;lt;/masterRepositoryId&amp;gt;
     &amp;lt;useVirtualVersion&amp;gt;'''&lt;font color=&quot;red&quot;&gt;true&lt;/font&gt;'''&amp;lt;/useVirtualVersion&amp;gt;
     &amp;lt;synchronizeAtStartup&amp;gt;false&amp;lt;/synchronizeAtStartup&amp;gt;
   &amp;lt;/externalConfiguration&amp;gt;
 &amp;lt;/repository&amp;gt;

'''&lt;font color=&quot;red&quot;&gt;WARNING:&lt;/font&gt;''' the '''Anonymous user should have read permission over the virtualized repository''' otherwise when a request to an unzip URL with -SNAPSHOT is made you will get a HTTP 500 and you will see in Nexus logs an error caused by:
  org.sonatype.nexus.proxy.AccessDeniedException: Access denied on repository ID='my-hosted-snapshots', path='/path-to-the-artifact/1.0.0-SNAPSHOT/maven-metadata.xml', action='read'!

This is because when the unzipped version of a -SNAPSHOT is requested, the plugin looks for the latest timestamp making. To do this it makes an unauthenticated request to get the metadata of the this GAV on the related hosted repository.
See the [https://git.eclipse.org/c/tycho/org.eclipse.tycho.nexus.git/tree/unzip-repository-plugin/src/main/java/org/eclipse/tycho/nexus/internal/plugin/cache/SnapshotRequest.java#n51 code]
&lt;/span&gt;

== Contributing ==

The project source code is hosted at [http://git.eclipse.org/c/tycho/org.eclipse.tycho.nexus.git/ eclipse] with the Tycho project. You can also fork it on [https://github.com/eclipse/tycho.nexus github].
See [[Tycho/Contributor Guide]] for details on how to contribute.

[[Category:Tycho|Nexus Unzip Plugin]]</text>
      <sha1>tcyx6lyzl2p2a0diyfvvdqvurwmt8fo</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/p2iu.xml</title>
    <ns>0</ns>
    <id>46967</id>
    <revision>
      <id>378872</id>
      <parentid>378871</parentid>
      <timestamp>2015-02-26T03:47:40Z</timestamp>
      <contributor>
        <username>Pascal.rapicorp.com</username>
        <id>16694</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4136">The &lt;tt&gt;p2iu.xm&lt;/tt&gt; file can be used to author IUs directly in XML in a format close to the one used by p2. It advangeously replaces the p2.inf ([[Equinox/p2/Customizing_Metadata]]) that always forced you to author complete IUs in a properties file. As such it makes it easier to author IUs that deliver any file, deliver configuration, or use advanced functionalities of patches. In short nothing stands between you and all the abilities of p2 :).

== Format overview ==
The simplest &lt;tt&gt;p2iu.xml&lt;/tt&gt; file that can be written is the following. Of course such a file does not do much but it shows the main required tags.
&lt;pre&gt;
  &lt;?xml version='1.0' encoding='UTF-8'?&gt;
  &lt;unit id='org.tycho.demo.rootfiles' version='1.0.0' singleton='false'/&gt;
&lt;/pre&gt;

In addition to the identification done through the id and version tags, a &lt;tt&gt;p2iu.xml&lt;/tt&gt; has three main sections:
* capabilities, which give the opportunity to the iu to describe the capabilities it provides
* requires, which allow for the IU to express requirements on other IUs.
* touchpoint / touchpointData, which allow to control which actions should be executed at different phases of the installation / uninstallation process
Other sections such as update, properties, meta-requirements, that you usually find in normal p2 ius are also supported.

== Version expansion ==
Tycho allows some wildcard versions to be used in the following places:
* In capabilities, when a version ends with qualifier (e.g. 1.2.3.qualifier), the qualifier will be replaced by the build qualifier (e.g. 1.2.3.v20150225)
* In requirements, 0.0.0 will be replaced by the version of the IU matching the requirement. Note that the requirement can denote an IU being built or already existing. In a version ending with qualifier (e.g. 1.2.3.qualifier), the qualifier will be replaced by the qualifier of the IU matching the requirement. Note that the expansion of versions in requirements is only supported for requirements in the  &lt;tt&gt;org.eclipse.equinox.p2.iu&lt;/tt&gt; namespace.

== Packaging files ==
If your IU needs to include files, they simply need to be located in the folder &lt;tt&gt;src/main/resources/&lt;/tt&gt; of your project, and they will automatically be copied.

== Example, IU delivering root files ==
This &lt;tt&gt;p2iu.xml&lt;/tt&gt; presents a complete IU that delivers root files in the installation folder of an application.
This specific IU also requires the installation of a second IU that delivers specific files on windows.
You can find the complete example at [http://git.eclipse.org/c/tycho/org.eclipse.tycho-demo.git/tree/itp04-rcp].

&lt;pre&gt;
  &lt;?xml version='1.0' encoding='UTF-8'?&gt;
  &lt;unit id='org.tycho.demo.rootfiles' version='1.0.0' singleton='false'&gt;
    &lt;properties&gt;
      &lt;property name='org.eclipse.equinox.p2.name' value='Root files for my product'/&gt;
    &lt;/properties&gt;
    &lt;requires&gt;
        &lt;required namespace='org.eclipse.equinox.p2.iu' name='org.tycho.demo.rootfiles.win' range='1.0.0.qualifier'&gt;
	  &lt;filter&gt;
          (&amp;amp;(osgi.arch=x86_64)(osgi.os=win32)(osgi.ws=win32))
          &lt;/filter&gt;
        &lt;/required&gt;
    &lt;/requires&gt;
    &lt;touchpoint id='org.eclipse.equinox.p2.native' version='1.0.0'/&gt;
    &lt;touchpointData&gt;
      &lt;instructions&gt;
        &lt;instruction key='install'&gt;
          unzip(source:@artifact, target:${installFolder});
        &lt;/instruction&gt;
        &lt;instruction key='uninstall'&gt;
          cleanupzip(source:@artifact, target:${installFolder});
        &lt;/instruction&gt;
      &lt;/instructions&gt;
    &lt;/touchpointData&gt;
  &lt;/unit&gt;
&lt;/pre&gt;

== Copying XML snippet from a content.xml ==
Though it is currently possible to copy an IU contained in a content.xml into a p2iu.xml file, know that this is a &quot;happy coincidence&quot; and may not be true forever. When performing such a copy, you need to be aware of a couple of things:
* You must rename the IU, and remove any undesired capabilities. In most cases it is probably sufficient to completely remove the capabilities section
* You must remove the artifacts section
* Be sure to cleanup the requires section in order to avoid any extraneous content
* Be sure to review the touchpoint instructions

[[Category:Tycho|p2iu.xml]]</text>
      <sha1>jucdmc6u7pglbb5pu78t9bvfgtxbtw1</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Pack200</title>
    <ns>0</ns>
    <id>39871</id>
    <revision>
      <id>444517</id>
      <parentid>424435</parentid>
      <timestamp>2021-12-17T08:26:06Z</timestamp>
      <contributor>
        <username>Mistria.redhat.com</username>
        <id>12101</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3507">{{warning|1=pack200 support is being removed from Java, p2 and Tycho. Just don't use it any more.}} 

== Purpose and Generalities ==

Pack200 is a compression dedicated to Jar files that is recommended to use in eclipse p2 repositories. More details are available at http://docs.oracle.com/javase/1.5.0/docs/guide/deployment/deployment-guide/pack200.html and [[Pack200]] 

== Pack200 only ==

Add plugin execution '''pack200b:pack''' on your eclipse-plugin and eclipse-test-plugin to enable pack200 for them. In order to get your bundles generate their pack200'ed artifacts as well as regular jar, just add this to your pom:

&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
	&lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
	&lt;artifactId&gt;tycho-pack200b-plugin&lt;/artifactId&gt;
	&lt;version&gt;${tychoExtrasVersion}&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;id&gt;pack200-pack&lt;/id&gt;
			&lt;goals&gt;
				&lt;goal&gt;pack&lt;/goal&gt;
			&lt;/goals&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
&lt;/plugin&gt;
&lt;!-- Then, alter p2-metadata to make the .pack.gz
artifact visible from other modules --&gt;
&lt;plugin&gt;
	&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
	&lt;artifactId&gt;tycho-p2-plugin&lt;/artifactId&gt;
	&lt;version&gt;${tychoVersion}&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;id&gt;p2-metadata&lt;/id&gt;
			&lt;goals&gt;
				&lt;goal&gt;p2-metadata&lt;/goal&gt;
			&lt;/goals&gt;
			&lt;phase&gt;package&lt;/phase&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
	&lt;configuration&gt;
		&lt;defaultP2Metadata&gt;false&lt;/defaultP2Metadata&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/source&gt;

For each artifact, it will create the .pack.gz jar as well as the regular jar.

This does not apply on eclipse-plugin and eclipse-test-plugin packaging type since it creates the related pack200'ed bundles. It does not apply on features or repositories. however eclipse-repository can be onfigured to consume and embed pack200'ed artifacts, not generate some.

== Pack200 and Signing ==

Pack200 is most commonly used together with jar singing and requires separate &quot;normalization&quot; phase . Because there are at least two ways to sign jars and because maven does not allow interleaving mojos from the same plugin with mojos from different plugins within the same build phase, it was necessary to split pack200 normalize and pack functionality between two separate maven plugins. The relevant part of build lifecycle looks like this:
# pack200a:normalize
# sign
# pack200b:pack
# Alter p2 metadata

It is better to plugin those changes in the ''package'' phase, so the bundles that are signed are the ones that will be used by Surefire.

== Set eclipse-repository to include packed artifacts ==

''eclipse-repository'' packaging type will automatically include packed artifacts (as well as regular jars) if they are available in the target-platform. To make target-platform, and then eclipse-repository, using .pack.gz stuff, you simply have to set the ''includePackedArtifacts'' parameter to true in your target-platform-configuration-plugin.

&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
	&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
	&lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
	&lt;version&gt;${tychoVersion}&lt;/version&gt;
	&lt;configuration&gt;
		&lt;includePackedArtifacts&gt;true&lt;/includePackedArtifacts&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/source&gt;

Note that deprecated ''eclipse-update-site'' doesn't consider packed artifacts.

== Others ==

=== Sources and pack200 ===

pack200 is only a compression for .class files, so it does not make sense to ship pack200'ed source bundles. The pack200 plugins are not aware of the source bundles, and then it's impossible (but useless) to have packed source bundles. 

[[Category:Tycho|Pack200]]</text>
      <sha1>f8sggjgfolwle47yv2cbxt07k07biut</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Packaging Types</title>
    <ns>0</ns>
    <id>31692</id>
    <revision>
      <id>448057</id>
      <parentid>448056</parentid>
      <timestamp>2023-11-23T09:06:14Z</timestamp>
      <contributor>
        <username>Lars.Vogel.vogella.com</username>
        <id>17896</id>
      </contributor>
      <comment>/* eclipse-application */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9815">This page documents the packaging types available in the latest Tycho release. See [https://wiki.eclipse.org/index.php?title=Tycho/Packaging_Types&amp;action=history History] to discover when new packaging types were added. 

&lt;pre&gt;
&lt;properties&gt;
  &lt;tycho-version&gt;1.2.0&lt;/tycho-version&gt;
&lt;/properties&gt;

&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
      &lt;artifactId&gt;tycho-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;${tycho-version}&lt;/version&gt;
      &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
&lt;/pre&gt;

== eclipse-plugin ==

This packaging type corresponds to Eclipse Plug-in and Plug-in Fragment projects. By default, Tycho will use compile source roots defined in build.properties file. Minimum required pom.xml

&lt;pre&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;some-group-id&lt;/groupId&gt;
  &lt;artifactId&gt;Bundle-SymbolicName&lt;/artifactId&gt;
  &lt;version&gt;Bundle-Version&lt;/version&gt;
  &lt;packaging&gt;eclipse-plugin&lt;/packaging&gt;

&lt;/project&gt;
&lt;/pre&gt;

Values of &lt;tt&gt;artifactId&lt;/tt&gt; and &lt;tt&gt;version&lt;/tt&gt; elements must match corresponding values from bundle manifest (also see &quot;-SNAPSHOT versions&quot; below).

Since Tycho uses OSGi bundle manifest to determine project dependencies, pom.xml file should NOT contain &lt;tt&gt;&lt;dependency&gt;&lt;/tt&gt; section, and any dependencies inherited from parent project will be ignored by the build.

== eclipse-test-plugin ==

Maven projects typically have separate test source directories in the same project. The Eclipse convention, however, is to have a separate test bundle (often a fragment of the host/target plugin with the suffix &quot;.tests&quot;). Tycho introduces new &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt; packaging type to represent such projects. Build behavior is like regular Eclipse plugins, but these are treated specially at test-time.

Minimum pom.xml
&lt;pre&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;some-group-id&lt;/groupId&gt;
  &lt;artifactId&gt;Bundle-SymbolicName&lt;/artifactId&gt;
  &lt;version&gt;Bundle-Version&lt;/version&gt;
  &lt;packaging&gt;eclipse-test-plugin&lt;/packaging&gt;

&lt;/project&gt;
&lt;/pre&gt;

&lt;tt&gt;org.eclipse.tycho:tycho-surefire-plugin:test&lt;/tt&gt; mojo executes JUnit plug-in tests and it is bound to the integration-test build phase. Other than than, the tycho-surefire-plugin is similar to the standard maven-surefire-plugin, and it supports most of the parameters of the maven-surefire-plugin (see [https://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html site doc] for details). The tycho-surefire-plugin supports both headless and UI-based tests, but use of UI test harness has to be explicitly enabled, as follows:

&lt;pre&gt;
  &lt;build&gt;
    &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho-version}&lt;/version&gt;
        &lt;configuration&gt;
          &lt;useUIHarness&gt;true&lt;/useUIHarness&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/pre&gt;

The OSGi runtime for the test execution consists of the test bundle/fragment and its dependencies. If needed, you can add more features (&quot;eclipse-feature&quot;), bundles/fragments (&quot;eclipse-plugin&quot;), or installable units (&quot;p2-installable-unit&quot;), each including their transitive dependencies, to the test runtime. The recommended way to do this is to add an extraRequirements configuration to the target-platform-configuration (!) plugin. Example:

&lt;pre&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
   &lt;version&gt;${tycho-version}&lt;/version&gt;
   &lt;configuration&gt;
      &lt;dependency-resolution&gt;
         &lt;extraRequirements&gt;
            &lt;requirement&gt;
               &lt;type&gt;eclipse-feature&lt;/type&gt;
               &lt;id&gt;myproject.app.feature&lt;/id&gt;
               &lt;versionRange&gt;1.0.0&lt;/versionRange&gt;
            &lt;/requirement&gt;
         &lt;/extraRequirements&gt;
      &lt;/dependency-resolution&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/pre&gt;

Tips:
* Tests typically fail if implicit dependencies are missing, e.g. if your bundle or a referenced bundle makes use of declarative services, but there is no explicit reference to the bundle org.eclipse.equinox.ds. The same problem can occur when your users install your bundles with p2. Therefore it is a good idea to make the implicit dependencies of your bundles explicit through the feature used to ship your bundles, e.g. by adding a dependency to org.eclipse.equinox.ds in the feature. Configuring this feature in the tycho-surefire-plugin configuration should then also make the test runtime complete.
* In order to add native fragments for several target environments, e.g. the SWT fragments, add a feature that contains all of them, e.g. the feature org.eclipse.rcp.

== eclipse-feature ==

This packaging type corresponds to Eclipse Feature project and requires the following minimum pom.xml:

&lt;pre&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;some-group-id&lt;/groupId&gt;
  &lt;artifactId&gt;feature id&lt;/artifactId&gt;
  &lt;version&gt;feature version&lt;/version&gt;
  &lt;packaging&gt;eclipse-feature&lt;/packaging&gt;

&lt;/project&gt;
&lt;/pre&gt;

Similar to eclipse-plugin projects, &lt;tt&gt;artifactId&lt;/tt&gt; and &lt;tt&gt;version&lt;/tt&gt; attributes must match id and version attributes of feature.xml file.

Tycho supports [http://help.eclipse.org/juno/index.jsp?topic=/org.eclipse.pde.doc.user/tasks/pde_rootfiles.htm root properties] in the build.properties file, which can be used to add files to the root of a product installation. (Limitation: &lt;tt&gt;root.folder&lt;/tt&gt; properties are currently not supported. Wildcard patterns are supported since Tycho 0.17.0.)

Limitation: The &lt;tt&gt;unpack&lt;/tt&gt; attribute in the &lt;tt&gt;feature.xml&lt;/tt&gt; is ignored. If you need a bundle to be installed in unpacked form, specify &lt;tt&gt;Eclipse-BundleShape: dir&lt;/tt&gt; in the manifest of the bundle.  If this is a third party bundle, it will mean repackaging it to include this Eclipse proprietary value.

== eclipse-repository ==

The packaging type eclipse-repository is used for aggregating content into a p2 repository (aka &quot;update site&quot;). It can also be used for building Eclipse/RCP application distributions. See [[Tycho/eclipse-repository]] for more information.

== eclipse-target-definition ==

This packaging is used in Tycho to represent a [[PDE/Target Definitions|PDE target definition]]. It is available since version 0.16.0 and requires the following minimum pom.xml

&lt;pre&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;some-group-id&lt;/groupId&gt;
  &lt;artifactId&gt;target-definition-id&lt;/artifactId&gt;
  &lt;version&gt;target-definition-version&lt;/version&gt;
  &lt;packaging&gt;eclipse-target-definition&lt;/packaging&gt;

&lt;/project&gt;
&lt;/pre&gt;

It expects exactly one file &lt;tt&gt;&amp;lt;artifactId&amp;gt;.target&lt;/tt&gt; in the project's base directory.
To use a target definition in your build, configure the target platform:

&lt;pre&gt;
	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
				&lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
				&lt;version&gt;${tycho-version}&lt;/version&gt;
				&lt;configuration&gt;
					&lt;target&gt;
						&lt;artifact&gt;
							&lt;groupId&gt;some-group-id&lt;/groupId&gt;
							&lt;artifactId&gt;target-definition-id&lt;/artifactId&gt;
							&lt;version&gt;target-definition-version&lt;/version&gt;
						&lt;/artifact&gt;
					&lt;/target&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/pre&gt;

If you get the error '''Unable to locate the equinox launcher feature (aka delta-pack)''' then configure it as follows
&lt;pre&gt;
  &lt;plugin&gt;
    &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
    &lt;artifactId&gt;target-platform-configuration &lt;/artifactId&gt;
    &lt;version&gt;${tycho-version}&lt;/version&gt;
    &lt;configuration&gt;
      &lt;dependency-resolution&gt;
          &lt;extraRequirements&gt;
            &lt;requirement&gt;
                &lt;type&gt;eclipse-feature&lt;/type&gt;
                &lt;!-- see note below --&gt;
                &lt;id&gt;org.eclipse.equinox.executable&lt;/id&gt;
                &lt;versionRange&gt;3.6.0&lt;/versionRange&gt;
            &lt;/requirement&gt;
          &lt;/extraRequirements&gt;
      &lt;/dependency-resolution&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;
&lt;/pre&gt;

'''Note:''' the wiki was previously saying org.eclipse.equinox.executable.feature.group, however it seems that   with version 1.1.0, &quot;.feature.group&quot; is already appended to the id, thus making build fails with a ''You requested to install 'org.eclipse.equinox.executable.feature.group'''.feature.group''' 3.6.0' but it could not be found''.

== p2-installable-unit ==
This packaging type is used in Tycho to directly work with IUs. You would typically use this functionality in replacement of p2.inf to package any file, deliver configuration, or use advanced functionalities of p2. This packaging type is available since version 0.23.0 and requires the following minimum pom.xml. 

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;artifactId&gt;myIuId&lt;/artifactId&gt;
  &lt;packaging&gt;p2-installable-unit&lt;/packaging&gt;
  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
&lt;/project&gt;
&lt;/pre&gt;

An [[Tycho/p2iu.xml|p2iu.xml]] file is expected to be found as a sibling of the pom.xml.

[[Category:Tycho|Packaging Types]]</text>
      <sha1>b7ch46b3qlrqjbsjv8z06mpyyrg4ktv</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Reference Card</title>
    <ns>0</ns>
    <id>32435</id>
    <revision>
      <id>439875</id>
      <parentid>432797</parentid>
      <timestamp>2020-07-06T06:01:36Z</timestamp>
      <contributor>
        <username>Laeubi.laeubi-soft.de</username>
        <id>21454</id>
      </contributor>
      <comment>/* Target file providing the context of the build */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15403">This page provides snippets for using Tycho.  You may also wish to see:
* The [http://eclipse.org/tycho/ Tycho Project page]
* The [http://www.eclipse.org/tycho/sitedocs/ Tycho plugin documents] (generated by Maven)
* [http://stackoverflow.com/questions/tagged/tycho?sort=frequent&amp;pagesize=15 Frequently asked Tycho questions on stackoverflow.com]
* The old page with [[Tycho/FAQ|FAQs]]

== Enabling tycho ==
&lt;pre&gt;
   &lt;properties&gt;
      &lt;tycho-version&gt;1.2.0&lt;/tycho-version&gt;
   &lt;/properties&gt;

   &lt;build&gt;
      &lt;plugins&gt;
         &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
            &lt;artifactId&gt;tycho-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${tycho-version}&lt;/version&gt;
            &lt;extensions&gt;true&lt;/extensions&gt;
         &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/build&gt;
&lt;/pre&gt;
Note that this is usually defined in the parent POM under build / plugins. See [[Tycho/Release_Notes]] for available versions.

== Repository providing the context of the build ==

Specify a repository to get pre-built pieces from. Multiple repositories can be specified. See also target file section.
&lt;pre&gt;
   &lt;repository&gt;
      &lt;id&gt;eclipse-oxygen&lt;/id&gt;
      &lt;layout&gt;p2&lt;/layout&gt;
      &lt;url&gt;http://download.eclipse.org/releases/oxygen&lt;/url&gt;
   &lt;/repository&gt;
&lt;/pre&gt;

== Target file providing the context of the build ==

Use a target platform to get pre-build pieces from. The target platform file can be edited using Eclipse PDE editor.
&lt;pre&gt;
          &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
            &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
            &lt;version&gt;${tycho-version}&lt;/version&gt;
            &lt;configuration&gt;
              &lt;target&gt;
                &lt;artifact&gt;
                  &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
                  &lt;artifactId&gt;${project.artifactId}&lt;/artifactId&gt;
                  &lt;version&gt;${project.version}&lt;/version&gt;
                  &lt;classifier&gt;TargetFileNameWithoutExtension&lt;/classifier&gt;
                &lt;/artifact&gt;
              &lt;/target&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
&lt;/pre&gt;

== Including (or excluding) source bundles from the target file ==

Tycho can take the 'includeSource' attribute into account, i.e. search for source bundles which match the included bundles this is useful if you like to build source-features (see below).
This feature disabled by default until Tycho 1.7 but will become to default to the target configuration in 2.0. If you want to change this behavior, adjust the following build configuration:
&lt;pre&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
   &lt;version&gt;${tycho-version}&lt;/version&gt;
   &lt;configuration&gt;
      &lt;targetDefinitionIncludeSource&gt;honor&lt;/targetDefinitionIncludeSource&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/pre&gt;
The following values are valid:
* ignore (never include source bundles)
* honor (include source bundles if enabled in the target)
* force (always include source bundles)

== Target runtime environment ==

Specify which environments your software should be built for (os/ws/arch). This will determine the set of platform dependent fragments to be included in the project's dependencies. If you omit this the build will say
  No explicit target runtime environment configuration. Build is platform dependent

Target runtime environments are specified like this:
&lt;pre&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
        &lt;version&gt;${tycho-version}&lt;/version&gt;
        &lt;configuration&gt;
          &lt;environments&gt;
            &lt;environment&gt;
              &lt;os&gt;win32&lt;/os&gt;
              &lt;ws&gt;win32&lt;/ws&gt;
              &lt;arch&gt;x86_64&lt;/arch&gt;
            &lt;/environment&gt;
            &lt;environment&gt;
              &lt;os&gt;linux&lt;/os&gt;
              &lt;ws&gt;gtk&lt;/ws&gt;
              &lt;arch&gt;x86_64&lt;/arch&gt;
            &lt;/environment&gt;
            &lt;environment&gt;
              &lt;os&gt;macosx&lt;/os&gt;
              &lt;ws&gt;cocoa&lt;/ws&gt;
              &lt;arch&gt;x86_64&lt;/arch&gt;
            &lt;/environment&gt;
          &lt;/environments&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
&lt;/pre&gt;

It ''seems'' this specification accepts all os/ws/arch values exactly as they are understood by OSGi.

Source: http://dev.eclipse.org/mhonarc/lists/tycho-user/msg00908.html

== Bundle, Fragments ==

&lt;pre&gt;
  &lt;groupId&gt;Some-Group-Id&lt;/groupId&gt;
  &lt;artifactId&gt;Bundle-SymbolicName&lt;/artifactId&gt;
  &lt;version&gt;Bundle-Version&lt;/version&gt;
  &lt;packaging&gt;eclipse-plugin&lt;/packaging&gt;
&lt;/pre&gt;

== Features ==

&lt;pre&gt;
  &lt;groupId&gt;Some-Group-Id&lt;/groupId&gt;
  &lt;artifactId&gt;FeatureId&lt;/artifactId&gt;
  &lt;version&gt;FeatureVersion&lt;/version&gt;
  &lt;packaging&gt;eclipse-feature&lt;/packaging&gt;
&lt;/pre&gt;

== p2 repositories ==

&lt;pre&gt;
  &lt;groupId&gt;Some-Group-Id&lt;/groupId&gt;
  &lt;artifactId&gt;RepositoryName&lt;/artifactId&gt;
  &lt;version&gt;Version&lt;/version&gt;
  &lt;packaging&gt;eclipse-repository&lt;/packaging&gt;
&lt;/pre&gt;

== Products ==

&lt;pre&gt;
  &lt;groupId&gt;Some-Group-Id&lt;/groupId&gt;
  &lt;artifactId&gt;RepositoryName&lt;/artifactId&gt;
  &lt;version&gt;Version&lt;/version&gt;
  &lt;packaging&gt;eclipse-repository&lt;/packaging&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-p2-director-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho-version}&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;materialize-products&lt;/id&gt;
            &lt;goals&gt;
              &lt;goal&gt;materialize-products&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
          &lt;execution&gt;
            &lt;id&gt;archive-products&lt;/id&gt;
              &lt;goals&gt;
                &lt;goal&gt;archive-products&lt;/goal&gt;
              &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/pre&gt;

== Update Site ==
 {{caution | Deprecated [http://software.2206966.n2.nabble.com/Steps-before-deprecating-eclipse-update-site-td6274042.html] | Use [[Tycho/Reference_Card#p2_repositories | eclipse-repository]] instead. To migrate:
# Change packaging to ''eclipse-repository''
# Rename site.xml to ''category.xml''}}
&lt;pre&gt;
  &lt;groupId&gt;Some-Group-Id&lt;/groupId&gt;
  &lt;artifactId&gt;UpdateSiteName&lt;/artifactId&gt;
  &lt;version&gt;Version&lt;/version&gt;
  &lt;packaging&gt;eclipse-update-site&lt;/packaging&gt;
&lt;/pre&gt;

== Test bundles ==

&lt;pre&gt;
  &lt;groupId&gt;Some-Group-Id&lt;/groupId&gt;
  &lt;artifactId&gt;Bundle-SymbolicName&lt;/artifactId&gt;
  &lt;version&gt;Bundle-Version&lt;/version&gt;
  &lt;packaging&gt;eclipse-test-plugin&lt;/packaging&gt;
&lt;/pre&gt;

=== Setting up the tests to run ===

&lt;pre&gt;
  &lt;plugin&gt;
    &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
    &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
    &lt;version&gt;${tycho-version}&lt;/version&gt;
    &lt;configuration&gt;
      &lt;testSuite&gt;Bundle-SymbolicName-of-bundleContaining-Tests&lt;/testSuite&gt;
      &lt;testClass&gt;FullyQualifiedNameOfTheTestClass&lt;/testClass&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;
&lt;/pre&gt;

==== Setting VM args ====

In the configuration section for the test plug-in
&lt;pre&gt;
           &lt;argLine&gt;-Xmx512m&lt;/argLine&gt;
&lt;/pre&gt;

==== Setting application arguments ====

In the configuration section for the test plug-in
&lt;pre&gt;
           &lt;appArgLine&gt;-nl en&lt;/appArgLine&gt;
&lt;/pre&gt;

==== Running an application or a product ====
&lt;pre&gt;
           &lt;application&gt;EclipseApplicationID&lt;/application&gt;
&lt;/pre&gt;
&lt;pre&gt;
           &lt;product&gt;EclipseProductID&lt;/product&gt;
&lt;/pre&gt;

==== Bundle start level ====
&lt;pre&gt;
           &lt;bundleStartLevel&gt;
              &lt;bundle&gt;
                 &lt;id&gt;Bundle-SymbolicName&lt;/id&gt;
                 &lt;level&gt;1&lt;/level&gt;
                 &lt;autoStart&gt;true&lt;/autoStart&gt;
              &lt;/bundle&gt;
           &lt;/bundleStartLevel&gt;
&lt;/pre&gt;

==== Selecting JDK ====

Since version 0.13 tycho-surefire-plugin can use [http://maven.apache.org/guides/mini/guide-using-toolchains.html Maven Toolchains] to run tests with a specific version of JDK independent from the one Maven is running with.

&lt;pre&gt;
  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-toolchains-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;executions&gt;
      &lt;execution&gt;
        &lt;phase&gt;validate&lt;/phase&gt;
        &lt;goals&gt;
          &lt;goal&gt;toolchain&lt;/goal&gt;
        &lt;/goals&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;configuration&gt;
      &lt;toolchains&gt;
        &lt;jdk&gt;
          &lt;version&gt;1.5&lt;/version&gt;
          &lt;vendor&gt;sun&lt;/vendor&gt;
        &lt;/jdk&gt;
      &lt;/toolchains&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;
&lt;/pre&gt;

== Source Bundles ==

To generate source bundles, you need to execute goal &quot;plugin-source&quot; of plugin tycho-source-plugin:

&lt;pre&gt;
  &lt;build&gt;
    &lt;plugins&gt;   
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-source-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho-version}&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;plugin-source&lt;/id&gt;
            &lt;goals&gt;
              &lt;goal&gt;plugin-source&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/pre&gt;

For convenience, you can do this only once in your parent POM. A source bundle (with &quot;.source&quot; appended to the Bundle-SymbolicName) will be generated for each module inheriting from this parent which has packaging type eclipse-plugin or eclipse-test-plugin.

You can then reference source bundles as normal bundles in other MANIFEST.MF or feature.xml by referencing with their Bundle-Name: &lt;bundle.name&gt;.source.

== Source Features ==

If you have configured source bundle generation (see above), you can also generate source features by using the following configuration snippet within the feature lifecycle (as part of the feature project configuration or inheriting from parents):

&lt;pre&gt;
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
      &lt;artifactId&gt;tycho-source-feature-plugin&lt;/artifactId&gt;
      &lt;version&gt;${tycho-extras-version}&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;source-feature&lt;/id&gt;
          &lt;phase&gt;package&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;source-feature&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
      &lt;artifactId&gt;tycho-p2-plugin&lt;/artifactId&gt;
      &lt;version&gt;${tycho-version}&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;attach-p2-metadata&lt;/id&gt;
          &lt;phase&gt;package&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;p2-metadata&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
&lt;/pre&gt;

The generated source feature will have the feature id &lt;tt&gt;&amp;lt;featureId&amp;gt;.source&lt;/tt&gt;. 
Feature label (with a configurable suffix), description, branding plugin and other attributes are taken over from the original feature by default.
If required, you can override individual source feature values by adding a &lt;tt&gt;sourceTemplateFeature/feature.properties&lt;/tt&gt; file.
See [https://bugs.eclipse.org/bugs/show_bug.cgi?id=398250 bug 398250] on why the p2-metadata goal is required for now.

== Generating POM files ==

If you have an existing build which you want to migrate to tycho, you can generate templates of the required pom.xml files using

&lt;tt&gt;mvn org.eclipse.tycho:tycho-pomgenerator-plugin:generate-poms -DgroupId=&lt;MY.GROUPID&gt;&lt;/tt&gt;

This will scan the filesystem starting from the current directory for bundles (i.e. MANIFEST.MF files) and features (feature.xml files) and generate the corresponding pom.xml files. It assumes test bundles have a suffix &quot;.tests&quot;. You can change this default by specifying &lt;tt&gt;-DtestSuffix=.mytestBundleSuffix&lt;/tt&gt;

Note that the generated  pom.xml files are intended to give you a quickstart template only. You will most probably have to refine the generated files e.g. fill in repositories in the generated parent pom from which to resolve depndencies.

== Putting it all together ==

=== Exemplary parent POM ===
&lt;pre&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;groupId&gt;org.eclipse&lt;/groupId&gt;
	&lt;artifactId&gt;org.eclipse.equinox.p2-parent&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;packaging&gt;pom&lt;/packaging&gt;

	&lt;properties&gt;
		&lt;tycho-version&gt;1.2.0&lt;/tycho-version&gt;
	&lt;/properties&gt;
	&lt;repositories&gt;
		&lt;repository&gt;
			&lt;id&gt;helios&lt;/id&gt;
			&lt;layout&gt;p2&lt;/layout&gt;
			&lt;url&gt;http://download.eclipse.org/releases/helios&lt;/url&gt;
		&lt;/repository&gt;
		&lt;repository&gt;
			&lt;id&gt;galileoTest&lt;/id&gt;
			&lt;layout&gt;p2&lt;/layout&gt;
			&lt;url&gt;http://download.eclipse.org/eclipse/updates/3.6-JUnit-Tests/&lt;/url&gt;
		&lt;/repository&gt;
	&lt;/repositories&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
				&lt;artifactId&gt;tycho-maven-plugin&lt;/artifactId&gt;
				&lt;version&gt;${tycho-version}&lt;/version&gt;
				&lt;extensions&gt;true&lt;/extensions&gt;
			&lt;/plugin&gt;

			&lt;plugin&gt;
				&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
				&lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
				&lt;version&gt;${tycho-version}&lt;/version&gt;
				&lt;configuration&gt;
					&lt;environments&gt;
						&lt;environment&gt;
							&lt;os&gt;linux&lt;/os&gt;
							&lt;ws&gt;gtk&lt;/ws&gt;
							&lt;arch&gt;x86&lt;/arch&gt;
						&lt;/environment&gt;
						&lt;environment&gt;
							&lt;os&gt;linux&lt;/os&gt;
							&lt;ws&gt;gtk&lt;/ws&gt;
							&lt;arch&gt;x86_64&lt;/arch&gt;
						&lt;/environment&gt;
						&lt;environment&gt;
							&lt;os&gt;win32&lt;/os&gt;
							&lt;ws&gt;win32&lt;/ws&gt;
							&lt;arch&gt;x86_64&lt;/arch&gt;
						&lt;/environment&gt;
						&lt;environment&gt;
							&lt;os&gt;macosx&lt;/os&gt;
							&lt;ws&gt;cocoa&lt;/ws&gt;
							&lt;arch&gt;x86_64&lt;/arch&gt;
						&lt;/environment&gt;
					&lt;/environments&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;
&lt;/pre&gt;

=== Exemplary bundle/fragment POM ===

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;
	xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;parent&gt;
		&lt;artifactId&gt;org.eclipse.equinox.p2-parent&lt;/artifactId&gt;
		&lt;groupId&gt;org.eclipse&lt;/groupId&gt;
		&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
		&lt;relativePath&gt;../org.eclipse.equinox.p2-parent&lt;/relativePath&gt;
	&lt;/parent&gt;
	&lt;groupId&gt;org.eclipse&lt;/groupId&gt;
	&lt;artifactId&gt;org.eclipse.equinox.p2.director&lt;/artifactId&gt;
	&lt;version&gt;2.0.0.qualifier&lt;/version&gt;
	&lt;packaging&gt;eclipse-plugin&lt;/packaging&gt;
&lt;/project&gt;
&lt;/pre&gt;

=== Exemplary Test bundle POM ===

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;
	xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;parent&gt;
		&lt;artifactId&gt;org.eclipse.equinox.p2-parent&lt;/artifactId&gt;
		&lt;groupId&gt;org.eclipse&lt;/groupId&gt;
		&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
		&lt;relativePath&gt;../org.eclipse.equinox.p2-parent&lt;/relativePath&gt;
	&lt;/parent&gt;
	&lt;groupId&gt;org.eclipse&lt;/groupId&gt;
	&lt;artifactId&gt;org.eclipse.equinox.p2.tests&lt;/artifactId&gt;
	&lt;version&gt;1.2.0.qualifier&lt;/version&gt;
	&lt;packaging&gt;eclipse-test-plugin&lt;/packaging&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
				&lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
				&lt;configuration&gt;
					&lt;testSuite&gt;org.eclipse.equinox.p2.tests&lt;/testSuite&gt;
					&lt;testClass&gt;org.eclipse.equinox.p2.tests.AutomatedTests&lt;/testClass&gt;
					&lt;argLine&gt;-Xmx512m&lt;/argLine&gt;
					&lt;appArgLine&gt;-nl en&lt;/appArgLine&gt;
					&lt;bundleStartLevel&gt;
						&lt;bundle&gt;
							&lt;id&gt;org.eclipse.equinox.ds&lt;/id&gt;
							&lt;level&gt;1&lt;/level&gt;
							&lt;autoStart&gt;true&lt;/autoStart&gt;
						&lt;/bundle&gt;
					&lt;/bundleStartLevel&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;
&lt;/pre&gt;

[[Category:Tycho|Reference Card]]</text>
      <sha1>ifatyc2f5jycqie4obj2u162ejyjp5p</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes</title>
    <ns>0</ns>
    <id>32542</id>
    <revision>
      <id>444011</id>
      <parentid>442886</parentid>
      <timestamp>2021-09-23T23:02:01Z</timestamp>
      <contributor>
        <username>Jonah.kichwacoders.com</username>
        <id>16462</id>
      </contributor>
      <comment>Make the newer release notes easier to find.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1682">==== [https://projects.eclipse.org/projects/technology.tycho List of releases] ====
* Starting for 2.4, Release notes are stored in https://github.com/eclipse/tycho/blob/master/RELEASE_NOTES.md
* [[Tycho/Release Notes/2.3|2.3.0]] (2021-03-31)
* [[Tycho/Release Notes/2.2|2.2.0]] (2021-01-18)
* [[Tycho/Release Notes/2.1|2.1.0]] (2020-10-28)
* [[Tycho/Release Notes/2.0|2.0.0]] (2020-08-19)
* [[Tycho/Release Notes/1.7.0|1.7.0]] (2020-04-21)
* [[Tycho/Release Notes/1.6|1.6.0]] (2020-01-20)
* [[Tycho/Release Notes/1.5|1.5.0]] (2019-10-21)
* [[Tycho/Release Notes/1.4|1.4.0]] (2019-04-05)
* [[Tycho/Release Notes/1.3|1.3.0]] (2018-12-09)
* [[Tycho/Release Notes/1.2|1.2.0]] (2018-06-20)
* [[Tycho/Release Notes/1.1|1.1.0]] (2018-02-02)
* [[Tycho/Release Notes/1.0.0|1.0.0]] (2017-02-13)
* [[Tycho/Release Notes/0.26|0.26.0]] (2016-08-19)
* [[Tycho/Release Notes/0.25|0.25.0]] (2016-04-15)
* [[Tycho/Release Notes/0.24|0.24.0]] (2015-10-30)
* [[Tycho/Release Notes/0.23|0.23.0 and 0.23.1]] (2015-07-10, 2015-07-17)
* [[Tycho/Release Notes/0.22|0.22.0]] (2014-11-24)
* [[Tycho/Release Notes/0.21|0.21.0]] (2014-07-23)
* [[Tycho/Release Notes/0.20|0.20.0]] (2014-03-14)
* [[Tycho/Release Notes/0.19|0.19.0]] (2013-10-28)
* [[Tycho/Release Notes/0.18|0.18.0]] (2013-05-29)
* [[Tycho/Release Notes/0.17|0.17.0]] (2013-03-22)
* [[Tycho/Release Notes/0.16|0.16.0]] (2012-10-19)
* [[Tycho/Release Notes/0.15|0.15.0]] (2012-06-01)
* [[Tycho/Release Notes/0.14|0.14.x]] (2012-02-14, 2012-02-28)
* [[Tycho/Release Notes/0.13|0.13.0]] (2011-09-22)
* [[Tycho/Release Notes/0.12|0.12.0]] (2011-05-02)
* [[Tycho/Release Notes/0.11|0.11.x]] (2011-04-07, 2011-04-22)

[[Category:Tycho|Release Notes]]</text>
      <sha1>qg8r306ps8crq4396eg6yhjj7lqa0vm</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.11</title>
    <ns>0</ns>
    <id>31428</id>
    <revision>
      <id>370479</id>
      <parentid>313541</parentid>
      <timestamp>2014-09-18T08:40:28Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1446">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;&amp;lt; Previous Version | [[Tycho/Release Notes/0.12|Next Version &amp;gt;]]&lt;/div&gt;

The Tycho 0.11.0 milestone release mainly includes fixes for a long list of [https://issues.sonatype.org/secure/ReleaseNote.jspa?version=10874&amp;projectId=10030 bugs]. 

Additionally, the implementation of eclipse-repository was improved significantly: Instead of just copying artifacts and calling the features and bundles publisher (like in eclipse-repository 0.10, and all versions of eclipse-update-site), the existing p2 metadata of the artifacts is [https://issues.sonatype.org/browse/TYCHO-513 reused]. With the &quot;native&quot; p2 data flow implemented in Tycho, two new features could also be added:
* [http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.pde.doc.user/tasks/pde_rootfiles.htm Root files] can be included with features (see documentation [https://docs.sonatype.org/display/TYCHO/PackagingTypes#PackagingTypes-eclipsefeature here])
* eclipse-repository can build self-contained p2 repositories (see documentation [http://wiki.eclipse.org/Tycho/Packaging_Types#eclipse-repository here])

Tycho 0.11.1 fixes one additional [https://bugs.eclipse.org/bugs/show_bug.cgi?id=342637 bug].

[[Category:Tycho|Release Notes/0.11]]</text>
      <sha1>736er9ham6yf7u4yevm39pwolvc4ktb</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.12</title>
    <ns>0</ns>
    <id>31286</id>
    <revision>
      <id>370478</id>
      <parentid>313540</parentid>
      <timestamp>2014-09-18T08:38:26Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2644">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.11|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.13|Next Version &amp;gt;]]&lt;/div&gt;

Tycho 0.12.0 is the first (milestone) release under the &lt;tt&gt;org.eclipse.tycho&lt;/tt&gt; namespace. It is functionally equivalent to the 0.11.1 release, which means that you should get identical results before and after a successful migration from 0.11.1 to 0.12.0.

== Migration guide ==

To migrate to this version, you need to do the following changes in your projects' POM files:

# Change the groupId of all Tycho plugins from &lt;tt&gt;org.sonatype.tycho&lt;/tt&gt; to the new groupId &lt;tt&gt;org.eclipse.tycho&lt;/tt&gt;
# Change the version of all Tycho plugins to &lt;tt&gt;0.12.0&lt;/tt&gt;. (It is recommended to use a property for the Tycho version; see for example [[Tycho/Reference_Card]] )
# In case you have configured one following Tycho plugins explicitly, you need to replace the artifactId

&lt;pre&gt;
maven-osgi-test-plugin        =&gt;   tycho-surefire-plugin
maven-osgi-source-plugin      =&gt;   tycho-source-plugin
maven-osgi-compiler-plugin    =&gt;   tycho-compiler-plugin
maven-osgi-packaging-plugin   =&gt;   tycho-packaging-plugin
maven-tycho-plugin            =&gt;   tycho-pomgenerator-plugin
&lt;/pre&gt;

=== FAQ: I have a project with hundreds of plugins, can't I automate this ? ===

Yes, you can - https://gist.github.com/984585 contains a script that JBoss Tools team used to do their migration. No Warranty :)

=== FAQ: My tests fail after migrating to 0.12.0 ===

You need to double-check that you actually configure the right plugin: The artifactId of the 0.12.0 plugin for executing tests is '''tycho-surefire-plugin''' and not tycho-test-plugin. 

Background: With the configuration below, you only tell Maven to use the given configuration ''when'' the plugin is executed, you don't tell it ''that'' it should be executed. (The tycho-surefire-plugin is executed in all eclipse-test-plugin projects because it is part of the default lifecycle of that packaging type.) Therefore, configuring a tycho-test-plugin has no effect. Unfortunately, Maven doesn't detect configuration of non-existing plugins. 
&lt;pre&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
   &lt;version&gt;${tycho-version}&lt;/version&gt;
   &lt;configuration&gt;
      &lt;!-- Example: configuration for UI tests --&gt;
      &lt;useUIHarness&gt;true&lt;/useUIHarness&gt; 
   &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/pre&gt;

[[Category:Tycho|Release Notes/0.12]]</text>
      <sha1>kl7iwebm1oxm5o2h0o41dsadhctbatg</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.13</title>
    <ns>0</ns>
    <id>32541</id>
    <revision>
      <id>370477</id>
      <parentid>313539</parentid>
      <timestamp>2014-09-18T08:37:42Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3979">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.12|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.14|Next Version &amp;gt;]]&lt;/div&gt;

The most visible change in Tycho 0.13.0 is the reworked [[Tycho/Glossary#Target_Platform|target platform]] concept:
* For p2 repositories specified in the POM as repositories with &lt;tt&gt;layout=p2&lt;/tt&gt;, the entire content of the p2 repository is added to the target platform. (This is effectively the same behaviour as before, but the concept of an &quot;implicit target platform&quot; no longer exists.)
* For target definition files, only the resolved content of the target definition is added to the target platform (see the &quot;Content&quot; tab of the corresponding editor in Eclipse). This may lead to dependency resolution problems during the migration, but these problems can be solved by adding the missing features or bundles in your target definition file.

In the Tycho implementation, the new behaviour is achieved through a separation of target platform computation and dependency resolution. This allows for strict control over the target platform, when a target definition file with &lt;tt&gt;includeMode=&quot;planner&quot;&lt;/tt&gt; is used (see also below).

Additionally, Tycho 0.13.0 fixes a long list of bugs: [https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.13.0&amp;order=bug_id&amp;query_based_on= List of bug fixes and enhancements in 0.13.0]

== New and Noteworthy ==

* Tycho:
** Tycho projects are now required to match the artifactId defined in the pom.xml with the ID specified in the MANIFEST.MF or feature.xml.
*** This restriction is in place for projects with packaging type &quot;eclipse-plugin&quot;, &quot;eclipse-test-plugin&quot; or &quot;eclipse-feature&quot;. It solves several problems which may occur otherwise (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=353384]).
*** In case your project provides a bundle and a feature with the same ID, and you need to keep these IDs for compatibility reasons, you can use different groupIds in order to make the Maven coordinates (groupId, artifactId, version) unique.
** [[Tycho/Reference_Card#Target_platform_providing_the_context_of_the_build|Configuring a target definition file in Tycho]] specifies the target platform in the same way as in Eclipse: 
*** Only the content from the target definition can be referenced. This allows excluding optional depencencies from product builds [https://bugs.eclipse.org/bugs/show_bug.cgi?id=342808].
*** The &quot;Include required software&quot; option (aka planner/slicer mode) is now supported.
*** Limitation: the location types &quot;Directory&quot;, &quot;Installation&quot; and &quot;Features&quot; are still not supported.
** The OSGi runtimes for tests no longer contains the full target platform but only the (transitive) dependencies of the test bundle. This may lead to test failures due to missing implicit dependencies. Recommendation: Make the dependencies explicit in the component feature and [[Tycho/Packaging Types#eclipse-test-plugin|add it to the test runtime]].
** Optional dependencies declared by your bundles are no longer installed automatically when a user installs your bundle with p2. Consider creating additional features for including optional dependencies (see [[Equinox/p2/Publisher#BundlesAction|Equinox p2 Publisher]]).
** tycho-surefire-plugin can use Maven Toolchains to run tests with a specific version of JDK independent from the one Maven is running with (see [[Tycho/Reference_Card#Selecting JDK|Tycho Reference Card]]).

* Tycho extras:
** The new goal &lt;tt&gt;mirror&lt;/tt&gt; has been added to the &lt;tt&gt;tycho-p2-extras-plugin&lt;/tt&gt;. It offers the same functionality as the &lt;tt&gt;p2.mirror&lt;/tt&gt; Ant task &amp;ndash; see [[Tycho/Additional Tools]] for the full documentation.

[[Category:Tycho|Release Notes/0.13]]</text>
      <sha1>rkg1v31g4hl34iydgfz8ee8v9f8awjl</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.14</title>
    <ns>0</ns>
    <id>33790</id>
    <revision>
      <id>370476</id>
      <parentid>313538</parentid>
      <timestamp>2014-09-18T08:36:59Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5584">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.13|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.15|Next Version &amp;gt;]]&lt;/div&gt;

[https://bugs.eclipse.org/bugs/buglist.cgi?resolution=FIXED;classification=Technology;query_format=advanced;target_milestone=0.14.0;target_milestone=0.14.1;product=Tycho List of bug fixes and enhancements in 0.14.x] 

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.14.1&amp;order=bug_id&amp;query_based_on= List of bug fixes in 0.14.1] 

== New and Noteworthy  ==

=== New Features ===

* Support for [https://bugs.eclipse.org/bugs/show_bug.cgi?id=368985 license features] has been added 
* Support for [https://bugs.eclipse.org/bugs/show_bug.cgi?id=345234#c24 generation of source features] has been added
* Full support for bundle runtime execution environments 
** List of accessible system packages of bundle runtime execution environment is now respected during project dependency resolution and java compilation. This makes sure that bundles do not accidentally reference JRE classes that may not be available in all runtime environments supported by the bundles. 
** If bundle project supports multiple runtime execution environments, Tycho will use the list of packages from the most restricted environment by default. Build target execution environment can be specified explicitly using new &amp;lt;executionEnvironment&amp;gt; target platform configuration parameter. For backwards compatibility with PDE, jre.compilation.profile build.properties property is supported too. 
** Additionally, tycho-compiler-plugin can be configured to use different JDK libraries for different bundle runtime execution environment. Additional JDKs are configured using Maven [http://maven.apache.org/guides/mini/guide-using-toolchains.html toolchains.xml], where toolchain id element is matched to execution environment profile name. For example
&lt;pre&gt; &amp;lt;toolchains&amp;gt;
  &amp;lt;toolchain&amp;gt;
     &amp;lt;type&amp;gt;jdk&amp;lt;/type&amp;gt;
     &amp;lt;provides&amp;gt;
         &amp;lt;id&amp;gt;J2SE-1.5&amp;lt;/id&amp;gt;
     &amp;lt;/provides&amp;gt;
     &amp;lt;configuration&amp;gt;
        &amp;lt;jdkHome&amp;gt;/path/to/jdk/1.5&amp;lt;/jdkHome&amp;gt;
     &amp;lt;/configuration&amp;gt;
  &amp;lt;/toolchain&amp;gt;
 &amp;lt;/toolchains&amp;gt;
&lt;/pre&gt; 
* [[Tycho/Target_Platform#Filtering|Filters on the target platform]] allow for Maven-style dependency management: You can now easily restrict the versions of individual bundles in your target platform or even pick one specific provider for an exported package. Additionally, you can completely exclude all versions of a bundle from the target platform and in that way, for example, prevent the installation of optional dependencies in a product.
* New [http://www.eclipse.org/tycho/sitedocs/tycho-release/tycho-versions-plugin/update-pom-mojo.html tycho-versions-plugin:update-pom goal] can be used to update versions in pom.xml files.
* Last but not least, we finally got around to generate and publish the [http://www.eclipse.org/tycho/sitedocs/index.html maven plugin docs] for Tycho. Clearly there is still a lot of work to do here but it's a start.

=== Improvements and Fixes ===
* A serious [https://bugs.eclipse.org/bugs/show_bug.cgi?id=371680 regression introduced with tycho 0.14.0] (incomplete p2 metadata) has been fixed with tycho 0.14.1
* Optional bundle dependencies are fully supported during compilation now. By default, Tycho treats optional dependencies as required, if this is not what you want, the following configuration can be used to make Tycho ignore optional dependencies
&lt;pre&gt;
  &lt;plugin&gt;
    &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
    &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
    &lt;version&gt;${tychoVersion}&lt;/version&gt;
    &lt;configuration&gt;
      &lt;dependency-resolution&gt;
        &lt;optionalDependencies&gt;ignore&lt;/optionalDependencies&gt;
      &lt;/dependency-resolution&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;
&lt;/pre&gt;
* Tycho index files in the local maven repository and tycho in general should now be multi-process safe -- at least this is what our [https://hudson.eclipse.org/hudson/job/tycho-its-linux-nightly/lastSuccessfulBuild/testReport/ concurrent integration test suite] is telling us.&lt;br&gt; No more [https://bugs.eclipse.org/bugs/show_bug.cgi?id=347963 cryptic error messages] when two concurrent build jobs modify the same local repository index file. Note that maven 3.0.x local repo access is still [http://jira.codehaus.org/browse/MNG-2802 not multi-process safe]. 
* In maven offline mode, tycho should now be [https://bugs.eclipse.org/bugs/show_bug.cgi?id=357357 really offline] 
* tycho-surefire-plugin was ported from surefire 2.4.3 to 2.10 and now respects the surefire [https://bugs.eclipse.org/bugs/show_bug.cgi?id=364552 -DskipTests] switch 
* [https://bugs.eclipse.org/bugs/show_bug.cgi?id=368079 .tar.gz has been added as a product archive format] which can be built with packaging type eclipse-repository 
* p2.inf is fully supported for all Tycho project types now.
* More configuration options to control dependency resolution (TODO document me).
* Missing entries in build.properties for bin.includes and src.includes will now fail the build by default. You can change these from error to [http://www.eclipse.org/tycho/sitedocs/tycho-packaging-plugin/package-plugin-mojo.html#strictBinIncludes warning] for ease of migration

[[Category:Tycho|Release Notes/0.14]]</text>
      <sha1>9qfvnhh88inin2h4ngq5rmvofhtgn0n</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.15</title>
    <ns>0</ns>
    <id>35950</id>
    <revision>
      <id>370475</id>
      <parentid>313409</parentid>
      <timestamp>2014-09-18T08:36:25Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2799">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.14|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.16|Next Version &amp;gt;]]&lt;/div&gt;

This page lists the features and bug fixes available in the 0.15.0 milestone release. 

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.15.0&amp;order=bug_id&amp;query_based_on= List of bug fixes and enhancements in 0.15.0] 

== New and Noteworthy  ==

=== New Features ===

* Standard maven property &lt;tt&gt;${project.build.sourceEncoding}&lt;/tt&gt; is now taken into account by the tycho-compiler-plugin
* Annotation processors can now be used with the JDT compiler when used with maven-compiler-plugin (see [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/diff/tycho-its/projects/TYCHO590annotationProcessing/annotated-project/pom.xml?id=8597822cca31717dd2b173695c4922a0435ae469 integration test ] )
* The repository archive name generated by packaging type eclipse-repository is now configurable via standard maven property &lt;tt&gt;${project.build.finalName}&lt;/tt&gt; &lt;br&gt;Note that the default archive name changed from &lt;tt&gt;${project.artifactId}.zip&lt;/tt&gt; to &lt;tt&gt;${project.artifactId}-${project.version}.zip&lt;/tt&gt; to be more compliant with maven conventions
* For plugin and feature projects, a missing &lt;tt&gt;build.properties&lt;/tt&gt; file or a missing &lt;tt&gt;bin.includes&lt;/tt&gt; entry in &lt;tt&gt;build.properties&lt;/tt&gt; will now fail the build by default as this would create an empty bundle/feature jar (warning only if [http://www.eclipse.org/tycho/sitedocs/tycho-packaging-plugin/package-plugin-mojo.html#strictBinIncludes strictBinIncludes=false])

=== Improvements and Fixes ===

* .target file resolution results are now cached which can speed up the total build time by more than 50%, especially for large multi-module builds with many &lt;tt&gt;locations&lt;/tt&gt; in the .target file
* During source bundle generation, MANIFEST headers &lt;tt&gt;Bundle-Name&lt;/tt&gt; and &lt;tt&gt;Bundle-Vendor&lt;/tt&gt; are now taken over from the original bundle (with &lt;tt&gt;&quot; Source&quot;&lt;/tt&gt; appended to the &lt;tt&gt;Bundle-Name&lt;/tt&gt;)
* The versions of JDT/APT , equinox and p2 used by tycho have been updated to Juno M7
* &lt;tt&gt;tycho-surefire-plugin&lt;/tt&gt; will now fail on exceptions in the tycho testing harness even if &lt;tt&gt;${maven.test.failure.ignore} = true&lt;/tt&gt;
* The packaging type &lt;tt&gt;eclipse-application&lt;/tt&gt; has been deprecated for a while now. To make this clear(er), a [[Tycho Messages Explained#Eclipse_Application|deprecation warning]] is printed when using packaging type &lt;tt&gt;eclipse-application&lt;/tt&gt;


[[Category:Tycho|Release Notes/0.15]]</text>
      <sha1>6eytu2s7sib5lgf9rwof7zhyzul6kgt</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.16</title>
    <ns>0</ns>
    <id>37464</id>
    <revision>
      <id>370474</id>
      <parentid>333403</parentid>
      <timestamp>2014-09-18T08:35:20Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7008">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.15|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.17|Next Version &amp;gt;]]&lt;/div&gt;

== New and Noteworthy  ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.16.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 0.16.0] 

==== Compiler ====

* &lt;tt&gt;tycho-compiler-plugin&lt;/tt&gt; now has a boolean option &lt;tt&gt;[http://www.eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html#requireJREPackageImports requireJREPackageImports]&lt;/tt&gt; which will fail the build if set to &lt;tt&gt;true&lt;/tt&gt; and non-java.* packages provided by the JDK are not explicitly imported. &lt;br/&gt; This is the design-time equivalent of setting equinox runtime option &lt;tt&gt;[[Equinox Boot Delegation|osgi.compatibility.bootdelegation=false]]&lt;/tt&gt;.

==== Target Platform &amp; Dependency Resolution ====

&lt;ul&gt;
&lt;li&gt;There is a new packaging type [[Tycho/Packaging Types#eclipse-target-definition|&lt;tt&gt;eclipse-target-definition&lt;/tt&gt;]] for adding a PDE target definition file (&lt;tt&gt;*.target&lt;/tt&gt;) to the build. In order to use the target file as [[Tycho/Target Platform|target platform]], add a reference to it in the [[Tycho/Target Platform#Target files|target platform configuration]].
&lt;/li&gt;
&lt;li&gt;The new property [[Tycho/Target Platform#Locally built artifacts|&lt;tt&gt;tycho.localArtifacts&lt;/tt&gt;]] allows to control whether artifacts installed in the local Maven repository by previous Tycho builds should be considered by the resolver or not. The property can be specified on the command line and in the settings.xml:
  &lt;ul&gt;
    &lt;li&gt;If unset (or set to &lt;tt&gt;default&lt;/tt&gt;), the behaviour is unchanged (local metadata is considered by the resolver, and there is a warning if locally built units were used)&lt;/li&gt;
    &lt;li&gt;If set to &lt;tt&gt;ignore&lt;/tt&gt;, locally built artifact are ignored&lt;/li&gt;
  &lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(INCOMPATIBLE CHANGE) The build now fails if one of the children of a composite p2 repository can't be loaded, e.g. because of a temporary network failure. Before, the build would have continued and may have passed, potentially producing a different build result.&lt;br/&gt;
  &lt;ul&gt;
    &lt;li&gt;Note that a composite p2 repository may still enforce the old behaviour by setting the repository property &lt;tt&gt;p2.atomic.composite.loading&lt;/tt&gt; to &lt;tt&gt;false&lt;/tt&gt;. Using these non-atomic composite p2 repositories in a production build is discouraged because they suffer from [https://bugs.eclipse.org/bugs/show_bug.cgi?id=356561 p2 bug 356561], which is threatening build reproducibility.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Providing [[Tycho/Target Platform/Authentication and Mirrors#Credentials|credentials for a p2 repository]] specified in a target file is now more convenient – the use of the non-standard &lt;tt&gt;id&lt;/tt&gt; attribute in target files is no longer necessary (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=377086 bug 377086]&lt;/strike&gt;).
&lt;/li&gt;
&lt;li&gt;Access to p2 repository can be [[Tycho/Target Platform/Authentication and Mirrors#Mirrors|redirected to a mirror location]]. This now works for both target files and repositories specified in the POM (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=356016 bug 356016]&lt;/strike&gt;).
&lt;/li&gt;
&lt;li&gt;There is now basic support for [[Tycho/Execution Environments|custom execution environment profiles]] (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=385930 bug 385930]&lt;/strike&gt;)
&lt;/li&gt;
&lt;li&gt;A new plugin to validate target platforms. This plugin takes as input one or several target platforms and ensures they can be resolved, fails otherwise
&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
   &lt;artifactId&gt;target-platform-validation-plugin&lt;/artifactId&gt;
   &lt;version&gt;${tychoExtrasVersion}&lt;/version&gt;
   &lt;executions&gt;
      &lt;execution&gt;
         &lt;phase&gt;validate&lt;/phase&gt;
         &lt;goals&gt;
            &lt;goal&gt;validate-target-platform&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
            &lt;targetFiles&gt;
               &lt;param&gt;indigo.target&lt;/param&gt;
               &lt;param&gt;juno.target&lt;/param&gt;
            &lt;/targetFiles&gt;
            &lt;failOnError&gt;true&lt;/failOnError&gt;
         &lt;/configuration&gt;
      &lt;/execution&gt;
   &lt;/executions&gt;
&lt;/plugin&gt;
&lt;/source&gt;
&lt;/li&gt;
&lt;/ul&gt;

==== Test Execution ====

&lt;ul&gt;
&lt;li&gt;Support for parallel test execution with JUnit &amp;gt;= 4.7 has been added.&lt;br&gt;If you use Junit &amp;gt;= 4.7, you can now have test classes or methods executed by several threads in parallel by adding &lt;tt&gt;-Dparallel=classes|methods|both&lt;/tt&gt; on the commandline or by configuring&lt;br&gt;
&lt;pre&gt;&amp;lt;plugin&amp;gt;
   &amp;lt;groupId&amp;gt;org.eclipse.tycho&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;tycho-surefire-plugin&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;${tycho-version}&amp;lt;/version&amp;gt;
   &amp;lt;configuration&amp;gt;
     &amp;lt;parallel&amp;gt;classes|methods|both&amp;lt;/parallel&amp;gt;
   &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/pre&gt;
Executing tests in parallel can be useful e.g. if you have long-running integration tests which are not CPU-bound. Under the hood, this feature was enabled by porting the junit4.7 surefire provider to Tycho.
&lt;/li&gt;
&lt;li&gt;Support for test frameworks is extensible now. This means you can add support for test frameworks other than JUnit if you provide an implementation of [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/tree/tycho-surefire/tycho-surefire-plugin/src/main/java/org/eclipse/tycho/surefire/provider/spi/TestFrameworkProvider.java TestFrameworkProvider].
&lt;/li&gt;
&lt;/ul&gt;

==== Packaging ====

* [[Tycho/Reproducible Version Qualifiers|Reproducible Version Qualifiers]]
* Support for generating [http://git.eclipse.org/c/tycho/org.eclipse.tycho.extras.git/commit/?id=526be434a79a430efba50d4f54eb91ddaa6cf766 Eclipse-SourceReferences] MANIFEST headers for [[EGit/New and Noteworthy/2.0#Support_for_Eclipse-SourceReferences_manifest_headers| git]] has been added. Other SCMs can be plugged in by implementing [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/tree/tycho-packaging-plugin/src/main/java/org/eclipse/tycho/packaging/sourceref/SourceReferencesProvider.java SourceReferencesProvider].
* The [http://www.eclipse.org/tycho/sitedocs/tycho-p2/tycho-p2-director-plugin/plugin-info.html tycho-p2-director-plugin] can now create product installations which have meta-requirements on the installer. This for example allows to execute custom touchpoint actions during the installation. See the [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/tree/tycho-its/projects/product.metaRequirements integration test] for an example.

==== Other ====

* If several tycho versions were inadvertently mixed within the same reactor, this could lead to cryptic errors like ClassCastExceptions. This situation is now detected early and the build will fail with a clear error message.

[[Category:Tycho|Release Notes/0.16]]</text>
      <sha1>5ftbes67ydyesmzt59ibvme8e1ai8cl</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.17</title>
    <ns>0</ns>
    <id>39192</id>
    <revision>
      <id>370473</id>
      <parentid>333397</parentid>
      <timestamp>2014-09-18T08:34:34Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5618">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.16|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.18|Next Version &amp;gt;]]&lt;/div&gt;

== New and Noteworthy  ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.17.0&amp;order=bug_id&amp;query_based_on= List of all bug fixes and enhancements in 0.17.0] 

==== Compiler Plugin ====

* (INCOMPATIBLE CHANGE) &lt;tt&gt;eclipse-plugin&lt;/tt&gt; and &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt; modules which neither have and explicit [http://www.eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html compiler source/target level] configuration nor have an [[Tycho/Execution Environments#Execution environment configuration|execution environment]] configuration are now compiled with a source &amp; target level of 1.6 instead of 1.5. Modules with any explicit configuration, e.g. a &lt;tt&gt;Bundle-RequiredExecutionEnvironment&lt;/tt&gt; header in the manifest, are not affected. If you are building for &lt;tt&gt;J2SE-1.5&lt;/tt&gt; or even more restricted execution environments, it is recommended to set the new &lt;tt&gt;target-platform-configuration&lt;/tt&gt; parameter [[Tycho/Execution Environments#Execution environment configuration|&lt;tt&gt;&amp;lt;executionEnvironmentDefault&amp;gt;&lt;/tt&gt;]] in your parent POM.
* The JDT compiler bundled with Tycho has been updated to Kepler M6.
* The &lt;tt&gt;tycho-compiler-plugin&lt;/tt&gt; has a new &lt;tt&gt;compilerArgs&lt;/tt&gt; parameter that allows to specify arbitrary compiler arguments (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=400307#c3 bug 400307]) 
* The compilation bootclasspath can now be customized in &lt;tt&gt;toolchains.xml&lt;/tt&gt; when using [http://eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html#useJDK &lt;tt&gt;useJDK=BREE&lt;/tt&gt;] ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=389856 bug 389856]).
* &lt;tt&gt;tycho-compiler-plugin&lt;/tt&gt;:
** low-level configuration errors will now fail the build ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=385613 bug 385613])
** annotation processor arguments (&lt;tt&gt;-Akey=value&lt;/tt&gt;) are now supported

==== Target Platform &amp; Dependency Resolution  ====

* It is now possible to specify [[Tycho/Target Platform#Target_files|multiple target files in &lt;tt&gt;target-platform-configuration&lt;/tt&gt;]]. Note that these target files are resolved separately, i.e. they each need to resolve successfully when opened with the target editor in Eclipse. Also note that it is not possible to activate multiple target files in the Eclipse PDE (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=392652 bug 392652]). 
* p2 repository and proxy authentication now works with maven-encrypted passwords ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=386910 bug 386910] and [https://bugs.eclipse.org/bugs/show_bug.cgi?id=394023 bug 394023])
* The Equinox and p2 versions bundled with Tycho has been updated to Kepler M6.
** This includes an update to a new major version (4.1.3) of the bundled Apache httpclient library.

==== Packaging ====

* Nested jars: add support for custom MANIFESTs ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=400901 bug 400901]) and distinct source folders in source bundles ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=400956 bug 400956])
* Root files: [http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Ftasks%2Fpde_rootfiles.htm root.permissions] now supports ant-style file wildcards ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=361204 bug 361204])

==== Test Execution ====

* Unit tests can now run on pre-filled workspace data ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=401288 bug 401288])

==== Source Features ====

* Source feature generation has been improved, [http://wiki.eclipse.org/Tycho/Reference_Card#Source_Features docs] updated accordingly: 
** (INCOMPATIBLE CHANGE) No longer rely on existence of magic folder &lt;tt&gt;sourceTemplateFeature/&lt;/tt&gt; when determining whether to generate a source feature 
** Label, description, branding plugin and other attributes are now taken over from the original feature by default. See bugs [https://bugs.eclipse.org/bugs/show_bug.cgi?id=374349#c44 374349], [https://bugs.eclipse.org/bugs/show_bug.cgi?id=375165 375165] and [https://bugs.eclipse.org/bugs/show_bug.cgi?id=378424 378424] for details. It's recommended to rely on &lt;tt&gt;feature.properties&lt;/tt&gt; to set name and other text values in the original feature; then you can easily customize/override the generated source feature values by creating a &lt;tt&gt;sourceTemplateFeature/feature.properties&lt;/tt&gt; file if required 

==== Other ====

* Documentation for the Maven plugins from [http://eclipse.org/tycho/sitedocs-extras/index.html &lt;tt&gt;tycho-extras&lt;/tt&gt;] published
* (INCOMPATIBLE CHANGE) Runtime of &lt;tt&gt;tycho-eclipserun-plugin&lt;/tt&gt; is now resolved from explicitly configured p2 repositorie(s) only (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=395281 bug 395281] for details and migration guide) 
* The &lt;tt&gt;mirror&lt;/tt&gt; goal of &lt;tt&gt;tycho-p2-extras-plugin&lt;/tt&gt; now allows to skip downloading pack200 artifacts and supports p2 query language. See [[Tycho/Additional Tools]] 
* &lt;tt&gt;tycho-versions-plugin&lt;/tt&gt; will now also update versions of &lt;tt&gt;.product&lt;/tt&gt; files in &lt;tt&gt;eclipse-repository&lt;/tt&gt; projects
* (INCOMPATIBLE CHANGE) remove duplicated compiler invocation for &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt; ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=383866 bug 383866])

[[Category:Tycho|Release Notes/0.17]]</text>
      <sha1>7ym4ejtrlv955bff11nry8lvactigqm</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.18</title>
    <ns>0</ns>
    <id>40586</id>
    <revision>
      <id>370472</id>
      <parentid>343961</parentid>
      <timestamp>2014-09-18T08:33:32Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3717">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.17|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.19| Next Version]] &amp;gt;&lt;/div&gt; 

= Milestone 0.18.1 =

== New and Noteworthy  ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.18.1&amp;order=bug_id&amp;query_based_on= List of bug fixes and enhancements in 0.18.1].&lt;br/&gt; 

* This patch release adds support for maven 3.1.0
* Bundles shipped with Tycho have been updated from Kepler pre-RC3 to Kepler final

= Milestone 0.18.0 =

== New and Noteworthy  ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.18.0&amp;order=bug_id&amp;query_based_on= List of bug fixes and enhancements in 0.18.0]. This is mostly a bug-fix release with changes needed by projects participating in the Eclipse Kepler release train.

==== Target Platform &amp;amp; Dependency Resolution  ====

* (INCOMPATIBLE CHANGE) The build now fails if a p2 repository is referenced that has installable units from an old-style update site. These so-called &quot;partial IUs&quot; cannot be used for dependency resolution and used to be silently dropped from the target platform. This often lead to strange resolution problems ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=380438 bug 380438], [http://stackoverflow.com/questions/12647177/tycho-cant-find-android-development-tools-bundles question on stackoverflow]). Now the build fails with a clear error message. (See the [[Tycho/Additional Tools#publish-features-and-bundles goal|Additional Tools]] page for an example of how to convert an old-style update site into a p2 repository.)
* Use a newer version of p2 (from between Kepler RC2 and Kepler RC3). In particular, this version includes the enhancements of [https://bugs.eclipse.org/bugs/show_bug.cgi?id=406960 bug 406960], [https://bugs.eclipse.org/bugs/show_bug.cgi?id=406942 bug 406942], [https://bugs.eclipse.org/bugs/show_bug.cgi?id=406902 bug 406902] and fixes for [https://bugs.eclipse.org/bugs/show_bug.cgi?id=409051 bug 409051], [https://bugs.eclipse.org/bugs/show_bug.cgi?id=408691 bug 408691].

==== Packaging  ====

* Added experimental support for [http://www.rapicorp.com/2012/05/eclipse-based-applications-as-standard.html bundled Mac OS X applications] ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=378021 bugs 378021], [https://bugs.eclipse.org/bugs/show_bug.cgi?id=407676 407676]). Note that you have to apply a [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/commit/?id=830cc79b806eead4fd70db304474bd4333a6a159 workaround] if you want to use this new p2 feature.
* Several source bundle/feature generation fixes/enhancements:
** &lt;tt&gt;bin.includes&lt;/tt&gt; from license features now taken over into generated source features ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=403950 bug 403950]) 
** Source feature branding bundle can now be configured ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=407706 Bug 407706]) 
** Source &lt;tt&gt;feature.xml&lt;/tt&gt; now has line-breaks, indentation and an XML declaration ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=408168 bug 408168]) 
** Allow to include non-root content in source bundle ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=407172 bug 407172])

==== Other  ====

* Stricter and OSGi-specific MANIFEST syntax validation yielding better error messages ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=383192 bug 383192])

[[Category:Tycho|Release Notes/0.18]]</text>
      <sha1>op1czrogg8phg2r75u1r8ez02xlrjku</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.19</title>
    <ns>0</ns>
    <id>41252</id>
    <revision>
      <id>370471</id>
      <parentid>350168</parentid>
      <timestamp>2014-09-18T08:31:49Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7019">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.18|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.20|Next Version &amp;gt;]]&lt;/div&gt; 

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.19.0&amp;order=bug_id&amp;query_based_on= Detailed list of bug fixes and enhancements in 0.19.0] 

== New and Noteworthy  ==

=== Target Platform &amp; Dependency Resolution ===

* (INCOMPATIBLE CHANGE) The syntax for specifying profile properties during dependency resolution was changed to the normal &lt;tt&gt;&amp;lt;key&amp;gt;value&amp;lt;/key&amp;gt;&lt;/tt&gt; syntax. See [https://bugs.eclipse.org/bugs/show_bug.cgi?id=412283 bug 412283] for an example.
* (INCOMPATIBLE CHANGE) &lt;tt&gt;system&lt;/tt&gt;-scoped pom dependencies will now be ignored if used with &lt;tt&gt;pomDependencies=consider&lt;/tt&gt; ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=415774 bug 415774]). &lt;br/&gt;This corner case was supported only half-way anyway. If you absolutely have to use local-only jars with &lt;tt&gt;pomDependencies=consider&lt;/tt&gt;, use e.g. [http://maven.apache.org/plugins/maven-install-plugin/ mvn install:install-file] instead which will allow to reference them as normal (compile-scoped) pom dependencies without a hardcoded filesystem path.
* &lt;tt&gt;Bundle-ClassPath: external:...&lt;/tt&gt; MANIFEST entries in referenced bundles no longer fail the build, but will be ignored with a warning now ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=370958 bug 370958])
* The logging of download problems for artifacts from p2 repositories has been significantly improved.

=== Test Execution ===

&lt;p&gt;&lt;ul&gt;
&lt;li&gt; Add experimental support for test runtime provisioned by p2.&lt;br/&gt; This can be used for integration test scenarios which require a fully provisioned application (including root files, start levels, etc.), same as it would be delivered to customers. 
&lt;br/&gt;Example: To install product under test with ID &quot;example.product.id&quot;, test bundle and tycho surefire test harness bundles using the p2 director, use the following pom.xml snippet in the test module:
&lt;pre&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
   &lt;version&gt;${tycho-version}&lt;/version&gt;
   &lt;configuration&gt;
      &lt;testRuntime&gt;p2Installed&lt;/testRuntime&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
   &lt;version&gt;${tycho-version}&lt;/version&gt;
   &lt;configuration&gt;
      &lt;dependency-resolution&gt;
         &lt;extraRequirements&gt;
            &lt;!-- add dependency  to product IU under test --&gt;
            &lt;requirement&gt;
               &lt;type&gt;p2-installable-unit&lt;/type&gt;
               &lt;id&gt;example.product.id&lt;/id&gt;
               &lt;versionRange&gt;0.0.0&lt;/versionRange&gt;
            &lt;/requirement&gt;
         &lt;/extraRequirements&gt;
      &lt;/dependency-resolution&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/pre&gt;

Note that &lt;tt&gt;testRuntime=p2Installed&lt;/tt&gt; currently only works when testing products.
You can also run tests on existing product archives built elsewhere. To do this, just make sure to extract the product archive into &lt;tt&gt;target/work&lt;/tt&gt; before the tests are run(i.e. in a [http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference phase] prior to &lt;tt&gt;integration-test&lt;/tt&gt;).
See [http://eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#testRuntime site docs] for details.
&lt;/li&gt;
&lt;li&gt; Add suppport for [http://eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#runOrder runOrder] parameter in tycho-surefire-plugin to run tests in random order ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=409923 bug 409923])&lt;/li&gt;
&lt;li&gt;To avoid OSGi framework restarts caused by stale bundle cache entries (e.g. if maven &lt;tt&gt;clean&lt;/tt&gt; phase is omitted), the OSGi test runtime is now launched with &lt;tt&gt;-Dosgi.clean=true&lt;/tt&gt; by default ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=415489 bug 415489])&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

=== Packaging ===

* (INCOMPATIBLE CHANGE) files included in a bundle via [http://eclipse.org/tycho/sitedocs/tycho-packaging-plugin/package-plugin-mojo.html#additionalFileSets additionalFileSets] now take precedence over &lt;tt&gt;bin.includes&lt;/tt&gt; if conflicting ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=419849 bug 419849])

=== Other ===

&lt;p&gt;&lt;ul&gt;
&lt;li&gt; &lt;tt&gt;tycho-version-plugin:set-version&lt;/tt&gt; now also updates versions of exported packages, when the packages have the same version as the bundle version without qualifier.&lt;/li&gt;
&lt;li&gt; [[Tycho/Reproducible Version Qualifiers|Reproducible version qualifiers based on git commit timestamps]] ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=402949 bug 402949])
* (INCOMPATIBLE CHANGE) By default, any uncommitted local changes will now fail the build to ensure reproducibility.
* Configuration option &lt;tt&gt;jgit.dirtyWorkingTree&lt;/tt&gt; allows to control behaviour in case of uncommitted changes detected for a module:
** &lt;tt&gt;error&lt;/tt&gt; (default): fail the build if &lt;tt&gt;git status&lt;/tt&gt; is not clean. This is useful for production builds to make sure the commit timestamp build qualifier used is really reproducible
** &lt;tt&gt;warning&lt;/tt&gt;: warn about any uncommitted changes and use the current build timestamp as build qualifier for the &quot;dirty&quot; module. This is useful for local builds with uncommitted changes.
** &lt;tt&gt;ignore&lt;/tt&gt;: do not check whether &lt;tt&gt;git status&lt;/tt&gt; is clean and use the timestamp of the last git commit as build qualifier regardless of uncommitted changes done on top. This can be used in case jgit should report a false positive dirty working tree or in case you want to restore pre-0.19.0 behaviour.

Sample configuration:

&lt;pre&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;tycho-packaging-plugin&lt;/artifactId&gt;
   &lt;version&gt;${tycho.version}&lt;/version&gt;
   &lt;dependencies&gt;
      &lt;dependency&gt;
         &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
         &lt;artifactId&gt;tycho-buildtimestamp-jgit&lt;/artifactId&gt;
         &lt;version&gt;${tycho-extras.version}&lt;/version&gt;
      &lt;/dependency&gt;
   &lt;/dependencies&gt;
   &lt;configuration&gt;
      &lt;timestampProvider&gt;jgit&lt;/timestampProvider&gt;
      &lt;jgit.dirtyWorkingTree&gt;warning&lt;/jgit.dirtyWorkingTree&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Port tycho's JDT compiler to maven-compiler-plugin 3.x ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=405385 bug 405385])&lt;/li&gt;
* (INCOMPATIBLE CHANGE) [[Tycho/FAQ#Can_I_use_the_Tycho_compiler_support_in_non-OSGi_projects.2C_too.3F| plugging Tycho's JDT compiler into maven-compiler-plugin]] 2.x is no longer supported due to incompatible plexus compiler API changes
&lt;/li&gt;
&lt;li&gt;The versions of JDT, p2 and Equinox used by Tycho have been updated to Kepler SR1 ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=418998 bug 418998])&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

[[Category:Tycho|Release Notes/0.19]]</text>
      <sha1>18qlguc10a810ajx2hoax8oy7xpjska</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.20</title>
    <ns>0</ns>
    <id>43011</id>
    <revision>
      <id>370470</id>
      <parentid>359864</parentid>
      <timestamp>2014-09-18T08:30:47Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3239">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.19|&amp;lt; Previous Version]] |  [[Tycho/Release Notes/0.21|Next Version &amp;gt;]]&lt;/div&gt; 

Tycho 0.20.0 adds support for building product distributions which have features installed at root level, so that they can be updated independently of the product. This was a highly wanted feature - with 18 votes at the time this was implemented. To install a feature at root level, just mark it with &lt;tt&gt;installMode=&quot;root&quot;&lt;/tt&gt; in the product file (see [[Tycho/eclipse-repository]] for details).

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.20.0&amp;order=bug_id&amp;query_based_on= List of bug fixes and enhancements in 0.20.0]  

=== Packaging ===

* Product files can now specify that a feature shall be installed at root level in the installation ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=361722 bug 361722]). These features can be updated (or even uninstalled) independently from the product. See [[Tycho/eclipse-repository]] for details on the syntax.
* The [http://eclipse.org/tycho/sitedocs-extras/tycho-pack200/tycho-pack200a-plugin/normalize-mojo.html tycho-pack200a:normalize] goal now has a &lt;tt&gt;skip&lt;/tt&gt; flag to allow skipping normalization when skipping signing ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=421301 bug 421301])

=== Test Execution ===

* Rely on the 'abstract' modifier to identify abstract test classes rather than using a naming convention.This means that test classes named &lt;tt&gt;**/Abstract*Test.class&lt;/tt&gt; or &lt;tt&gt;**/Abstract*TestCase.class&lt;/tt&gt; are no longer generally excluded from the test execution, but only if they are marked as 'abstract' (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=389509 bug 389509]).
* More reliably terminate forked test processes ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=427556 bug 427556]). Before being fixed, this bug could have caused orphaned test execution JVM processes to live on forever, consuming resources and accumulating system load.

=== Additional Tools ===

* A new [http://eclipse.org/tycho/sitedocs-extras/tycho-document-bundle-plugin/plugin-info.html Tycho Document Bundle Plugin] has been contributed ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=425021 bug 425021]). It can be used to generate javadoc and the corresponding toc.xml files for the Eclipse help system. See the [http://git.eclipse.org/c/tycho/org.eclipse.tycho.extras.git/tree/tycho-document-bundle-plugin/src/it/test1/docbundle1 example project]
* The [http://eclipse.org/tycho/sitedocs-extras/tycho-p2-extras-plugin/mirror-mojo.html tycho-p2-extras:mirror] goal now allows to specify the target repository &lt;tt&gt;name&lt;/tt&gt; ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=358748 bug 358748])

=== Other ===

* Added documentation for the [http://www.eclipse.org/tycho/sitedocs/tycho-release/tycho-versions-plugin/set-version-mojo.html tycho-versions-plugin:set-versions] goal.


[[Category:Tycho|Release Notes/0.20]]</text>
      <sha1>emxvv8jzm25blrizvcoix5p14a7jv3g</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.21</title>
    <ns>0</ns>
    <id>44022</id>
    <revision>
      <id>370469</id>
      <parentid>368974</parentid>
      <timestamp>2014-09-18T08:29:47Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>adapt version navigation to new theme</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3055">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.20|&amp;lt; Previous Version]] |  [[Tycho/Release Notes/0.22|Next Version &amp;gt;]]&lt;/div&gt; 

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.21.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 0.21.0]

=== Compiler ===

* The embedded JDT compiler has been updated to the Luna version which supports Java 8 ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=430986 bug 430986])

=== Packaging ===

* If you use Java 7 or higher, symbolic links in product tar archives are now preserved as links in the archive instead of being inlined ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=429809 bug 429809])&lt;br/&gt;This is particularly useful for MacOS distributions which create a symbolic link to the launcher binary &lt;tt&gt;Eclipse.app/Contents/MacOS/eclipse&lt;/tt&gt;. Also, it may now be interesting to [http://help.eclipse.org/kepler/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Ftasks%2Fpde_rootfiles.htm create symbolic links via root files].
* Add support for 256x256 BMPs used for product icons on Windows ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=433971 bug 433971])

=== Test Execution ===

* A regression in Tycho 0.20.0 has been fixed: Environment variables were not inherited to forked test processes ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=431793 bug 431793])
* (INCOMPATIBLE CHANGE) In case you have used test-runtime only &lt;tt&gt;dependencies&lt;/tt&gt; in the &lt;tt&gt;tycho-surefire-plugin&lt;/tt&gt; configuration, you may need to replace them with &lt;tt&gt;target-platform-configuration/dependency-resolution/extraRequirements&lt;/tt&gt; instead. See [https://bugs.eclipse.org/bugs/show_bug.cgi?id=436617#c11 bug 436617 comment 11] for details.

=== Other ===

* The embedded OSGi runtime used by Tycho during build has been updated to use Equinox and p2 from the Eclipse Luna release ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=429442 bug 429442]). The new Equinox version requires Java 6, so JAVA_HOME now needs to point to Java 6 or later for a Maven/Tycho build.
* The [https://www.eclipse.org/tycho/sitedocs-extras/target-platform-validation-plugin/validate-target-platform-mojo.html target-platform-validation-plugin] can now check if a target file contains all transitive dependencies of its content ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=434238 bug 434238]). This may be useful for target files using &lt;tt&gt;includeMode=&quot;slicer&quot;&lt;/tt&gt; because it can detect if there may be dependency resolution problems when using the target file in a Tycho build.
* The [https://www.eclipse.org/tycho/sitedocs/BuildProperties.html reference documentation] has been updated to provide a list of supported PDE &lt;tt&gt;build.properties&lt;/tt&gt; keys

[[Category:Tycho|Release Notes/0.21]]</text>
      <sha1>7jzukifrpbecyw4j89o6592qp8fnp4k</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.22</title>
    <ns>0</ns>
    <id>45128</id>
    <revision>
      <id>374413</id>
      <parentid>374404</parentid>
      <timestamp>2014-12-01T09:59:06Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6191">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.21|&amp;lt; Previous Version]] |  [[Tycho/Release Notes/0.23|Next Version &amp;gt;]]&lt;/div&gt; 

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.22.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 0.22.0]

=== Compiler ===

&lt;ul&gt;
&lt;li&gt;You can now reuse project JDT compiler preferences &lt;tt&gt;.settings/org.eclipse.jdt.core.prefs&lt;/tt&gt; by globally configuring
&lt;pre&gt;
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
  &lt;artifactId&gt;tycho-compiler-plugin&lt;/artifactId&gt;
  &lt;version&gt;${tycho-version}&lt;/version&gt;
  &lt;configuration&gt;
    &lt;useProjectSettings&gt;true&lt;/useProjectSettings&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/pre&gt;
e.g. in your parent pom. This will warn but not fail if the preference file is not present. ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=404633 &lt;strike&gt;bug 404633&lt;/strike&gt;])
&lt;/li&gt;
&lt;/ul&gt;

=== Target Platform &amp; Dependency Resolution ===

&lt;ul&gt;
&lt;li&gt;(INCOMPATIBLE CHANGE) In case you specify multiple execution environment profiles in the &lt;tt&gt;Bundle-RequiredExecutionEnvironment&lt;/tt&gt; manifest header, the profile used for the build may have changed. Tycho no longer attempts to find the &quot;minimal&quot; profile from the ones specified, but now uses the one specified first ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=435313 &lt;strike&gt;bug 435313&lt;/strike&gt;]). See [[Tycho/Execution_Environments|Execution Environments]] for details on the execution environment configuration and effects in the build.
&lt;li&gt;Tycho now supports building bundles for the execution environments &lt;tt&gt;JavaSE/compact1-1.8&lt;/tt&gt;, &lt;tt&gt;JavaSE/compact2-1.8&lt;/tt&gt;, and &lt;tt&gt;JavaSE/compact3-1.8&lt;/tt&gt;.
&lt;li&gt;Tycho can now be configured to ignore the configured execution environment of the current bundle when resolving its dependencies  ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=435068 &lt;strike&gt;bug 435068&lt;/strike&gt;]) . If you set the &lt;tt&gt;target-platform-configuration&lt;/tt&gt; option &lt;tt&gt;resolveWithExecutionEnvironmentConstraints&lt;/tt&gt; to &lt;tt&gt;false&lt;/tt&gt;, Tycho will use a combination of all known execution environments (providing the superset of all system packages) to resolve the bundle's dependencies.
&lt;li&gt;Tycho can now take the &lt;tt&gt;includeSource&lt;/tt&gt; attribute in target definitions into account. This needs to be enabled through a &lt;tt&gt;target-platform-configuration&lt;/tt&gt; option:
&lt;pre&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
   &lt;version&gt;${tycho-version}&lt;/version&gt;
   &lt;configuration&gt;
      &lt;target&gt;
         &lt;artifact&gt;
            ...
         &lt;/artifact&gt;
      &lt;/target&gt;
      &lt;targetDefinitionIncludeSource&gt;honor&lt;/targetDefinitionIncludeSource&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/pre&gt;
Note that this new option is of limited use for including sources into a p2 repository:
* If you want to include source bundles from the (external) target platform, you typically would add a complete source or SDK feature from the target platform. &lt;tt&gt;includeSource&lt;/tt&gt; does not automatically include source features, so you would need to explicitly specify them in the target file anyway.
* If you only want to include source bundles for bundles from your reactor, you don't need this option.

The only case in which the new option may make sense if you are building a feature with source feature which directly includes a bundle from the (external) target platform.
&lt;/li&gt;
&lt;li&gt;In case of p2 dependency resolution errors, Tycho will no longer clutter the console output with exception stacktraces ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=441538 &lt;strike&gt;bug 441538&lt;/strike&gt;])&lt;/li&gt;
&lt;/ul&gt;

=== Packaging ===

* Resources copying and filtering:
** you can now include additonal resources such as &lt;tt&gt;index.html&lt;/tt&gt; or &lt;tt&gt;about.html&lt;/tt&gt; in p2 repositories ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=424691 &lt;strike&gt;bug 424691&lt;/strike&gt;]). Just add files to &lt;tt&gt;src/main/resources&lt;/tt&gt; in  &lt;tt&gt;eclipse-repository&lt;/tt&gt; modules
** you can now use [http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html maven resource filtering] for eclipse-plugin resources in src/main/resources. For details on how to use it, see ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=383872#c9 bug 383872 comment 9])  and [https://www.eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html#copyResources site docs]
** maven property expressions (like &lt;tt&gt;${project.version}&lt;/tt&gt;) can now be used in [https://www.eclipse.org/tycho/sitedocs/BuildProperties.html &lt;tt&gt;build.properties&lt;/tt&gt;] values ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=442922 &lt;strike&gt;bug 442922 &lt;/strike&gt;])

=== Test Execution ===

* Tycho Surefire was updated to use Maven Surefire version 2.17. This enabled us to consume the fix for long-standing [https://bugs.eclipse.org/bugs/show_bug.cgi?id=369266 &lt;strike&gt;bug 369266&lt;/strike&gt;]
* Tycho Surefire can now be configured to use the JDK specified in the test bundle's Bundle-RequiredExecutionEnvironment to execute tests (as opposed to the currently running JDK) ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=407500 &lt;strike&gt;bug 407500&lt;/strike&gt;]). See the [https://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#useJDK site docs] for details.

=== Other ===

* In addition to the previously existing properties &lt;tt&gt;unqualifiedVersion&lt;/tt&gt; and &lt;tt&gt;buildQualifier&lt;/tt&gt;, a new property &lt;tt&gt;qualifiedVersion&lt;/tt&gt; was introduced. It contains the concatenation of the first two properties, but without trailing dot in case the &lt;tt&gt;buildQualifier&lt;/tt&gt; is an empty string. ([https://www.eclipse.org/tycho/sitedocs/tycho-packaging-plugin/build-qualifier-mojo.html Documentation]).
* The embedded OSGi runtime used by Tycho during build has been updated to use Equinox and p2 from the Mars M3 milestone ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=444112 &lt;strike&gt;bug 444112&lt;/strike&gt;])

[[Category:Tycho|Release Notes/0.22]]</text>
      <sha1>ezkvrzmnkbq28dfg678t19yrjuot36c</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.23</title>
    <ns>0</ns>
    <id>46160</id>
    <revision>
      <id>388883</id>
      <parentid>388882</parentid>
      <timestamp>2015-07-17T07:12:32Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <minor/>
      <comment>/* New and Noteworthy */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6897">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.22|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.24|Next Version &amp;gt;]]&lt;/div&gt; 

= Milestone 0.23.1 =

== New and Noteworthy  ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=0.23.1&amp;order=bug_id&amp;query_based_on= List of bug fixes and enhancements in 0.23.1].&lt;br/&gt; 

* This patch release fixes memory consumption &lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=470074 bug 470074]&lt;/strike&gt;
* JDT/APT, Equinox and p2 bundles shipped with Tycho have been updated from Mars RC2a to Mars final (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=469090 bug 469090]&lt;/strike&gt;). &lt;p&gt;In particular this means we consume [https://bugs.eclipse.org/bugs/buglist.cgi?classification=Eclipse&amp;component=APT&amp;component=Core&amp;list_id=12191370&amp;product=JDT&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=4.5%20RC3&amp;target_milestone=4.5%20RC4 some JDT fixes from Mars RC3 and RC4]

= Milestone 0.23.0 =

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.23.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 0.23.0]

=== Compiler ===

* The JDT compiler shipped with Tycho has been updated to Mars RC2a (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=461101 bug 461101]&lt;/strike&gt;).
* The default source/target level (i.e. no BREE in MANIFEST.MF nor source/target configured in pom.xml) has been updated to 1.7 (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=464304 bug 464304]&lt;/strike&gt;)

=== Packaging Type ===

* A new packaging type called &lt;tt&gt;p2-installable-unit&lt;/tt&gt; has been added to give more flexibility to users creating custom IUs. See [[Tycho/Packaging_Types#p2-installable-unit]] for details(&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=428310 bug 428310]&lt;/strike&gt;).

=== Packaging ===

* You can now use &lt;tt&gt;&amp;lt;iu&amp;gt;&lt;/tt&gt; elements in an eclipse-repository's category.xml to include and/or categorize arbitrary artifacts in a p2 repository ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=371983 &lt;strike&gt;bug 371983&lt;/strike&gt;]). See [[Tycho/category.xml]] for details.
* By default, Tycho will no longer add META-INF/maven/ descriptors in feature jars. With feature jars always being unpacked during installation, these can lead to path length problems on Windows (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=451279 bug 451279]&lt;/strike&gt;)

=== p2 ===

* The embedded p2 version has been updated to Mars RC2a. Noteworthy p2 changes:
** &lt;font color=&quot;red&quot;&gt;(INCOMPATIBLE CHANGE)&lt;/font&gt; Due to a change in p2 publishers, MacOS products can no longer be built using p2 repositories older than eclipse Mars. Make sure you use Mars and configure a product installation root folder ending with &quot;.app&quot; (see [http://git.eclipse.org/c/tycho/org.eclipse.tycho-demo.git/tree/itp04-rcp/eclipse-repository/pom.xml Tycho demo project]. If you build a MacOS product and can't update to Mars (yet), you will probably have to skip this Tycho release. We intend to add a compatibility workaround in the next release of Tycho ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=463670 bug 463670])
** Support for xz-compressed p2 metadata files (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=464614 bug 464614]&lt;/strike&gt;)
** Tycho will now set a specific HTTP User-Agent header including the Tycho version used when accessing p2 repositories (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=467418 bug 467418]&lt;/strike&gt;). This can be used to analyze HTTP access logs of the servers delivering the p2 artifacts.

=== Test Execution ===

* (INCOMPATIBLE CHANGE) The tycho-surefire property &lt;tt&gt;testSuite&lt;/tt&gt; had been removed. If you are building a multi-bundle project and had set the &lt;tt&gt;testSuite&lt;/tt&gt; and &lt;tt&gt;testClass&lt;/tt&gt; property on the CLI or in a parent pom, you have to set the property &lt;tt&gt;failIfNoTests&lt;/tt&gt; to &lt;tt&gt;false&lt;/tt&gt;. If you had specified &lt;tt&gt;testSuite&lt;/tt&gt; and &lt;tt&gt;testClass&lt;/tt&gt; in the pom file of the plugin the &lt;tt&gt;testsClass&lt;/tt&gt; belongs to, you just have to remove the &lt;tt&gt;testSuite&lt;/tt&gt; property ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=453526 &lt;strike&gt;bug 453526&lt;/strike&gt;]).

=== Other ===

* Tycho now requires Java 7 (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=463433 bug 463433]&lt;/strike&gt;). Note that this does not affect the compiler source/target level configured in your build and you can still compile against any JDK using maven toolchains.
* The embedded OSGi runtime used by Tycho during build has been updated to use Equinox from Mars RC2a (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=461101 bug 461101]&lt;/strike&gt;).
* The validation of the version qualifier in the pom is more strict. The build fails with an appropriate error message if the OSGi qualifier &quot;qualifier&quot; is used instead of &quot;SNAPSHOT&quot; (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=464887 bug 464887]&lt;/strike&gt;) and after applying the format (&lt;tt&gt;&amp;lt;format&amp;gt;&lt;/tt&gt; property) respectively the forced qualifier value (&lt;tt&gt;&amp;lt;forcedQualifier&amp;gt;&lt;/tt&gt; property) there is a check if it is a valid OSGi qualifier (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=464649 bug 464649]&lt;/strike&gt;).

=== Additional Tools ===

&lt;ul&gt;
&lt;li&gt; The [https://hudson.eclipse.org/tycho/view/CI/job/tycho.extras-sitedocs/ws/target/staging/tycho-document-bundle-plugin/plugin-info.html tycho-document-bundle-plugin] now allows to specify includes and excludes for the packages to be documented ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=459214 &lt;strike&gt;bug 459214&lt;/strike&gt;])
&lt;li&gt; It is now possible to use a custom doclet in the [https://hudson.eclipse.org/tycho/view/CI/job/tycho.extras-sitedocs/ws/target/staging/tycho-document-bundle-plugin/plugin-info.html tycho-document-bundle-plugin] ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=453602 &lt;strike&gt;bug 453602&lt;/strike&gt;]). The &lt;tt&gt;doclet&lt;/tt&gt; parameter will be passed to javadoc as &lt;tt&gt;-doclet&lt;/tt&gt;. The &lt;tt&gt;docletArtifacts&lt;/tt&gt; are resolved (including the transitive depenencies) and passed to javadoc as &lt;tt&gt;-docletpath&lt;/tt&gt;.
Example configuration:
&lt;pre&gt;
 &lt;configuration&gt;
    &lt;javadocOptions&gt;
       &lt;ignoreError&gt;false&lt;/ignoreError&gt;
       &lt;doclet&gt;foo.bar.MyDoclet&lt;/doclet&gt;
       &lt;docletArtifacts&gt;
          &lt;docletArtifact&gt;
             &lt;groupId&gt;foo.bar&lt;/groupId&gt;
             &lt;artifactId&gt;foo.bar.mydocletartifact&lt;/artifactId&gt;
             &lt;version&gt;1.0&lt;/version&gt;
          &lt;/docletArtifact&gt;
       &lt;/docletArtifacts&gt;
    &lt;/javadocOptions&gt;
 &lt;/configuration&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
[[Category:Tycho|Release Notes/0.23]]</text>
      <sha1>lwkfm6z9dh8imork7c3dq1ct4497oed</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.24</title>
    <ns>0</ns>
    <id>47992</id>
    <revision>
      <id>438202</id>
      <parentid>438201</parentid>
      <timestamp>2020-02-11T20:14:31Z</timestamp>
      <contributor>
        <username>Neerajbhusare.gmail.com</username>
        <id>4603</id>
      </contributor>
      <minor/>
      <comment>Some minor grammatical fixes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5206">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.23|&amp;lt; Previous Version]] | [[Tycho/Release Notes/0.25|Next Version &amp;gt;]]&lt;/div&gt; 

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.24.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 0.24.0]

=== POM-less Tycho builds ===

* A [http://takari.io/2015/03/19/core-extensions.html maven core build extension] has been added to support (almost) pom-less builds of eclipse plugins and features (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=462531 bug 462531]&lt;/strike&gt;,&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=386114 bug 386114]&lt;/strike&gt;). This avoids duplication of version and artifactId metadata in &lt;tt&gt;MANIFEST.MF/feature.xml&lt;/tt&gt; and &lt;tt&gt;pom.xml&lt;/tt&gt;. This feature requires  [http://maven.apache.org/download.cgi maven 3.3 or later] &lt;br/&gt; To enable it,

** Add a &lt;tt&gt;.mvn/extensions.xml&lt;/tt&gt; descriptor to the root of your build:
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;extensions&gt;
  &lt;extension&gt;
    &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
    &lt;artifactId&gt;tycho-pomless&lt;/artifactId&gt;
    &lt;version&gt;0.24.0&lt;/version&gt;
  &lt;/extension&gt;
&lt;/extensions&gt;
&lt;/pre&gt;
** The parent pom for features and plugins must reside in the parent directory
** features and plugins do not require &lt;tt&gt;pom.xml&lt;/tt&gt; anymore. If no &lt;tt&gt;pom.xml&lt;/tt&gt; is provided, the maven project model is derived as follows:
*** &lt;tt&gt;groupId&lt;/tt&gt;: inherited from parent
*** &lt;tt&gt;arifactId&lt;/tt&gt;: Bundle-SymbolicName from &lt;tt&gt;META-INF/MANIFEST.MF&lt;/tt&gt; or feature id from &lt;tt&gt;feature.xml&lt;/tt&gt;
*** &lt;tt&gt;version&lt;/tt&gt;: &lt;tt&gt;Bundle-Version&lt;/tt&gt; from &lt;tt&gt;META-INF/MANIFEST.MF&lt;/tt&gt; or feature version from &lt;tt&gt;feature.xml&lt;/tt&gt; (with &lt;tt&gt;.qualifier&lt;/tt&gt; suffix replaced by &lt;tt&gt;-SNAPSHOT&lt;/tt&gt;)
*** &lt;tt&gt;packaging&lt;/tt&gt;:
**** &lt;tt&gt;eclipse-plugin&lt;/tt&gt; if &lt;tt&gt;META-INF/MANIFEST.MF&lt;/tt&gt; found
**** &lt;tt&gt;eclipse-feature&lt;/tt&gt; if &lt;tt&gt;feature.xml&lt;/tt&gt; found
**** &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt; if &lt;tt&gt;Bundle-SymbolicName&lt;/tt&gt; ending with &lt;tt&gt;.tests&lt;/tt&gt; found in &lt;tt&gt;META-INF/MANIFEST.MF&lt;/tt&gt; 
** At minimum a parent (and aggregator) pom is still required which configures Tycho, the modules to build, the p2 repositories used etc. as this cannot be derived from &lt;tt&gt;feature.xml&lt;/tt&gt; or &lt;tt&gt;MANIFEST.MF&lt;/tt&gt;
** you can still use &lt;tt&gt;pom.xml&lt;/tt&gt; for plugins and features in case you want to configure more than the above defaults
** See the [https://git.eclipse.org/c/tycho/org.eclipse.tycho.extras.git/tree/tycho-extras/tycho-extras-its/src/test/resources/testpomless sample build] used by the integration tests
** Note that if you are using &lt;tt&gt;tycho-versions-plugin&lt;/tt&gt; for consistently changing versions in &lt;tt&gt;MANIFEST.MF/feature.xml&lt;/tt&gt; and &lt;tt&gt;pom.xml&lt;/tt&gt;, support for pom-less builds is still missing for this plugin ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=472579 bug 472579])

=== p2 ===

* The build will now fail with a clear error message when trying to build a MacOS product with native launchers against Luna or earlier (as opposed to of silently producing a broken product installation) ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=463670 &lt;strike&gt;bug 463670&lt;/strike&gt;]). Also, the bundled &quot;.app&quot; filesystem layout for MacOSX product installs is now automatically enabled since it is the only layout that works. No need to configure an installation root folder ending with &quot;.app&quot; for MacOSX anymore ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=461606 &lt;strike&gt;bug 461606&lt;/strike&gt;]). 
* The version of p2 bundled with Tycho has been updated to Mars.1 ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=480216 &lt;strike&gt;bug 480216&lt;/strike&gt;])


=== compare-version-with-baselines mojo ===

&lt;tt&gt;org.eclipse.tycho.extras:tycho-p2-extras-plugin&lt;/tt&gt; plugin features a new &lt;tt&gt;compare-version-with-baselines&lt;/tt&gt; mojo that allows verifying the version of the just-build artifacts doesn't break some basic rules of OSGi versioning. It will make the build of your artifact fail if:
* artifact has a lower version than what exists in baseline
* artifact has the same major.minor.micro version than what exists in baseline
* artifact has the same fully qualified (major.minor.micro.qualifier version) than what exists in the baseline, but with different binary content.

This is used in order to guarantee necessary version bumps have been applied, and this is compliant with the [[../../Reproducible Version Qualifiers]] strategy.

See [http://git.eclipse.org/c/tycho/org.eclipse.tycho.extras.git/tree/tycho-p2-extras-plugin/src/it/baseline/pom.xml#n33 IT tests] for an example of usage.

=== Other ===

* The versions of Equinox and JDT compiler bundled with Tycho have been updated to Mars.1 ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=480216 &lt;strike&gt;bug 480216&lt;/strike&gt;])
* JGit was updated to version 4.0.1 ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=472455 &lt;strike&gt;bug 472455&lt;/strike&gt;])
[[Category:Tycho|Release Notes/0.24]]</text>
      <sha1>iqn4s2nrl1sz9sy9koafcnn3g0hgwzj</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.25</title>
    <ns>0</ns>
    <id>49375</id>
    <revision>
      <id>414380</id>
      <parentid>404083</parentid>
      <timestamp>2017-02-17T18:48:29Z</timestamp>
      <contributor>
        <username>Elharo.ibiblio.org</username>
        <id>19880</id>
      </contributor>
      <minor/>
      <comment>grammar</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3249">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.24|&amp;lt; Previous Version]] |  [[Tycho/Release Notes/0.26|Next Version &amp;gt;]]&lt;/div&gt; 

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.25.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 0.25.0]

=== p2 ===

* p2 repository index files are now [https://hudson.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/tycho-p2/tycho-p2-repository-plugin/assemble-repository-mojo.html#xzCompress xz-compressed by default] for better compression ratios (with jar/xml index files [https://hudson.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/tycho-p2/tycho-p2-repository-plugin/assemble-repository-mojo.html#keepNonXzIndexFiles kept by default] as a fallback for compatibility with pre-Mars p2 clients (&lt;strike&gt;[https://bugs.eclipse.org/471693 bug 471693]&lt;/strike&gt;)

=== Test Execution ===

* Support for JUnit categories has been added. (&lt;strike&gt;[https://bugs.eclipse.org/386964 bug 386964]&lt;/strike&gt;). You can now [https://hudson.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/tycho-surefire/tycho-surefire-plugin/test-mojo.html#groups include] and/or [https://hudson.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/tycho-surefire/tycho-surefire-plugin/test-mojo.html#excludedGroups exclude] tests annotated with &lt;tt&gt;@Category&lt;/tt&gt;.

=== Other ===

* The eclipse bundles used by Tycho internally (mostly p2) have been updated to Neon M6 (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=485427 bug 485427]&lt;/strike&gt;)
* As a consequence, &lt;b&gt;Tycho now requires Java 8 to run&lt;/b&gt;
** Note that you can still [https://eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html#useJDK build against] and [https://eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#useJDK run tests] with other JDKs with maven toolchains
* tycho-versions-plugin will now extend version ranges if the new version would be outside the range (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=477328 bug 477328]&lt;/strike&gt; and (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=478996 bug 478996]&lt;/strike&gt;)

=== Feature Version Qualifiers ===

When computing aggregated qualifiers for features, Tycho will now recognize timestamps in the following form anywhere within the qualifier of direct included features or bundles (&lt;strike&gt;[https://bugs.eclipse.org/482086 bug 482086]&lt;/strike&gt;):
* &lt;code&gt;yyyyMMddHHmm&lt;/code&gt;
* &lt;code&gt;yyyyMMdd-HHmm&lt;/code&gt;
* &lt;code&gt;yyyyMMdd&lt;/code&gt;

=== List of JVM arguments for the EclipseRun Plugin===

The one-line-parameter &lt;tt&gt;&amp;lt;argLine&amp;gt;&lt;/tt&gt; has been deprecated. JVM parameters can be configured now as a list of arguments (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=486799 bug 486799]&lt;/strike&gt;):
  &lt;jvmArgs&gt; 
    &lt;args&gt;-Xdebug&lt;/args&gt;
    &lt;args&gt;-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044&lt;/args&gt;
  &lt;/jvmArgs&gt; 


[[Category:Tycho|Release Notes/0.25]]</text>
      <sha1>a2drgsw2fqgbafth9drccgyorrc3jot</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/0.26</title>
    <ns>0</ns>
    <id>54122</id>
    <revision>
      <id>408924</id>
      <parentid>408752</parentid>
      <timestamp>2016-08-19T13:09:22Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5442">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.25|&amp;lt; Previous Version]] |  [[Tycho/Release Notes/0.27|Next Version &amp;gt;]] &lt;/div&gt; 

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=0.26.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 0.26.0]


=== TestNG support ===
The Tycho Surefire Plug-in does now support running tests with the [http://testng.org TestNG] framework. In order to use TestNG you have to:

==== Provide TestNG as OSGi Bundle ====
Because TestNG is not an OSGi Bundle, you have to provide the TestNG classes and it's dependencies (currently only com.beust.jcommander) as OSGi bundles by either include the jars into your test plugin and export the TestNG java packages so that the Tycho Surefire Plugin can see them or create a separate Eclipse Plug-in (&quot;Plug-in from Existing JAR Archives&quot; Wizard) that contains the jars. Make sure the TestNG java packages are exported. Add this newly created Plug-in as a dependency to all your Test Plug-ins /Fragments.

==== Configure Tycho Surefire Plug-in====
The TestNG framework provider has to be enabled by setting the &lt;providerHint&gt; configuration value to &quot;testng&quot;. Within TestNG tests it is common to use java assertions, so you might also have to enable assertions. Example configuration:

       &lt;build&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
                &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;${tycho.version}&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;providerHint&gt;testng&lt;/providerHint&gt;
                    &lt;argLine&gt;-ea&lt;/argLine&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
       &lt;/build&gt;

==== Using Test Suites ====
If you want to use test suites you could configure the suite files you want to execute by specifing the suite xml files within the configuration:

       &lt;build&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
                &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;${tycho.version}&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;providerHint&gt;testng&lt;/providerHint&gt;
                    &lt;argLine&gt;-ea&lt;/argLine&gt;
                    &lt;suiteXmlFiles&gt;
                        &lt;suiteXmlFile&gt;mysuite1.xml&lt;/suiteXmlFile&gt;
                        &lt;suiteXmlFile&gt;mysuite2.xml&lt;/suiteXmlFile&gt;
                    &lt;/suiteXmlFiles&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
       &lt;/build&gt;

==== Using Groups ====
If you want to use groups within your TestNG tests, you have to configure one additional thing. Because of the way TestNG and the Surefire TestNG Plug-in do select the test groups that should be executed, the Plug-in that exports the &lt;tt&gt;org.testng&lt;/tt&gt; packages must be able to load a class from the Surefire TestNG Plug-in. With the OSGi Classloader this is only possible if you dynamically import that package in the plugin you export the TestNG packages. Within the MANIFEST.MF file of that Plug-in add 

   DynamicImport-Package: org.apache.maven.surefire.testng.utils

To execute specific groups you could add the group names within the plugin configuration

       &lt;build&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
                &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;${tycho.version}&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;providerHint&gt;testng&lt;/providerHint&gt;
                    &lt;argLine&gt;-ea&lt;/argLine&gt;
                    &lt;groups&gt;myGroup1,myGroup2&lt;/groups&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
       &lt;/build&gt;

=== New option to check consistency of .target files ===

The [https://www.eclipse.org/tycho/sitedocs-extras/target-platform-validation-plugin/plugin-info.html target-platform-validation-plugin] now features a new option flag &lt;tt&gt;checkProvisioning&lt;/tt&gt; which will evaluate whether the content of the .target file can be provisioned all together. It checks for dependencies availability, non-conflicting versions of included installation units, and all kinds of errors usually reported by p2 director.
[[Category:Tycho|Release Notes/0.26]]

=== Execution environment for Forked EclipseRun Run ===

* &lt;font color=&quot;red&quot;&gt;(INCOMPATIBLE CHANGE)&lt;/font&gt; The &lt;tt&gt;&amp;lt;executionEnvironment&amp;gt;&lt;/tt&gt; parameter of the [https://www.eclipse.org/tycho/sitedocs-extras/tycho-eclipserun-plugin/eclipse-run-mojo.html tycho-eclipserun-plugin:run mojo] is used not only to resolve the forked run's dependencies but also to select the execution environment to run it with. Previously the execution enviroment from the configured [http://maven.apache.org/guides/mini/guide-using-toolchains.html toolchain] (if any) was used, with a fallback on the execution environment that ran the build. Using the &lt;tt&gt;&amp;lt;executionEnvironment&amp;gt;&lt;/tt&gt; parameter to select the execution environment allows one to, e.g., use a newer execution environment for the forked run than is used for the main build (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=498180 bug 498180]&lt;/strike&gt;).

[[Category:Tycho|Release Notes/0.26]]</text>
      <sha1>q6k1kxid7k7fd4zo8ai7c5xruk4vkw8</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/1.0.0</title>
    <ns>0</ns>
    <id>54925</id>
    <revision>
      <id>414202</id>
      <parentid>413972</parentid>
      <timestamp>2017-02-13T08:33:00Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2174">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/0.26|&amp;lt; Previous Version]] | [[Tycho/Release Notes/1.1|Next Version &amp;gt;]]&lt;/div&gt; 

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=1.0.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 1.0.0]

=== p2 ===

* packaging type &lt;tt&gt;eclipse-repository&lt;/tt&gt; will now add MD5 checksums to artifact metadata of the p2 repository created (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=357513 bug 357513]&lt;/strike&gt;)
* It's now possible to mirror multiple repositories using one mirror definition. Example: [https://wiki.eclipse.org/Tycho/Target_Platform/Authentication_and_Mirrors#Mirroring_multiple_Repositories Mirroring multiple Repositories] (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=501809 bug 501809]&lt;/strike&gt;).
* Added support for PDE root files using &lt;tt&gt;root.folder.&lt;subfolder&gt; &lt;/tt&gt; syntax
* Fail build early and with a clear error message when download of artifacts from baseline repository used for comparison fails

=== Compiler ===

* &lt;font color=&quot;red&quot;&gt;(BREAKING CHANGE)&lt;/font&gt; tycho-compiler-plugin's [https://www.eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html#useProjectSettings &lt;tt&gt;useProjectSettings&lt;/tt&gt;] default value is now &lt;tt&gt;true&lt;/tt&gt; so that &lt;tt&gt;.settings/org.eclipse.jdt.core.prefs&lt;/tt&gt; are used by default if existing.

=== Testing ===

* TestNG unit tests are now detected automatically, no need to specify a &lt;tt&gt;providerHint=testng&lt;/tt&gt; anymore

=== Other ===

* &lt;tt&gt;tycho-versions-plugin&lt;/tt&gt; can now be used with pom-less builds
* Updated all eclipse dependencies (JDT, Equinox and p2) to Neon.2
* Consistently use &lt;tt&gt;${maven.build.timestamp}&lt;/tt&gt; for value of both maven -SNAPSHOT and PDE .qualifier version suffix
* Enable build of features with multiple os/ws/arch filters

[[Category:Tycho|Release Notes/1.0.0]]</text>
      <sha1>pxs30d5fyei5yk24n6elhdjrd07agyt</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/1.1</title>
    <ns>0</ns>
    <id>55779</id>
    <revision>
      <id>422362</id>
      <parentid>422157</parentid>
      <timestamp>2018-02-02T12:43:52Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2960">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/1.0.0|&amp;lt; Previous Version]] | [[Tycho/Release Notes/1.2| Next Version]] &amp;gt;&lt;/div&gt; 

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;resolution=FIXED&amp;target_milestone=1.1.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 1.1.0]

=== Java 9 ===

* Tycho's dependencies have been [https://bugs.eclipse.org/bugs/show_bug.cgi?id=514119 updated where necessary] to support running the build using Java 9

=== Compiler ===

* the JDT compiler shipped with Tycho has been [https://bugs.eclipse.org/bugs/show_bug.cgi?id=514471 updated to Photon M4]
* Compilation both ''using'' Java 9 as well as using Java 8 but ''compiling against'' Java 9 ( with [https://eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html#useJDK useJDK=BREE]) is supported now ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=514471 bug 514471])
* Changes for [https://eclipse.org/tycho/sitedocs/tycho-compiler-plugin/compile-mojo.html#useJDK useJDK=BREE]:
** Usage of a JRE directory &lt;tt&gt;JAVA_HOME/jre&lt;/tt&gt; in &lt;tt&gt;toolchains.xml&lt;/tt&gt; is still supported but deprecated in favour of simply using &lt;tt&gt;JAVA_HOME&lt;/tt&gt;. In particular, &lt;tt&gt;JAVA_HOME&lt;/tt&gt; is expected by other maven plugins integrated with &lt;tt&gt;toolchains.xml&lt;/tt&gt;


=== Packaging ===

* plexus-archiver was updated to version 3.4 &lt;strike&gt;([https://bugs.eclipse.org/bugs/show_bug.cgi?id=514119 bug 514119])&lt;/strike&gt;
* commons-compress was updated to version 1.15 &lt;strike&gt;([https://bugs.eclipse.org/bugs/show_bug.cgi?id=514119 bug 514119])&lt;/strike&gt;

=== p2 ===

* Tycho's embedded OSGi runtime has been updated to use Equinox and p2 from Oxygen.2 (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=519040 bug 519040]&lt;/strike&gt;)

=== Release and Versioning ===

* Support for using &lt;tt&gt;maven-release-plugin&lt;/tt&gt; with Tycho has been contributed (&lt;strike&gt;[https://bugs.eclipse.org/bugs/show_bug.cgi?id=342893 bug 342893]&lt;/strike&gt;), see [https://wiki.eclipse.org/Tycho/Release_Workflow release workflow docs]
* Added new goal [https://hudson.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/tycho-release/tycho-versions-plugin/update-eclipse-metadata-mojo.html mvn org.eclipse.tycho:tycho-versions-plugin:update-eclipse-metadata] ([https://bugs.eclipse.org/342893 bug 342893]) which will update MANIFEST/feature.xml/product versions based on their respective pom versions. This is useful e.g. if you changed pom versions using [http://maven.apache.org/components/maven-release/maven-release-plugin/ maven-release-plugin]. For more details about using the maven release plugin with Tycho see [[Tycho/Release_Workflow]].

[[Category:Tycho|Release Notes/1.1]]</text>
      <sha1>aqug9xn1pg9s5r07u1x17qw9ux2zpfg</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/1.2</title>
    <ns>0</ns>
    <id>57074</id>
    <revision>
      <id>427433</id>
      <parentid>425741</parentid>
      <timestamp>2018-09-03T08:04:45Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2716">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/1.1|&amp;lt; Previous Version]] | [[Tycho/Release Notes/1.3|Next Version &amp;gt;]]&lt;/div&gt; 

 	
== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=1.2.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 1.2.0]

=== Testing ===

* Support for '''JUnit 5''' is here! ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=522475 bug 522475])
**  We ported [https://github.com/junit-team/junit5/tree/master/junit-platform-surefire-provider junit-platform-surefire-provider] to Tycho. As soon as a test bundle requires any of the &lt;tt&gt;org.junit.jupiter.api.*&lt;/tt&gt; packages, the JUnit 5 surefire provider is used, no need for explicit configuration in the default case.
** We added &lt;tt&gt;junit-vintage-engine&lt;/tt&gt; so you can mix and match JUnit 5 and JUnit 4 tests in the same test bundle. This should ease gradual migration to JUnit 5
** You can exclude or include test based on JUnit 5 tags, see the [http://git.eclipse.org/c/tycho/org.eclipse.tycho.git/tree/tycho-its/projects/surefire.junit5/bundle.test/pom.xml JUnit 5 example test bundle] used by the integration tests or the [https://wiki.eclipse.org/Tycho/How_Tos/JUnit5 JUnit5 How To]

== p2 and Dependency resolution ==

* Move to Equinox p2 Photon RC1 ( {{bug|534916}} )
** This adds sha-256 signatures to p2 metadata for downloadable artifacts
** Publish OSGi capabilites as p2 requires/provides and take them into account during dependency resolution.
** The [[../../Execution_Environments|execution environment]] (EE) is now published as a requirement and taken into account during dependency resolution.
* Default [[../../Execution_Environments|execution environment]], used when no better source in the module is found to decide it, is now &lt;tt&gt;JavaSE-9&lt;/tt&gt;. 
* Support for building bundles requiring &lt;tt&gt;JavaSE-10&lt;/tt&gt; has been added ( {{bug|532233}} )
* Installable Units representing the execution environment (e.g. &lt;tt&gt;a.jre.javase&lt;/tt&gt; version &lt;tt&gt;10.0.0&lt;/tt&gt; representing &lt;tt&gt;JavaSE-10&lt;/tt&gt;) are now explicitly published in projects of packaging type &lt;tt&gt;eclipse-repository&lt;/tt&gt; (as opposed to implicitly when publishing a product). The default execution environment published is &lt;tt&gt;JavaSE-10&lt;/tt&gt;, but this is [https://ci.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/tycho-p2/tycho-p2-publisher-plugin/publish-osgi-ee-mojo.html configurable].
  

[[Category:Tycho|Release Notes/1.2]]</text>
      <sha1>bvfffx5vikthus2ktojgrfgs60oidwn</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/1.3</title>
    <ns>0</ns>
    <id>57745</id>
    <revision>
      <id>440154</id>
      <parentid>429922</parentid>
      <timestamp>2020-07-31T07:18:00Z</timestamp>
      <contributor>
        <username>Ilg.livius.net</username>
        <id>9297</id>
      </contributor>
      <minor/>
      <comment>tycho.version</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6377">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/1.2|&amp;lt; Previous Version]] | [[Tycho/Release Notes/1.4|Next Version]]&amp;gt;&lt;/div&gt; 


== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=1.3.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 1.3.0]


=== Java 11 ===

* JDT was updated to 3.15.1 (we are now using ecj binaries from maven central as opposed to jdt.core and jdt.compiler.apt) {{bug|532302}} to support compiling against Java 11
* Note there is still an open bug when running test using Java 11 {{bug|541403}}


=== org.apache.felix.scr ===


{{bug|538729}}

Tycho 1.3.0 surefire plugin supports starting applications that use org.apache.felix.scr bundle in place of org.eclipse.equinox.ds (like Eclipse Platform 4.10 based target-platforms)

=== download.stats artifact metadata property ===

{{bug|539552}}

Support for &lt;tt&gt;download.stats&lt;/tt&gt; property on artifacts metadata. In order to (partially) enable p2 download stats as documented in [[Equinox_p2_download_stats]], you can now configure you &lt;tt&gt;tycho-p2-plugin:p2-metadata&lt;/tt&gt; [https://ci.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/tycho-p2/tycho-p2-plugin/p2-metadata-mojo.html#generateDownloadStatsProperty generateDownloadStats parameter] to add the necessary property on the artifacts:

&lt;source lang=&quot;xml&quot;&gt;
   &lt;plugin&gt;
     &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
     &lt;artifactId&gt;tycho-p2-plugin&lt;/groupId&gt;
     &lt;configuration&gt;
        &lt;generateDownloadStatsProperty&gt;true&lt;/generateDownloadStatsProperty&gt;
     &lt;/configuration&gt;
   &lt;/plugin&gt;
&lt;/source&gt;


or alternatively, you can override the &lt;tt&gt;tycho.generateDownloadStatsProperty&lt;/tt&gt; property either by CLI with &lt;tt&gt;mvn -Dtycho.generateDownloadStatsProperty=true ...&lt;/tt&gt; or by adding &lt;tt&gt;&lt;tycho.generateDownloadStatsProperty&gt;true&lt;/tycho.generateDownloadStatsProperty&gt;&lt;/tt&gt; in the &lt;tt&gt;&lt;properties&gt;&lt;/tt&gt; element of your pom.xml.

This results in this in artifacts.xml (and derived artifacts.jar and artifacts.xml.xz):
&lt;source lang=&quot;xml&quot;&gt;
  &lt;artifacts size='4'&gt;
    &lt;artifact classifier='osgi.bundle' id='bundle' version='1.0.0.123abc'&gt;
      &lt;properties size='9'&gt;
        &lt;!-- ... --&gt;
        &lt;property name='download.stats' value='bundle/1.0.0.123abc'/&gt;
        &lt;!-- ... --&gt;
      &lt;/properties&gt;
    &lt;/artifact&gt;
    &lt;artifact classifier='osgi.bundle' id='bundle' version='1.0.0.123abc'&gt;
      &lt;processing size='1'&gt;
        &lt;step id='org.eclipse.equinox.p2.processing.Pack200Unpacker' required='true'/&gt;
      &lt;/processing&gt;
      &lt;properties size='12'&gt;
        &lt;!-- ... --&gt;
        &lt;property name='download.stats' value='bundle/1.0.0.123abc'/&gt;
        &lt;!-- ... --&gt;
      &lt;/properties&gt;
    &lt;/artifact&gt;
&lt;/source&gt;

=== Extra artifact repository properties (like p2.statsURI or p2.mirrorsURL) ===

{{bug|341744}}

The &lt;tt&gt;tycho-p2-repository-plugin:assemble-repository&lt;/tt&gt; plugin now accepts a [https://ci.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/tycho-p2/tycho-p2-repository-plugin/assemble-repository-mojo.html#extraArtifactRepositoryProperties extraArtifactRepositoryProperties] parameter to configure addition properties to add to the artifact repository. Typical examples of properties one would like to include that way are &lt;tt&gt;p2.mirrorsURL&lt;/tt&gt; and &lt;tt&gt;p2.statsURI&lt;/tt&gt;

&lt;source lang=&quot;xml&quot;&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;packaging&gt;eclipse-repository&lt;/packaging&gt;
  &lt;!-- .... --&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-p2-repository-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho.version}&lt;/version&gt;
        &lt;configuration&gt;
          &lt;extraArtifactRepositoryProperties&gt;
            &lt;p2.statsURI&gt;http://some.where&lt;/p2.statsURI&gt;
            &lt;p2.mirrorsURL&gt;http://some.where.else&lt;/p2.mirrorsURL&gt;
            &lt;foo&gt;bar&lt;/foo&gt;
          &lt;/extraArtifactRepositoryProperties&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
&lt;/source&gt;


adds the properties to the artifact repository, that would then contain

&lt;source lang=&quot;xml&quot;&gt;
&lt;repository name=&quot;Example Repository&quot; type=&quot;org.eclipse.equinox.p2.artifact.repository.simpleRepository&quot; version=&quot;1&quot;&gt;
  &lt;properties size=&quot;5&quot;&gt;
    &lt;property name=&quot;publishPackFilesAsSiblings&quot; value=&quot;true&quot;/&gt;
    &lt;property name=&quot;p2.mirrorsURL&quot; value=&quot;http://some.where.else&quot;/&gt;
    &lt;property name=&quot;p2.statsURI&quot; value=&quot;http://some.where&quot;/&gt;
    &lt;property name=&quot;p2.timestamp&quot; value=&quot;1538498332220&quot;/&gt;
    &lt;property name=&quot;foo&quot; value=&quot;bar&quot;/&gt;
  &lt;/properties&gt;
  &lt;!-- .... --&gt;
&lt;/source&gt;

=== Configure trimStackTrace in Tycho Surefire ===

{{bug|535881}}

Maven Surefire aggressively trims stack traces in test case failure reports, which can lead to confusion where an error/exception actually happened. To avoid that Tycho Surefire now allows configuring the [http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#trimStackTrace trimStackTrace property] as in Maven Surefire.

=== New Surefire Version ===

{{bug|537419}}

The Maven Surefire plugins had been updated to v2.22.0 and are now using the Surefire JUnit 5 Platform Provider (prior Tycho used the JUnit 5 Platform Provider from the JUnit Team). So the provider specific properties (e.g. &quot;excludeTag&quot;) might not work anymore. E.g:
&lt;source lang=&quot;xml&quot;&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho-version}&lt;/version&gt;
        &lt;configuration&gt;
         &lt;providerProperties&gt;
           &lt;excludeTags&gt;slow&lt;/excludeTags&gt;
         &lt;/providerProperties&gt;
        &lt;/configuration&gt;
&lt;/source&gt;

is now:
&lt;source lang=&quot;xml&quot;&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho-version}&lt;/version&gt;
        &lt;configuration&gt;
          &lt;excludedGroups&gt;slow&lt;/excludedGroups&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
&lt;/source&gt;

[[Category:Tycho|Release Notes/1.3]]</text>
      <sha1>a94wuh55um3w2bxfv1m0e7x2hfh56ld</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/1.4</title>
    <ns>0</ns>
    <id>58451</id>
    <revision>
      <id>434947</id>
      <parentid>433654</parentid>
      <timestamp>2019-10-30T10:39:41Z</timestamp>
      <contributor>
        <username>Sewe.cqse.eu</username>
        <id>14552</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2169">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/1.3|&amp;lt; Previous Version]] | Next Version &amp;gt;&lt;/div&gt;




== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=1.4.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 1.4.0]

=== Objectweb ASM update ===

ObjectWeb ASM has been updated to version 7.0 from 5.0.3 which provides Java 11 compatibility in artifactcomparator. '''Note:''' Due to upstream no longer producing org.ow2.asm:asm-debug-all Tycho now requires org.ow2.asm:asm-tree and org.ow2.asm:asm-util. {{bug|543850}}

=== Resolving Java 11 removed modules ===

Java 11 removed a number of modules which broke compilation/tests/resolving deps when the bundle has lower BREE as they were resolved from the BREE profile. Now Tycho will check if runtime Java is 11+ and if it differs from bundle's EE - in this case it will resolve deps with current runtime's EE. '''Note:''' Some additional bundles may need to be added to the target platform to replace the removed JDK modules. {{bug|541403}}

=== Performance improvement using Git timestamp provider ===

If you have configured Tycho to create [[Tycho/Reproducible Version Qualifiers|reproducable version qualifiers]], then Tycho will calculate the qualifier from the underlying git history. This can take quite a while on git repositories with a big history. In Tycho 1.4 the history retrieval has been optimized, and we have seen the execution time drop down from several seconds to less than a second on a big repository. This calculation is done for each module in an aggregator. If you build big aggregators with many modules, then you may gain some minutes of build time just by upgrading Tycho. {{bug|544005}}

=== ECJ update ===
ECJ has been updated to version 3.17.0 from 3.15.1. This version brings support for Java 11 bytecode and features.


[[Category:Tycho|Release Notes/1.4]]</text>
      <sha1>q0vk4xct9t0qv70dhgwjbwbqtrkavak</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/1.5</title>
    <ns>0</ns>
    <id>58759</id>
    <revision>
      <id>437442</id>
      <parentid>434948</parentid>
      <timestamp>2020-01-15T14:31:34Z</timestamp>
      <contributor>
        <username>Gunnar.wagenknecht.org</username>
        <id>231</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5251">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/1.4|&amp;lt; Previous Version]] | [[Tycho/Release Notes/1.6|Next Version &amp;gt;]]&lt;/div&gt;

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=1.5.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 1.5.0]

=== Pomless Build ===

The pomless build has been improved to support some new features and improve existing ones:

{{bug|490886}} - support for pomless update site builds

{{bug|482487}} - support for pomless product builds

{{bug|550285}} - support for pomless target-definition builds:
- If the target definition file contains a name attribute it will become the &lt;code&gt;artifactId&lt;/code&gt; of the artifact otherwise the name of the .target file (with .target suffix) is used.

{{bug|507700}} - support .test as a suffix for plugins and make it configurable, you can now alternatively specify a property ''tycho.pomless.testbundle=true/false'' in build.properties file to override the default behavior.

{{bug|478704}} - support for alternative parent-pom file locations: 
- It is possible to define a system-property tycho.pomless.parent (defaults to &quot;..&quot;) that configures the global default for searching parent poms (similar to tycho.localArtifacts this can't be configured in pom directly because of the early phase this is required)
- It is also possible to define tycho.pomless.parent inside build.properties of individual bundle/fragment that overrides the global default for only this module

{{bug|492819}} - support for structured builds: It is now possible to use pomless for so called [http://blog.vogella.com/2015/12/15/pom-less-tycho-builds-for-structured-environments/ &quot;structured-builds&quot;] that means the folders are not just a flat representation of all projects but are structured by their type (e.g. bundles, test, feature), you can find an example [https://git.eclipse.org/c/tycho/org.eclipse.tycho.extras.git/tree/tycho-extras-its/src/test/resources/testpomless-structured here] so it is possible to have just one pom.xml in the root of you project structure.
You can find a [https://github.com/vogellacompany/tycho-example/pull/10 pull-request here] that shows what changes could be made to leverage this feature compared to a project using Tycho 1.4 pomless extension to reduce the required poms.

=== FreeBSD support ===

{{bug|549689}} adds support for FreeBSD platform in RCP product definitions.

=== Thread stack traces dump before forkedProcessTimeoutInSeconds timeout occurs ===

The parameter [https://www.eclipse.org/tycho/sitedocs-extras/tycho-eclipserun-plugin/eclipse-run-mojo.html#forkedProcessTimeoutInSeconds forkedProcessTimeoutInSeconds] can be specified to kill the process which runs tests (also prior to Tycho 1.5.0). With the change for {{bug|542876}}, a few minutes before the process is killed due to this timeout, thread stack traces are dumped in the test log. I.e. when a timeout occurs (e.g. due to a deadlock) the logs would now contain some indication of which code causes the timeout.

=== A Mojo to list dependencies ===

{{bug|547269}} introduces a new &lt;tt&gt;org.eclipse.tycho.extras:tycho-dependency-tools-plugin:list-dependencies&lt;/tt&gt; mojo that can list the bundles resulting of dependency resolution for Tycho projects.

This differs from &lt;tt&gt;dependency:list&lt;/tt&gt; in that the later one lists the classpath which may include nested jars instead of required bundle.

The default output file is &lt;tt&gt;target/dependenct-list.txt&lt;/tt&gt;, lists of absolute paths to required bundles and is suitable to use with the &lt;tt&gt;org.eclipse.pde.api.tools.apiAnalysis&lt;/tt&gt; application.

=== ECJ update ===

ECJ has been updated to version 3.19.0. This version adds support for Java 12 bytecode and features.

=== JGit update ===
 
JGit has been updated to version 5.5.0. Full release notes [https://projects.eclipse.org/projects/technology.jgit/releases/5.5.0/ here].

=== Equinox update ===

Equinox and p2 has been updated to their 2019-09 versions.

=== Support for maven.compiler.failOnWarning ===

{{bug|547470}} introduces support for &lt;tt&gt;maven.compiler.failOnWarning&lt;/tt&gt; user property to tycho-compiler-plugin with same behavior as [https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#failOnWarning maven-compiler-plugin].

=== Support for surefire enableAssertions ===

{{bug|526008}} introduces support for &lt;tt&gt;enableAssertions&lt;/tt&gt; user property to tycho-surefire. Default value for it is &lt;tt&gt;false&lt;/tt&gt; while maven-surefire has it as &lt;tt&gt;true&lt;/tt&gt;.

=== Update plexus container used ===

{{bug|551292}} updated Maven to use org.eclipse.sisu.plexus as it's plexus container instead of plexus-container-default. '''NOTE: TYCHO MIN MAVEN REQUIREMENT HAS BEEN BUMPED TO VERSION 3.1.0.
'''

=== Support for Eclipse-PlatformFilter ===

{{bug|487341}} multi-environment build fails using platform filters is now fixed and allows the filtering of a bundle for a particular environment


[[Category:Tycho|Release Notes/1.5]]</text>
      <sha1>9rt3no9fjn50gn2nyv4bf03y0kg1mmj</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/1.6</title>
    <ns>0</ns>
    <id>59141</id>
    <revision>
      <id>442217</id>
      <parentid>440615</parentid>
      <timestamp>2021-01-18T14:12:34Z</timestamp>
      <contributor>
        <username>Guillaume.duff.gmail.com</username>
        <id>22434</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2780">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/1.5|&amp;lt; Previous Version]] | [[Tycho/Release Notes/1.7.0|Next Version &amp;gt;]]&lt;/div&gt;

&lt;!--
== SNAPSHOT builds ==

Tycho 1.6.0-SNAPSHOT is currently in development. To try out the most recent snapshot build, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;1.6.0-SNAPSHOT&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;tycho-snapshots&lt;/id&gt;
      &lt;url&gt;https://repo.eclipse.org/content/repositories/tycho-snapshots/&lt;/url&gt;
    &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;

== Staging build ==

Tycho 1.6.0 is currently staged for release. To try out the release candidate, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;1.6.0&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
  &lt;pluginRepository&gt;
    &lt;id&gt;tycho-staged&lt;/id&gt;
    &lt;url&gt;TODO&lt;/url&gt;
  &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;

 
=== SNAPSHOT site docs ===
 
Refer to the [https://ci.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/index.html latest SNAPSHOT site docs for Tycho] and [https://ci.eclipse.org/tycho/job/tycho.extras-sitedocs/ws/target/staging/index.html Tycho Extras].
--&gt;

[[Category:Tycho|Release Notes/1.6]]

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=1.6.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 1.6.0]

=== Faster target platform resolution ===

{{bug|551974}} Tycho needs to resolve the target platform during the initial phase of a build. This is now much faster than before, thanks to improved caching. In an example application with 800 bundles in its target platform Tycho 1.5 needs about 2 seconds per Maven module for target platform resolution, while Tycho 1.6 needs about 0.2 seconds per Maven module.

=== Drop support for obsolete modular JVMs (10 and 12) ===

{{bug|552831}} Due to Equinox no longer shipping EEs (they kind of lost sense with modular JVMs which may or may not include a module) these EEs are
shipped as part of Tycho now, but it can't go indefinitely. Dropped Java 10 and 12 which are no longer supported versions already.

=== Updated plexus-utils to version 3.3.0 ===

{{bug|552968}} Plexus Utils has been updated to version 3.3.0 as a prereq for other dependency updates.


[[Category:Tycho|Release Notes/1.6]]</text>
      <sha1>fr63rmblhu82z3h00eplyxso3dv10a4</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/1.7.0</title>
    <ns>0</ns>
    <id>60624</id>
    <revision>
      <id>442216</id>
      <parentid>439085</parentid>
      <timestamp>2021-01-18T14:11:58Z</timestamp>
      <contributor>
        <username>Guillaume.duff.gmail.com</username>
        <id>22434</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2143">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/1.6|&amp;lt; Previous Version]] | [[Tycho/Release Notes/2.0|Next Version &amp;gt;]]&lt;/div&gt;

[[Category:Tycho|Release Notes/1.7]]

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=1.7.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 1.7.0]

=== Removed Java 13 EE definition ===

With the release of Java 14, Java 13 is EOL so Tycho no longer publish profile for it.

=== JUnit 5.5.1 &amp; 5.6.0 support ===

Tycho Surefire gained support for running tests with JUnit 5.4+ (more specifically, Tycho bundles support for JUnit 5.5.1 and 5.6.0 additionally to existing 5.4.1 support).

=== Updated dependencies ===

* Apache Commons Compress - 1.20
* Ecj - 3.21.0
* JGit - 5.7.0
* Equinox (OSGi runtime and p2) - versions from Eclipse SDK 4.15
* Plexus Archiver - 4.2.2
* Polyglot Maven - 0.4.4

=== Reduced dependencies ===

Test dependencies are properly marked as such so they don't pollute runtime.

=== Thread safe MOJOs ===

As a first step towards parallel support in Tycho all MOJOs are marked threadSafe but synchronize on local object for extra safety. {{bug|548849}}

=== New generated files for pomless builds ===

In 1.7 Tycho may now generate a '''.polyglot.feature.xml''' file as part of the mechanisms for pomless builds. Projects may want to add this file to their list of ignored files in '''.gitignore''', especially when using the jgit timestamp provider which will otherwise complain about unclean project.

=== ECJ Upgrade ===

The upgrade to ECJ may cause different class files to be generated from the same sources. Therefore projects that use Compare Versions With Baseline may have reported class file differences with no corresponding source changes. This will require a service segment bump on the containing bundles.

[[Category:Tycho|Release Notes/1.7]]</text>
      <sha1>s36zq7dtmwa08ik7lg82kpna372sfq1</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/2.0</title>
    <ns>0</ns>
    <id>60625</id>
    <revision>
      <id>442408</id>
      <parentid>442211</parentid>
      <timestamp>2021-02-23T17:37:25Z</timestamp>
      <contributor>
        <username>Julien.henry.sonarsource.com</username>
        <id>16211</id>
      </contributor>
      <comment>Fix configuration of target platform with classifiers</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11156">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/1.7.0|&amp;lt; Previous Version]] | [[Tycho/Release Notes/2.1|Next Version &amp;gt;]]&lt;/div&gt;

[[Category:Tycho|Release Notes/2.0]]

&lt;!--
== SNAPSHOT builds ==

Tycho 2.0.0-SNAPSHOT is currently in development. To try out the most recent snapshot build, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.0.0-SNAPSHOT&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;tycho-snapshots&lt;/id&gt;
      &lt;url&gt;https://repo.eclipse.org/content/repositories/tycho-snapshots/&lt;/url&gt;
    &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;

=== SNAPSHOT site docs ===
 
Refer to the [https://ci.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/index.html latest SNAPSHOT site docs for Tycho] and [https://ci.eclipse.org/tycho/job/tycho.extras-sitedocs/ws/target/staging/index.html Tycho Extras].

[[Category:Tycho|Release Notes/1.7]]
--&gt;
&lt;!--
== Staging build ==

Tycho 2.0.0 is currently staged for release. To try out the release candidate, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.0.0&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
  &lt;pluginRepository&gt;
    &lt;id&gt;tycho-staged&lt;/id&gt;
    &lt;url&gt;https://oss.sonatype.org/content/repositories/orgeclipsetycho-1063/&lt;/url&gt;
  &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;
--&gt;
== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=2.0.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 2.0.0]

=== Update requirements ===

==== Requires Java 11 ====

* Tycho now requires Java 11 as a minimum runtime requirement
* The default execution environment (EE) for the '''tycho-eclipserun-plugin''' was also bumped to Java 11
* The default source and target settings for the '''tycho-compiler-plugin''' were also bumped to Java 11

Note that this is a requirement for Tycho itself to run. Tycho can still build bundle that require older Java versions and have those bundles targeting older Java versions.

==== Requires Maven 3.6.3 or more recent ====

Maven 3.6.3 has important bugfixes necessary for some Tycho use-cases.

=== Target platform resolution becoming more correct ===

==== Resolve system.packages from Execution Envionment against toolchain or current JRE, from Java 13 ====

{{bug|563930}} Since Java 9 and module JVM, JREs can now have different sets of system packages from the same version. As a result, the list of system packages cannot be built statically. So Tycho will now query the defined toolchains when to get the actual system packages when requested (mainly for the '''tycho-compiler-plugin''' when '''requireJREPackageImports=true'''). If no matching toolchain is found, a warning is emitted and the system packages from the current Java runtime are used as failback.

An error-prone workaround was implemented in Tycho 1.x for Java 9 and 11, with a static list of system packages. This workaround is still active for those Java version, but not for newer Java versions. It may be decided to remove the workaround in a near future (maybe even before 2.0 releases) to bring more consistency and correctness.

==== targetJRE in referenced target-definition file is used to derive Execution Environment ====

{{bug|564959}} - If the ''target-platform-configuration'' is configured so that it references some target definition files via that &lt;tt&gt;&amp;lt;target&gt;&lt;/tt&gt; child element, and doesn't enforce an &lt;tt&gt;&amp;lt;executionEnvironment&gt;&lt;/tt&gt;, the the .target file will be inspected for a &lt;tt&gt;targetJRE&lt;/tt&gt; declaration, and the first match will be used as execution environment for target platform resolution.&lt;br&gt;
If &lt;tt&gt;executionEnvironment&lt;/tt&gt; is set directly as a configuration of the ''target-platform-configuration'' in the pom.xml file, this will take priority and the &lt;tt&gt;targetJRE&lt;/tt&gt; in target files are ignored. If no .target file defines a JRE, then the execution environment is chosen as usual.

==== Proper BREE handling may require setting executionEnvironment in target-platform-configuration or targetJRE in .target files ====

With recent change for better Execution Environment, BREE and system packages handling, only 1 execution environment is added to the context for dependency resolution (unless &lt;tt&gt;resolveWithExecutionEnvironmentsConstraints&lt;/tt&gt; is set to &lt;tt&gt;false&lt;/tt&gt;) and this EE is usually derived from the BREE of the bundle. This can lead to some dependency resolution error, for example when building a bundle with &lt;tt&gt;Bundle-RequiredExecutionEnvironment: JavaSE-1.5&lt;/tt&gt;, hence using &lt;tt&gt;JavaSE-1.5&lt;/tt&gt; as default execution environment with a target-platform containing bundles requiring &lt;tt&gt;JavaSE-1.8&lt;/tt&gt; or &lt;tt&gt;JavaSE-11&lt;/tt&gt;.

So, for dependency resolution to be reliable and relevant, it's best to enforce the executionEnvironment to be the higher one of the BREE requirement and the target-platform requirement. As Tycho cannot know in advance what is the required Java version for your target platform (ie your .target files and the referenced &lt;tt&gt;&amp;lt;repositories&gt;&lt;/tt&gt;), you'll probably need to upgrade manually the execution environment in case the EE required for the target-platform is higher than the bundle BREE. This can be achieved by explicitly setting the &lt;tt&gt;&amp;lt;executionEnvironment&gt;&lt;/tt&gt; configuration child of the &lt;tt&gt;target-platform-configuration&lt;/tt&gt; block as explained in [[Tycho/Execution_Environments#Execution_environment_configuration]].

Notes on settings &lt;tt&gt;&amp;lt;executionEnvironment&gt;&lt;/tt&gt; configuration child of the &lt;tt&gt;target-platform-configuration&lt;/tt&gt;:
* This setting takes priority over the automatic choice by Tycho described above.
* Setting it explicitly can be useful as it allows to ensure what you're resolving and testing against better maps the actual content of your target environments. This will allow to catch issue like missing system packages when targeting newer Java version much earlier, during dependency resolution with a more explicit error message, rather than during the test execution.
* When setting it, make sure that this EE can actually be satisfied (i.e. when using  &lt;tt&gt;&amp;lt;useJDK&amp;gt;SYSTEM&amp;lt;/useJDK&amp;gt;&lt;/tt&gt; the SYSTEM JRE matches, or when using &lt;tt&gt;&amp;lt;useJDK&amp;gt;BREE&amp;lt;/useJDK&amp;gt;&lt;/tt&gt; a matching toolchain is available). Otherwise this can lead to unexpected dependency resolution problems.

==== Support for &lt;executionEnvironment&gt;none&lt;/executionEnvironment&gt; ====

{{bug|565298}} To better support cases where the Execution Environment is already part of the target platform as installation units, such as runtime embedded with Eclipse JustJ, it's now possible to set &lt;tt&gt;&amp;lt;executionEnvironment&gt;none&amp;lt;/executionEnvironment&gt;&lt;/tt&gt; in the target-platform-configuration block. This will exclude the transient unit representing the execution environment from dependency resolution, leaving all room for other units to fulfill the EE requirements.

==== Remove non-matching a.jre.javase/config.a.jre.javase from resolution ====

Since execution environments and system packages are now correctly handled, and {{bug|387701}} got fixed in Tycho 1.2; Tycho removes the extra (and error prone) &lt;tt&gt;a.jre.javase&lt;/tt&gt; units that do not match current execution environment. Older products that have a hard requirement on those IUs instead of using an &lt;tt&gt;osgi.ee&lt;/tt&gt; capability requirement will now face some issues at being resolved. The corresponding &lt;tt&gt;a.jre.javase&lt;/tt&gt; units will need to be added to the target-platform for the product to resolve, or -better- the requirements on such units should be plainly removed.

==== target-platform-configuration has more built-in documentation ====

{{bug|563162}} Some dummy no-op mojo was associated with the target-platfrom-configuration, to provide better assistance and documentation in the editor.

=== Support other (file-based) Locations in .target files ===

{{bug|538144}} - Until now it was only possible to use P2 based Update-sites with Tycho, from now on the other location types (Directory, Feature, Installation) are also supported. Feel free to test and give feedback if there is something missing!

If using this feature the following things should be taken into account:

* Because of the nature of file based locations you probably always wan't to include the target project in the reactor build when you reference files from that project as the reactor build is the only source for tycho to find 'projects'. The same applies if you reference other projects.
* only a very small subset of the available variables are supported at the moment: Environment Variables, System-Properties and Project references, if you feel something essential is missing please open a bug so we can add support for this.

=== Support for multiple .target files in eclipse-target-definition modules, with classifier ===

{{bug|461284}} - until now the target-packaging only has supported exactly one target file to be installed that must be named exactly like the artifactId this has now changed to the following contract:

* the target-packaging install all targets found in the root with the &quot;primary artifact&quot; as the artifact and all other files as additional artifacts with classifier
* if multiple targets are there to install, there must be one target named like the artifactId that is chosen as the &quot;primary artifact&quot;
* if only one target is present, it will be picked up as &quot;primary artifact&quot; regardless of the name of the target file
* using classifiers in the target platform-configuration one can select a different target to be used

&lt;source lang=&quot;xml&quot;&gt;
&lt;configuration&gt;
	&lt;target&gt;
	&lt;artifact&gt;
		&lt;groupId&gt;org.eclipse&lt;/groupId&gt;
		&lt;artifactId&gt;org.eclipse.project.target&lt;/artifactId&gt;
		&lt;version&gt;1.0.0&lt;/version&gt;
		&lt;classifier&gt;neon&lt;/classifier&gt; &lt;!-- Use filename, without .target --&gt;
	&lt;/artifact&gt;
	&lt;/target&gt;
&lt;/configuration&gt;
&lt;/source&gt;

=== Unlink compiler levels from execution environemnt ===

The compilation levels are derived from explicit sources like Bundle-RequiredExecutionEnvironment or related settings in build.properties or pom.xml, and are not affected any more by the execution environment that is used to resolve dependencies. So you can set executionEnvironment to JavaSE-11, have a bundle with BREE=JavaSE-1.8, and Java 1.8 will be used as compile source/target level without extra configuration.

=== Define Maven Project properties in build.properties ===

{{bug|532575}} - it is now possible to add &lt;tt&gt;pom.model.property.&amp;lt;property&gt;=&amp;lt;value&gt;&lt;/tt&gt; to build.properties to define/override a property in the pom.xml

=== Pomless ===
==== Support multiple product files ====
{{bug|562887}} - pomless now automatically discover multiple product files and generates appropriate configuration to build them in one step</text>
      <sha1>muv57sj9lmps2l7rjsbd27mlszdgu5t</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/2.1</title>
    <ns>0</ns>
    <id>60853</id>
    <revision>
      <id>442862</id>
      <parentid>442212</parentid>
      <timestamp>2021-04-04T17:16:43Z</timestamp>
      <contributor>
        <username>Kevloral.gmail.com</username>
        <id>23466</id>
      </contributor>
      <comment>The new option is not 'automated' but 'wrapAsBundle': https://git.eclipse.org/r/c/tycho/org.eclipse.tycho/+/169894/3/tycho-core/src/main/java/org/eclipse/tycho/core/TargetPlatformConfiguration.java#47</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4357">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/2.0|&amp;lt; Previous Version]] | [[Tycho/Release Notes/2.2|Next Version &amp;gt;]]&lt;/div&gt;

&lt;!--
== SNAPSHOT builds ==

Tycho 2.1.0-SNAPSHOT is currently in development. To try out the most recent snapshot build, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.1.0-SNAPSHOT&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;tycho-snapshots&lt;/id&gt;
      &lt;url&gt;https://repo.eclipse.org/content/repositories/tycho-snapshots/&lt;/url&gt;
    &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;

=== SNAPSHOT site docs ===
 
Refer to the [https://ci.eclipse.org/tycho/job/tycho-sitedocs/ws/target/staging/index.html latest SNAPSHOT site docs for Tycho] and [https://ci.eclipse.org/tycho/job/tycho.extras-sitedocs/ws/target/staging/index.html Tycho Extras].

== Staging build ==

Tycho 2.1.0 is currently staged for release. To try out the release candidate, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.1.0&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
  &lt;pluginRepository&gt;
    &lt;id&gt;tycho-staged&lt;/id&gt;
    &lt;url&gt;https://oss.sonatype.org/content/repositories/orgeclipsetycho-1064/&lt;/url&gt;
  &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;
--&gt;

[[Category:Tycho|Release Notes/2.1]]

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=2.1.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 2.1.0]

=== Automatic determination of --release compiler argument based on BREE ===

{{bug|561363}} '''tycho-compiler-plugin''' now determines the '''maven.compiler.release''' property (&lt;tt&gt;--release&lt;/tt&gt; compiler argument) automatically based on the BREE.

This ensures ABI compatibility when targeting older Java versions by setting a correct bootclasspath ([http://openjdk.java.net/jeps/247 JEP 247]).

Note: This automatism might not be desired in some situations. For example when referencing internal JDK packages (e.g. using an OSGI framework extension bundle) &lt;tt&gt;--release&lt;/tt&gt; can not be used, because the bootclasspath set by it does not include those internal packages. For these scenarios, an new configuration option &lt;tt&gt;&amp;lt;deriveReleaseCompilerArgumentFromTargetLevel&amp;gt;false&amp;lt;/deriveReleaseCompilerArgumentFromTargetLevel&amp;gt;&lt;/tt&gt; was introduced to disable this automatic determination.

=== Automatic generation of OSGi metadata for maven dependencies ===

As described [https://wiki.eclipse.org/Tycho/Target_Platform#.22POM_dependencies_consider.22 here] tycho can use maven dependencies for requirement-resolution. Until now it was only possible to use those that where already OSGi-Bundles.
With {{bug|567098}} a new option ''wrapAsBundle'' was added that allows to use even non-osgi artifacts with the following rules

* if the artifact is already an OSGi bundle it is used as is
* if the artifact is '''not''' an OSGi bundle but a regular jar it gets automatic meta-data generated using [https://bnd.bndtools.org/chapters/390-wrapping.html BND]
* to prevent confusion with official artifacts, the BSN is derived by first using the groupId of the module, append the groupId of the artifact and the artifactId. The version is used as-is with adjustments to form a proper OSGi manifest version.
* all required packages are imported as optional dependencies, so it is the responsibility of the user to add all necessary ones to the running target in advance.
* all packages of the jar are exported with the version of the bundle.


This feature might be enhanced in the future, feedback is welcome, but not meant to replace p2 or proper crafted OSGi-Artifacts. It can help of integration with 3rd-party libraries that are not (yet) bundles and/or available as official p2 update-site, especially in rapid-prototyping scenarios.
That's why it uses a very generic, open approach and we hope to help people adopting tycho/OSGi more easy with it.</text>
      <sha1>pikii7oejg4vv6b88hnmwh3gx470sfl</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/2.2</title>
    <ns>0</ns>
    <id>61050</id>
    <revision>
      <id>442215</id>
      <parentid>442213</parentid>
      <timestamp>2021-01-18T14:11:19Z</timestamp>
      <contributor>
        <username>Guillaume.duff.gmail.com</username>
        <id>22434</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5876">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/2.1|&amp;lt; Previous Version]] | [[Tycho/Release Notes/2.3|Next Version &amp;gt;]]&lt;/div&gt;

&lt;!--

== SNAPSHOT builds ==

Tycho 2.2.0-SNAPSHOT is currently in development. To try out the most recent snapshot build, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.2.0-SNAPSHOT&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;tycho-snapshots&lt;/id&gt;
      &lt;url&gt;https://repo.eclipse.org/content/repositories/tycho-snapshots/&lt;/url&gt;
    &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;

=== SNAPSHOT site docs ===
 
Refer to the [https://ci.eclipse.org/tycho/job/tycho-sitedocs/lastSuccessfulBuild/artifact/target/staging/index.html latest SNAPSHOT site docs for Tycho].

== Staging build ==

Tycho 2.2.0 is currently staged for release. To try out the release candidate, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.1.0&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
  &lt;pluginRepository&gt;
    &lt;id&gt;tycho-staged&lt;/id&gt;
    &lt;url&gt;https://oss.sonatype.org/content/repositories/orgeclipsetycho-1064/&lt;/url&gt;
  &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;
--&gt;

[[Category:Tycho|Release Notes/2.2]]

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=2.2.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 2.2.0]&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;

=== Support for m2e PDE Maven target locations ===

{{bug|568729}}, {{bug|569481}} m2e includes a new feature that allows the usage of regular maven artifacts to be used in PDE target platforms. Support for this new location type was also added to tycho, you could read more about this new feature in the following [https://xn--lubisoft-0za.gmbh/en/articles/using-maven-artifacts-in-pde-rcp-and-tycho-builds/ article].

=== Allow parallel dependency resolving ===

{{bug|568446}} When using [https://cwiki.apache.org/confluence/display/MAVEN/Parallel+builds+in+Maven+3 parallel builds] the initial dependency resolution is now also executed in parallel.

=== Delay download of p2 artifacts for non-plugin modules ===

{{bug|567760}} Tycho now stops downloading p2 artifacts from remote sources too early and relies mostly on p2 metadata to compute target platform and build order without downloading the artifacts. Downloads are then instead delayed to when the artifact files are really necessary (to compute compilation build path, to generate a p2 repository...). As a result performance will be improved as less artifacts may be downloaded, and some steps like `mvn clean` or `mvn validate` can avoid downloading artifacts to process, and the most probable build failures will be reported faster.

Note that this is specifically visible for &lt;tt&gt;eclipse-feature&lt;/tt&gt; and &lt;tt&gt;eclipse-repository&lt;/tt&gt; modules; other module types like &lt;tt&gt;eclipse-plugin&lt;/tt&gt; or &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt; do still require to downlaod artifacts early to create the build path. Further improvements remain possible on that topic.

=== Tycho Source Feature Generation moved from tycho extras to tycho core ===

{{bug|568359}} Historically the tycho-source-feature-plugin was located in tycho extras but could be confusing because they often are used in conjunction with to each other because a source-bundle is hardly useful without corresponding source-feature. With the merge of tycho-core and tycho-extras these separation becomes even more obsolete.

From now on, the tycho-source-plugin also includes the tycho-source-feature-plugin, the old one is deprecated and will be removed in the next major release.

Migration is rather simple, just add a new execution to the tycho-source-plugin
&lt;source lang=&quot;xml&quot;&gt;
&lt;plugin&gt;
	&lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
	&lt;artifactId&gt;tycho-source-plugin&lt;/artifactId&gt;
	&lt;version&gt;${tycho-version}&lt;/version&gt;
	&lt;executions&gt;
	    &lt;execution&gt;
		&lt;id&gt;plugin-source&lt;/id&gt;
		&lt;goals&gt;
		    &lt;goal&gt;plugin-source&lt;/goal&gt;
		&lt;/goals&gt;
	    &lt;/execution&gt;
	     &lt;execution&gt;
		&lt;id&gt;feature-source&lt;/id&gt;
		&lt;goals&gt;
		    &lt;goal&gt;feature-source&lt;/goal&gt;
		&lt;/goals&gt;
		&lt;configuration&gt;
		&lt;!-- put your configuration here --&gt;
		&lt;/configuration&gt;
	    &lt;/execution&gt;
	&lt;/executions&gt;
&lt;/plugin&gt;
&lt;/source&gt;

Beside this, the new mojo does support one additional configuration option 'missingSourcesAction' that can have one of the following two values:
* FAIL: this is like the old mojo works, any missing source bundle that is not excluded will fail the build
* WARN: this is the default, a warning will be omitted listing all missing plugins/features that are not excluded

=== Support for consuming maven artifacts made of zipped P2 update sites ===

{{bug|398238}} Tycho now supports in target files and in &lt;repository&gt; elements URLs of the form mvn:groupId:artifactId:version[:packaging[:classifier]] to be used for a repository.

For example
 &lt;repository&gt;
  &lt;id&gt;activiti&lt;/id&gt;
  &lt;layout&gt;p2&lt;/layout&gt;
  &lt;url&gt;mvn:org.activiti.designer:org.activiti.designer.updatesite:5.11.1:zip&lt;/url&gt;
 &lt;/repository&gt;

=== Support for excluding files in build.properties ===

{{bug|568623}} Tycho now supports in build properties files to exclude files in library.

For example
 output.mycodelib.jar = bin/
 bin.includes = META-INF/,\
               mycodelib.jar
 
 source.mycodelib.jar = src/
 exclude.mycodelib.jar = **/*.txt</text>
      <sha1>hfbx9j2z8cwagngssiudzw41scfqawe</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/2.3</title>
    <ns>0</ns>
    <id>61194</id>
    <revision>
      <id>442775</id>
      <parentid>442773</parentid>
      <timestamp>2021-03-31T07:25:36Z</timestamp>
      <contributor>
        <username>Mistria.redhat.com</username>
        <id>12101</id>
      </contributor>
      <comment>/* New and Noteworthy */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6360">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/2.2|&amp;lt; Previous Version]] | [[Tycho/Release Notes/2.4|Next Version &amp;gt;]]&lt;/div&gt;

&lt;!--
== SNAPSHOT builds ==

Tycho 2.3.0-SNAPSHOT is currently in development. To try out the most recent snapshot build, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.3.0-SNAPSHOT&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;tycho-snapshots&lt;/id&gt;
      &lt;url&gt;https://repo.eclipse.org/content/repositories/tycho-snapshots/&lt;/url&gt;
    &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;

=== SNAPSHOT site docs ===
 
Refer to the [https://ci.eclipse.org/tycho/job/tycho-sitedocs/lastSuccessfulBuild/artifact/target/staging/index.html latest SNAPSHOT site docs for Tycho].

== Staging build ==

Tycho 2.3.0 is currently staged for release. To try out the release candidate, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.3.0&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
  &lt;pluginRepository&gt;
    &lt;id&gt;tycho-staged&lt;/id&gt;
    &lt;url&gt;https://oss.sonatype.org/content/repositories/orgeclipsetycho-1066/&lt;/url&gt;
  &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;
--&gt;
[[Category:Tycho|Release Notes/2.2]]

== New and Noteworthy ==

[https://bugs.eclipse.org/bugs/buglist.cgi?classification=Technology&amp;product=Tycho&amp;query_format=advanced&amp;target_milestone=2.3.0&amp;order=bug_id&amp;query_based_on= Complete list of bug fixes and enhancements in 2.3.0-SNAPSHOT]&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;

=== Official Equinox Resolver used for dependency resolution (stricter and can produce errors for split packages) ===

{{bug|570189}} Tycho now uses the same resolver as Equinox uses at runtime. This resolver is stricter and more correct than the previous one, and as a result should provide resolution results that are much more consistent with actual dependency resolution at runtime.

However, this change makes {{bug|403196}} more visible in some cases with split package, for example
&lt;pre&gt;
  Unresolved requirement: Require-Bundle: org.eclipse.equinox.security
    -&gt; Bundle-SymbolicName: org.eclipse.equinox.security; bundle-version=&quot;1.3.600.v20210126-1005&quot;; singleton:=&quot;true&quot;
       org.eclipse.equinox.security [1]
         Unresolved requirement: Import-Package: org.eclipse.core.runtime; registry=&quot;split&quot;
&lt;/pre&gt;
which means that the p2 resolution succeeds while it actually failed at providing the &lt;tt&gt;Import-Package: org.eclipse.core.runtime; registry=&quot;split&quot;&lt;/tt&gt; and later OSGi resolution will find it's missing and complain.&lt;br&gt;
In such case, the workaround/solution is to ensure that the bundle that provides &lt;tt&gt;Import-Package: org.eclipse.core.runtime; registry=&quot;split&quot;&lt;/tt&gt; gets added as part of p2 resolution despite {{bug|403196}}, typically by adding &lt;tt&gt;org.eclipse.equinox.registry&lt;/tt&gt; to the &lt;tt&gt;Required-Bundle&lt;/tt&gt; of the bundles being built, or by adding it to &lt;tt&gt;target-platform-configuration&lt;/tt&gt; as described in https://www.eclipse.org/tycho/sitedocs/target-platform-configuration/target-platform-configuration-mojo.html#dependency-resolution .

=== Enable reuse of workspace by tycho-eclipserun-plugin ===

{{bug|570477}}, The &lt;tt&gt;tycho-eclipserun-plugin&lt;/tt&gt; now has a configuration-parameter named &lt;tt&gt;clearWorkspaceBeforeLaunch&lt;/tt&gt; to specify if the workspace should be cleared before running eclipse or not (default is &lt;tt&gt;true&lt;/tt&gt;, matching the behavior until now). If the value is &lt;tt&gt;false&lt;/tt&gt;, the workspace of the previous run is reused (if present), if the value is &lt;tt&gt;true&lt;/tt&gt; the workspace-directory (i.e. the 'data' directory within the &lt;tt&gt;work&lt;/tt&gt;-directory) and its content is deleted.

=== A mojo to &quot;fix&quot; modified metadata in artifact repository (artifacts modified after after aggregation) ===

The [https://ci.eclipse.org/tycho/job/tycho-sitedocs/lastSuccessfulBuild/artifact/target/staging/tycho-p2/tycho-p2-repository-plugin/fix-artifacts-metadata-mojo.html org.eclipse.tycho:tycho-p2-repository-plugin:fix-artifacts-metadata] was added. It updates the artifact repository metadata checksums and size of modified artifacts in the given folder. This can be used if some other mojo (e.g. jar-signer) modifies the repository artifacts after the assemble-repository step. An example could be found in the [https://github.com/eclipse/tycho/tree/master/tycho-its/projects/jar-signing-extra jar-signing-extra] integration test

=== A mojo to remap Maven artifacts to Maven URLs in artifact repository ===

The [https://ci.eclipse.org/tycho/job/tycho-sitedocs/lastSuccessfulBuild/artifact/target/staging/tycho-p2/tycho-p2-repository-plugin/remap-artifacts-to-m2-repo-mojo.html org.eclipse.tycho:tycho-p2-repository-plugin:remap-artifacts-to-m2-repo] was added. It modifies the artifact metadata of the provided p2 repository by adding extra mapping rules for artifacts the can be resolved to Maven repositories so the URL under Maven repository is used for fetching and artifact is not duplicated inside this repo. See [https://git.eclipse.org/c/tycho/org.eclipse.tycho.git/tree/tycho-its/projects/p2Repository.mavenRepo/pom.xml#n28 this example].

=== Target files can be specified directly now ===

{{bug|571520}} allow to specify a target file as an alternative to a target artifact

  &lt;plugin&gt;
    &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
    &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
    &lt;version&gt;${tycho-version}&lt;/version&gt;
    &lt;configuration&gt;
      &lt;target&gt;
        &lt;file&gt;jetty.target&lt;/file&gt;
      &lt;/target&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;

=== Multi-platform product packaging ===

{{bug|572082}}, allow applications to use bundle pools in order to have a &quot;cross platform&quot; installation structure without duplicating the bundles. To activate the multi-platform package, simply add &lt;tt&gt;&lt;multiPlatformPackage&gt;true&lt;/multiPlatformPackage&gt;&lt;/tt&gt; to the product definition in the &lt;tt&gt;pom.xml&lt;/tt&gt; file.</text>
      <sha1>t0r6k4yl95u8a195ezcue0u32099c3q</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Notes/2.4</title>
    <ns>0</ns>
    <id>61260</id>
    <revision>
      <id>443418</id>
      <parentid>442774</parentid>
      <timestamp>2021-06-04T08:12:37Z</timestamp>
      <contributor>
        <username>Mistria.redhat.com</username>
        <id>12101</id>
      </contributor>
      <comment>/* New and Noteworthy */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1716">&lt;css&gt;
  #main-page-content{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; border-color: transparent; background: transparent; }
&lt;/css&gt;
&lt;div id=&quot;versionNav&quot; class=&quot;alert alert-small alert-warning&quot;&gt;[[Tycho/Release Notes/2.3|&amp;lt; Previous Version]] | [[Tycho/Release Notes/2.5|Next Version &amp;gt;]]&lt;/div&gt;

== SNAPSHOT builds ==

Tycho 2.4.0-SNAPSHOT is currently in development. To try out the most recent snapshot build, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.4.0-SNAPSHOT&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;tycho-snapshots&lt;/id&gt;
      &lt;url&gt;https://repo.eclipse.org/content/repositories/tycho-snapshots/&lt;/url&gt;
    &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;

=== SNAPSHOT site docs ===
 
Refer to the [https://ci.eclipse.org/tycho/job/tycho-sitedocs/lastSuccessfulBuild/artifact/target/staging/index.html latest SNAPSHOT site docs for Tycho].
&lt;!--
== Staging build ==

Tycho 2.4.0 is currently staged for release. To try out the release candidate, simply add the following snippet to your (parent) pom.xml or settings.xml, and set the property for the Tycho version (e.g. &lt;tt&gt;tycho-version&lt;/tt&gt;) to &lt;tt&gt;2.4.0&lt;/tt&gt;.
 
&lt;source lang=&quot;xml&quot;&gt;
&lt;pluginRepositories&gt;
  &lt;pluginRepository&gt;
    &lt;id&gt;tycho-staged&lt;/id&gt;
    &lt;url&gt;https://oss.sonatype.org/content/repositories/orgeclipsetycho-1066/&lt;/url&gt;
  &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;/source&gt;
--&gt;
[[Category:Tycho|Release Notes/2.4]]

== New and Noteworthy ==

Starting for 2.4, Release notes are stored in https://github.com/eclipse/tycho/blob/master/RELEASE_NOTES.md</text>
      <sha1>looanvqfgxe6wylz8wlm19ffmdncxun</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Release Workflow</title>
    <ns>0</ns>
    <id>56408</id>
    <revision>
      <id>431020</id>
      <parentid>430998</parentid>
      <timestamp>2019-03-08T14:11:16Z</timestamp>
      <contributor>
        <username>Simon.scholz.vogella.com</username>
        <id>17745</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12915">
=Doing a Tycho project release with the maven-release-plugin=
This is a small tutorial that describes what configuration changes need to be done to use the maven-release-plugin (http://maven.apache.org/maven-release/maven-release-plugin/index.html) to release a Tycho project. 
If you are not familiar with the maven-release-plugin visit the plugin website to get an overview of how the release plugin works.

==Prerequisite==
The easiest way to get an example Tycho project is to use one of the tycho-demo repository. In this tutorial the '''itp01''' Tycho project is used. In order to demonstrate the release process including comitting and pushing, you have to fork and clone the tycho-demo project from github:

1) Fork the https://github.com/eclipse/tycho-demo repository

2) Clone the forked repository:
	
  git clone https://github.com/&lt;yourgithubuser&gt;/tycho-demo.git

3) Open the parent pom.xml file of the project: &lt;pathToLocalGitRepo&gt;/itp01/pom.xml.

===Configure the SCM=== 
The maven release plugin does commit and push the changes done during the release process (pom version changes, tagging, etc), so you have to add the scm information to that pom:

  &lt;scm&gt;
    &lt;connection&gt;scm:git:https://github.com/&lt;yourgithubuser&gt;/tycho-demo.git&lt;/connection&gt;
    &lt;developerConnection&gt;scm:git:https://github.com/&lt;yourgithubuser/tycho-demo.git&lt;/developerConnection&gt;
  &lt;/scm&gt;
	
The credentials used by the maven scm plugin are taken from the settings.xml file, so add a server configuration to your &lt;tt&gt;~/.m2/settings.xml&lt;/tt&gt; file:

   &lt;servers&gt;  
      &lt;server&gt;
         &lt;id&gt;github.com&lt;/id&gt;  
         &lt;username&gt;YOUR_GITHUB_USERNAME&lt;/username&gt;  
         &lt;password&gt;YOUR_GITHUB_PASSWORD&lt;/password&gt;  
      &lt;/server&gt;   
   &lt;/servers&gt;
   
Note that the &lt;id&gt; must match the hostname so it must be &quot;github.com&quot;.
Also note that YOUR_GITHUB_PASSWORD should be a Personal Access Token from &gt; Settings &gt; Developer settings &gt; Personal access tokens. Usually the normal github password will not work.

===Configure the Tycho version===
To use Tycho in combination with maven-release-plugin, the goal &quot;update-eclipse-metadata&quot; is required, which is available since release 1.1.0. Therefore, the following property should be set and used for configuring Tycho plugin versions in your build:

  &lt;tycho-version&gt;1.1.0&lt;/tycho-version&gt;

===Target Platfrom Configuration===

In case a target definition file is part of the build reactor the target definition project should have the same version as the ${project.version} maven variable, because then the target-platform-configuration could look like this:

  &lt;plugin&gt;
    &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
    &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
    &lt;version&gt;${tycho.version}&lt;/version&gt;
    &lt;configuration&gt;
     &lt;target&gt; 
        &lt;artifact&gt;
            &lt;groupId&gt;com.vogella.tycho&lt;/groupId&gt;
            &lt;artifactId&gt;com.vogella.tycho.target&lt;/artifactId&gt;
            &lt;version&gt;''${project.version}''&lt;/version&gt;
        &lt;/artifact&gt;
    &lt;/target&gt;
  &lt;!-- .. and more ... --&gt;

Without this the build will fail since the old version of the target definition cannot be found any more because the target definition project's version will also change during a release build.

==Configure the maven-release-plugin==	

The maven-release-plugin does have a goal called &quot;'''prepare'''&quot; which does different things, including:

a) Changing the version in the poms from x-SNAPSHOT to a new version (you will be prompted for the version to use)

b) Commit (and push) the modified poms

c) Bump the version in the poms to a new value y-SNAPSHOT (these values will also be prompted for)

Step a) does update the versions only in the pom.xml files, so without any additional configuration the MANIFEST/feature/product files would still have the .qualifier versions in them and a build will fail because the pom and MANIFEST versions have to match.
We have to use the new goal of the tycho-version-plugin to update the versions in the MANIFEST/feature/product files based on their respective pom versions. The maven-release-plugin does have a configuration parameter called '''&quot;preparationGoals&quot;'''. 
All maven goals listed there are executed after the POM versions had been changed (and before committing). So this is the place where the tycho-versions-plugin must update the MANIFEST/feature/product files to their respective pom versions.
Step b) does commit the modified POMs. Because the maven-release-plugin does only commit the pom files and not the changed MANIFEST/feature/product files, we have to call 2 additional goals to add and commit the changed eclipse files using the maven-scm-plugin (goals '''&quot;add&quot;''' and '''&quot;checkin&quot;''').

So the configuration of the maven-release-plugin does look like this: 

  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.5.3&lt;/version&gt;
    &lt;configuration&gt;
      &lt;preparationGoals&gt;org.eclipse.tycho:tycho-versions-plugin:${tycho-version}:update-eclipse-metadata org.apache.maven.plugins:maven-scm-plugin:1.9.5:add org.apache.maven.plugins:maven-scm-plugin:1.9.5:checkin&lt;/preparationGoals&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;
			
Three additional goals are called after the POM versions had been changed: '''update-eclipse-metadata''' to update the MANIFEST/feature/product/update site files to the new version, '''add''' the changed files to the git changeset, '''checkin''' (=commit and push) the changed Eclipse/OSGi files.
To make sure, that the maven-scm-plugin does only add, commit and push the MANIFEST/feature/product files, you could configure the maven-scm-plugin with a &quot;default-cli&quot; execution with an include pattern:
			
  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-scm-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
      &lt;execution&gt;
        &lt;id&gt;default-cli&lt;/id&gt;
        &lt;goals&gt;
          &lt;goal&gt;add&lt;/goal&gt;
          &lt;goal&gt;checkin&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
          &lt;!-- Add all MANIFEST.MF, feature.xml, .product and category.xml files (for update sites) files to the git change (excluding all target folders) --&gt;
          &lt;includes&gt;**/META-INF/MANIFEST.MF,**/feature.xml,**/*.product,**/category.xml&lt;/includes&gt;
          &lt;excludes&gt;**/target/**&lt;/excludes&gt;
        &lt;message&gt;Changing the version to reflect the pom versions for the release&lt;/message&gt;
        &lt;/configuration&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
  &lt;/plugin&gt;

Step c) is quite the same as step a). It changes the pom versions (to the new development version). So again the tycho-version-plugin must also change the MANIFEST/feature/product/update site files after that happened and that changed files must also be committed and pushed. 
For additional steps that needs to be done after the pom versions get bumped to the new development version, the maven-release-plugin's configuration parameter '''&quot;completionGoals&quot;''' could be used:

The maven-release-plugin configuration with the '''preparationGoals''' and '''completionGoals''':
  
  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.5.3&lt;/version&gt;
    &lt;configuration&gt;
      &lt;preparationGoals&gt;org.eclipse.tycho:tycho-versions-plugin:${tycho-version}:update-eclipse-metadata org.apache.maven.plugins:maven-scm-plugin:1.9.5:add org.apache.maven.plugins:maven-scm-plugin:1.9.5:checkin&lt;/preparationGoals&gt;
      &lt;completionGoals&gt;org.eclipse.tycho:tycho-versions-plugin:${tycho-version}:update-eclipse-metadata org.apache.maven.plugins:maven-scm-plugin:1.9.5:add org.apache.maven.plugins:maven-scm-plugin:1.9.5:checkin&lt;/completionGoals&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;
	
==Commit the changed pom==
You could not perform or prepare a release on a dirty worktree, so you have to commit the changes you have done in the pom file, e.g:

  git add pom.xml
  git commit -m &quot;Adding release configurations&quot;
  git push

==Prepare the release==
Now you should be ready to use the maven-release-plugin for this Tycho project and you could run: 

  mvn release:prepare 
		
When calling &lt;tt&gt;mvn release:prepare&lt;/tt&gt; you will be asked for the release version for each bundle, for the tag that should be used for this release and for the new development versions.
There are parameters that could be used to set this things for your project, so that the preparation could be executed without user input. The release version and the following development version is specified as follows:

  mvn release:prepare -DreleaseVersion=1.0.0 -DdevelopmentVersion=1.0.1-SNAPSHOT

==Performing a release==
When the preparation was done successfully, you could call the perform goal in order to checkout the created release tag, build the project, run the tests and deploy the artifacts. In this tutorial we focus on the release preparation, not where and how to publish the release
so configuring the distribution management is out of scope. To perform a release that just builds the release artifacts and installs them in your local maven repository, use the '''&quot;goals&quot;''' parameter of the maven-release-plugin's '''&quot;perform&quot;''' goal:

  mvn release:perform -Dgoals=&quot;clean install&quot;
	
After the build succeeds, you do have a '''&quot;target&quot;''' folder in the project's root directory, containing the release artefacts and they got installed in your local maven repository.

==Parent pom for the tycho-demo/itp01 project==
This is the pom file containing all our changes:

    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
  &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;tycho.demo.itp01&lt;/groupId&gt;
    &lt;artifactId&gt;parent&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;
  
    &lt;modules&gt;
        &lt;module&gt;tycho.demo.itp01&lt;/module&gt;
        &lt;module&gt;tycho.demo.itp01.tests&lt;/module&gt;
    &lt;/modules&gt;
  
    &lt;properties&gt;
        &lt;tycho-version&gt;1.1.0&lt;/tycho-version&gt;
    &lt;/properties&gt;
  
    &lt;scm&gt;
        &lt;connection&gt;scm:git:https://github.com/mschreiber/tycho-demo.git&lt;/connection&gt;
        &lt;developerConnection&gt;scm:git:https://github.com/mschreiber/tycho-demo.git&lt;/developerConnection&gt;
        &lt;tag&gt;HEAD&lt;/tag&gt;
    &lt;/scm&gt;
  
    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;helios&lt;/id&gt;
            &lt;layout&gt;p2&lt;/layout&gt;
            &lt;url&gt;http://download.eclipse.org/releases/helios&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
                &lt;artifactId&gt;tycho-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${tycho-version}&lt;/version&gt;
                &lt;extensions&gt;true&lt;/extensions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.5.3&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;preparationGoals&gt;org.eclipse.tycho:tycho-versions-plugin:${tycho-version}:update-eclipse-metadata org.apache.maven.plugins:maven-scm-plugin:1.9.5:add org.apache.maven.plugins:maven-scm-plugin:1.9.5:checkin&lt;/preparationGoals&gt;
                    &lt;completionGoals&gt;org.eclipse.tycho:tycho-versions-plugin:${tycho-version}:update-eclipse-metadata org.apache.maven.plugins:maven-scm-plugin:1.9.5:add org.apache.maven.plugins:maven-scm-plugin:1.9.5:checkin&lt;/completionGoals&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-scm-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;default-cli&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;add&lt;/goal&gt;
                            &lt;goal&gt;checkin&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;includes&gt;**/META-INF/MANIFEST.MF, **/feature.xml, **/*.product,**/category.xml&lt;/includes&gt;
                            &lt;excludes&gt;**/target/**&lt;/excludes&gt;
                            &lt;message&gt;Changing the Eclipse files versions&lt;/message&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
  &lt;/project&gt;


		
==Drawbacks==
* Rollback does not rollback the MANIFEST/feature/product/update site changes. 
* The changes in the pom (done by the release plugin) and in the MANIFEST/feature/product/update site files (done by the tycho plugin) are committed in 2 commits.

=Unleash maven plugin=
There is another maven plugin available which is worth looking at, the unleash-maven-plugin: https://github.com/shillner/unleash-maven-plugin

[[Category:Tycho|Release Workflow]]</text>
      <sha1>d7ydj4o9sr94ockt3mmfalstl15joum</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Releasing Nexus Unzip Plugin</title>
    <ns>0</ns>
    <id>40306</id>
    <revision>
      <id>329873</id>
      <parentid>329370</parentid>
      <timestamp>2013-02-28T11:27:45Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>Order by last segment of name in Tycho category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1978">This page describes the steps necessary to create releases of the Nexus Unzip Plugin project. 

*Prepare the [[Tycho/Unzip Plugin Release Notes]] which should provide a quick overview of new features and bug fixes 
*Update versions using &lt;br/&gt;
 mvn org.eclipse.tycho:tycho-versions-plugin:set-version -DnewVersion=...
*Commit version change, create a git tag &lt;tt&gt;unzip-plugin-&amp;lt;VERSION&amp;gt;&lt;/tt&gt; on this commit and create a new remote branch &lt;tt&gt;unzip-plugin-MAJOR.MINOR.x&lt;/tt&gt; based on this commit in [http://git.eclipse.org/c/tycho/org.eclipse.tycho.nexus.git/ git] 
*Update versions (same as above) to next &lt;tt&gt;-SNAPSHOT&lt;/tt&gt; development version and push commit to &lt;tt&gt;master&lt;/tt&gt; branch 
*Make sure you have everything setup (GPG installed!) for deploying to the Nexus OSS repository, see [https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide guide] 
*Add your credentials for server &lt;tt&gt;&amp;lt;OSS_ID&amp;gt;&lt;/tt&gt; in &lt;tt&gt;~/.m2/settings.xml&lt;/tt&gt; 
*Sync to release commit and deploy to nexus staging repository: &lt;br/&gt;
 mvn clean deploy -Prelease -DaltDeploymentRepository=&amp;lt;OSS_ID&amp;gt;::default::https://oss.sonatype.org/service/local/staging/deploy/maven2/
*Close the staging repository and announce the temporary stage URL on tycho-user@eclipse.org:&lt;tt&gt;&lt;br/&gt;Subject:&amp;nbsp;please test staged nexus unzip plugin  &amp;lt;VERSION&amp;gt; &lt;br/&gt;&lt;br/&gt;Please help testing the staged Nexus Unzip Plugin release &amp;lt;VERSION&amp;gt;. &lt;br/&gt;The staging repository URL is [1]. For details see release notes[2].&lt;br/&gt;&lt;br/&gt; We plan to promote this release in one week unless major regressions are found.&lt;br/&gt;&lt;br/&gt;Regards,&lt;br/&gt;  Tycho team&lt;br/&gt; &lt;br/&gt;  [1] &amp;lt;NEXUS_OSS_STAGING_URL&amp;gt;&lt;br/&gt; [2] http://wiki.eclipse.org/Tycho/Unzip_Plugin_Release_Notes/&amp;lt;VERSION&amp;gt;&lt;/tt&gt;
*Announce the release on tycho-user@eclipse.org, tycho-dev@eclipse.org and the [http://www.eclipse.org/tycho tycho homepage new and noteworthy section]

[[Category:Tycho|Releasing Nexus Unzip Plugin]]</text>
      <sha1>gaeiyg1r59tkhdpacbyod6pyal2gobr</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Target Platform</title>
    <ns>0</ns>
    <id>33765</id>
    <revision>
      <id>443654</id>
      <parentid>442731</parentid>
      <timestamp>2021-07-20T05:39:58Z</timestamp>
      <contributor>
        <username>Jeremie.bresson.unblu.com</username>
        <id>10923</id>
      </contributor>
      <minor/>
      <comment>The tycho demo repository no longer exists</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10274">The target platform is the set of artifacts from which Tycho resolves the project's dependencies. 

Background: OSGi allows to specify dependencies with version ranges and package dependencies (&lt;tt&gt;Import-Package&lt;/tt&gt;). These dependencies (intentionally) do not map to unique artifacts. In order to pick a set of concrete bundles to be used for compilation, test execution, and assembly, Tycho needs a set of candidate artifacts which may be used to match the dependencies. This list of candidate artifacts is called the &quot;target platform&quot;. The process of selecting artifacts from the target platform according to the project's dependencies is called &quot;dependency resolution&quot;.

There are different ways to define the content of the target platform; the most common ones are repositories with layout=p2 in the POM, which add entire p2 repositories to the target platform, or target definition files for more fine-grained control.

== Which approach shall I use for the target platform of my project? ==

There are a few different ways to configure a target platform in Tycho. These rules of thumb should help you to pick the right approach for your project:
# If you are already using a target file in Eclipse, and that target file only contains &quot;Software Site&quot; locations (i.e. &lt;tt&gt;location&lt;/tt&gt; elements with &lt;tt&gt;type=&quot;InstallableUnit&quot;&lt;/tt&gt;), use that target file for the Tycho build. This approach is the only way to share the same target platform configuration between Tycho and Eclipse.
# If you want to get your Tycho build up and running quickly, just configure the needed p2 repositories in the POM and have Tycho pick anything required from these repositories. A good starting point should be to add one of the [[Eclipse Project Update Sites#Simultaneous_Release_repositories|Simultaneous Release repositories]].
# If you want to exert control over the which bundles/bundle versions may be used by the build, use a target file and have it select the sub-set of features and bundles from a p2 repository that you want. Using a target file instead of p2 repositories in the POM may also speed up the build because fewer bundles in the target platform will often lead to a faster dependency resolution.

== Target platform configuration ==

The target platform is defined through POM configuration (see details below). Each module has its own target platform, although with the normal configuration inheritance in Maven, the target platform configurations are usually the same across multiple modules.

&lt;div id=&quot;Layout_p2&quot;&gt;
=== Simple target platform configuration ===

In order allow Tycho to resolve the project dependencies against anything from a specific p2 repository, add that repository in the &lt;tt&gt;&amp;lt;repositories&amp;gt;&lt;/tt&gt; section of the POM. Example:
&lt;pre&gt;
&lt;repository&gt;
   &lt;id&gt;eclipse-indigo&lt;/id&gt;
   &lt;url&gt;http://download.eclipse.org/releases/indigo&lt;/url&gt;
   &lt;layout&gt;p2&lt;/layout&gt;
&lt;/repository&gt;
&lt;/pre&gt;

In terms of the target platform, this means that the entire content of the p2 repositories specified in this way become part of the target platform.

Background: In a normal (i.e. non-Tycho) Maven project, one can configure Maven repositories which can be used by Maven to resolve the project dependencies. While Maven repositories cannot be used directly (see [[#&quot;POM dependencies consider&quot;|below]] for an indirect approach), Tycho can use p2 repositories for resolving OSGi dependencies. The p2 repositories need to be marked with layout=p2. (The normal Maven dependency resolution ignores repositories with layout=p2.)
&lt;/div&gt;

=== Target files ===

The PDE target definition file format (*.target) allows to select a subset of units (bundles, features, etc.) from one or more p2 repositories. In order to add the content of a target definition file (see &quot;Content&quot; tab of the Target Editor) to the target platform in the Tycho build, place the target file in a [[Tycho/Packaging Types#eclipse-target-definition|eclipse-target-definition]] module and configure it in the &lt;tt&gt;target-platform-configuration&lt;/tt&gt; build plugin. Example:
&lt;pre&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
   &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
   &lt;version&gt;${tycho-version}&lt;/version&gt;
   &lt;configuration&gt;
      &lt;target&gt;
         &lt;artifact&gt;
            &lt;groupId&gt;org.example&lt;/groupId&gt;
            &lt;artifactId&gt;target-definition&lt;/artifactId&gt;
            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
         &lt;/artifact&gt;
      &lt;/target&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/pre&gt;

Since Tycho 0.17.0, it is also possible to configure multiple target files by specifying more than one &lt;tt&gt;&amp;lt;artifact&amp;gt;&lt;/tt&gt; reference. Tycho interprets these target files independently and in the same way as in Eclipse: Each of the configured target files need to resolve successfully when opened in the Eclipse Target Editor. Note that the use of this Tycho feature is limited because the Eclipse PDE currently does ''not'' support activating more than one target file at once (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=392652 bug 392652]).

&lt;p&gt;'''Note:''' Tycho's interpretation of the target definition file format differs from the PDE in the following aspects:
* The selection on the Content tab of the Target Editor is ignored. [[#Filtering|See below]] for an alternative way to remove individual bundles from the target platform.
* The option &quot;Include source if available&quot; is considered only if &lt;tt&gt;target-platform-configuration&lt;/tt&gt; parameter &lt;tt&gt;targetDefinitionIncludeSource&lt;/tt&gt; is set to &lt;tt&gt;honor&lt;/tt&gt; (default value). If &lt;tt&gt;targetDefinitionIncludeSource&lt;/tt&gt; is set to &lt;tt&gt;force&lt;/tt&gt; then available sources are always included and if set to &lt;tt&gt;ignore&lt;/tt&gt; then available sources are always ignored.
&lt;/p&gt;

&lt;p&gt;'''Related Information'''
* [http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Fguide%2Ftools%2Ftarget_shared%2Flocation_edit_site_wizard.htm Target editor documentation]; section on [http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Fguide%2Ftools%2Ftarget_shared%2Flocation_edit_site_wizard.htm &quot;Software Site&quot; locations]
&lt;/p&gt;

&lt;div id=&quot;POM_Dependencies&quot;&gt;

=== Extra requirements ===

See https://ci.eclipse.org/tycho/job/tycho-sitedocs/lastSuccessfulBuild/artifact/target/staging/target-platform-configuration/target-platform-configuration-mojo.html#dependency-resolution

=== &quot;POM dependencies consider&quot; ===

See https://www.eclipse.org/tycho/sitedocs/target-platform-configuration/target-platform-configuration-mojo.html#pomDependencies .

For an example, see the POM of this [https://github.com/eclipse/tycho/blob/master/demo/itp02/build02 demo project].

== Effective content of the target platform ==

In case multiple target platform configuration approaches are combined, the target platform contains the union of the content defined through each approach.

Apart from the explicitly configured content, the target platform also contains the following artifacts:
* Other artifacts from the same [[Tycho/Glossary#Reactor|reactor]]
* Locally built artifacts in the local Maven repository

Finally, it is possible to remove artifacts again from the target platform through a filtering syntax.

=== Locally built artifacts ===

Just like in a normal Maven build, a Tycho build can use artifacts that have been built locally and installed (e.g. with &lt;tt&gt;mvn clean install&lt;/tt&gt;) into the local Maven repository. In terms of the target platform, this means that these artifacts are implicitly added to the target platform. This is for example useful if you want to rebuild a part of a Tycho reactor, or if you want to build against a locally built, newer version of an upstream project.

There are the following options to disable this feature:
* Setting the CLI option &lt;tt&gt;-Dtycho.localArtifacts=ignore&lt;/tt&gt; excludes locally built artifacts in one build. (&lt;tt&gt;tycho.localArtifacts=ignore&lt;/tt&gt; may also be configured in the &lt;tt&gt;settings.xml&lt;/tt&gt;; in this case, the default behaviour can be temporarily re-enabled with the CLI option &lt;tt&gt;-Dtycho.localArtifacts=default&lt;/tt&gt;. Since Tycho 0.16.0.)
* Deleting &lt;tt&gt;~/.m2/repository/.meta/p2-local-metadata.properties&lt;/tt&gt; resets Tycho's list of locally build artifacts, and therefore these artifacts will not be added to target platforms (unless, of course, the artifacts are installed again).

=== Filtering ===

See https://ci.eclipse.org/tycho/job/tycho-sitedocs/lastSuccessfulBuild/artifact/target/staging/target-platform-configuration/target-platform-configuration-mojo.html#filters

== Dependency resolution troubleshooting ==

TODO 

Run mvn with the flags &lt;tt&gt;-Dtycho.debug.resolver=true&lt;/tt&gt; and &lt;tt&gt;-X&lt;/tt&gt; to see debug output.

This will debug
* Properties
* Available IUs
* JRE IUs
* Root IUs

=== Listing IUs available ===

To list all the available IUs in an Eclipse repository (e.g. indigo), run:

&lt;pre&gt;
$ java -jar plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar -debug -consolelog -application org.eclipse.equinox.p2.director -repository http://download.eclipse.org/releases/indigo/ -list
&lt;/pre&gt;

Command running with Luna and list Luna Repository
&lt;pre&gt;
$ java -jar plugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar -debug -consolelog -application org.eclipse.equinox.p2.director -repository http://download.eclipse.org/releases/luna/ -list
&lt;/pre&gt;

* Java is used (instead of the eclipse binary) so that the console output appears in the shell window instead of a spawned window
* Make sure your shell is inside the Eclipse root directory
* You will need to replace that version number for &lt;tt&gt;org.eclipse.equinox.launcher&lt;/tt&gt; with the one found inside your Eclipse installation.
* You will need to replace the Eclipse repository with the one you want a list of.

This can be used to double check availability of bundle versions, and compare with what Nexus thinks is available with the source Eclipse repository.

=== Browsing a p2 repository ===

* In Eclipse, open the &quot;Repository Explorer&quot; view. If it is not available, then please install Oomph first: https://projects.eclipse.org/projects/tools.oomph/downloads
* There is also a graphical p2 browser (java webstart app) available on [https://github.com/ifedorenko/p2-browser github].
Just follow the instructions in the README to start it.

[[Category:Tycho|Target Platform]]</text>
      <sha1>icr3mrus8wxp08ny0mahj311enbuaju</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Target Platform/Authentication and Mirrors</title>
    <ns>0</ns>
    <id>37626</id>
    <revision>
      <id>412178</id>
      <parentid>403253</parentid>
      <timestamp>2016-11-25T16:34:25Z</timestamp>
      <contributor>
        <username>M.schreiber.bachmann.info</username>
        <id>17515</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3509">Similar to what is possible Maven, you can influence how Tycho accesses remote p2 repositories through configuration parameters in the [http://maven.apache.org/settings.html Maven settings.xml].

&lt;div id=&quot;Credentials&quot;&gt;
=== Credentials for p2 Repositories ===

In order to specify user name and password for a p2 repository requiring basic authentication, add a &lt;tt&gt;&amp;lt;server&amp;gt;&lt;/tt&gt; entry in the &lt;tt&gt;settings.xml&lt;/tt&gt;.

&lt;pre&gt;
&lt;servers&gt;
   &lt;server&gt;
      &lt;id&gt;repository-id&lt;/id&gt;
      &lt;username&gt;&lt;/username&gt;
      &lt;password&gt;&lt;/password&gt;
   &lt;/server&gt;
&lt;/servers&gt;
&lt;/pre&gt;

When accessing a p2 repository, Tycho will check if there is a &lt;tt&gt;&amp;lt;server&amp;gt;&lt;/tt&gt; entry with matching ID and use these credentials. The ID of a p2 repository can be specified explicitly, e.g. when the repository is [[Tycho/Target Platform#Layout p2|added in the POM]]. If no ID is specified, e.g. in a target file, the repository URL (without trailing slash) is used as ID (since Tycho 0.16.0).
&lt;/div&gt;

&lt;div id=&quot;Mirrors&quot;&gt;
=== Loading p2 Repositories from Alternative Locations ===

In order to load a p2 repository from an alternative location, e.g. a local mirror of the repository, add a &lt;tt&gt;&amp;lt;mirror&amp;gt;&lt;/tt&gt; configuration entry in the &lt;tt&gt;settings.xml&lt;/tt&gt;. Example:

&lt;pre&gt;
&lt;mirrors&gt;
   &lt;mirror&gt;
      &lt;id&gt;mirror-id&lt;/id&gt;
      &lt;mirrorOf&gt;repository-id&lt;/mirrorOf&gt;
      &lt;url&gt;http://mirror_url&lt;/url&gt;
      &lt;layout&gt;p2&lt;/layout&gt;
      &lt;mirrorOfLayouts&gt;p2&lt;/mirrorOfLayouts&gt;
   &lt;/mirror&gt;
&lt;/mirrors&gt;
&lt;/pre&gt;

Like for credentials, the repository ID is either the configured ID or the URL of the repository (without trailing slash). Note that &lt;tt&gt;mirrorOf&lt;/tt&gt; supports multiple elements separated by commas.

Note: Mirrors for repositories specified in target files are only supported since Tycho 0.16.0 (see [https://bugs.eclipse.org/bugs/show_bug.cgi?id=356016 bug 356016]).

=== Mirroring multiple Repositories ===
If you have multiple repositories pointing to different update site on the same host and you want to load all of them from an alternative location, you do not have to specify a mirror for each of them. You could use the the common part of the URL as &lt;tt&gt;mirrorOf&lt;/tt&gt; (instead of the repository id in a regular mirror definition) and all repositories starting with that URL prefix would get mirrored. The remaining part will be added to the &lt;tt&gt;mirrorOf&lt;/tt&gt; URL. 

Example: 

If you have 2 repositories:

&lt;pre&gt;
   &lt;repository&gt;
      &lt;id&gt;myrepo1&lt;/id&gt;
      &lt;url&gt;http://www.eclipse.org/release/path1/updatesite1&lt;/url&gt;
      &lt;layout&gt;p2&lt;/layout&gt;
   &lt;/repository&gt;
   &lt;repository&gt;
      &lt;id&gt;myrepo2&lt;/id&gt;
      &lt;url&gt;http://www.eclipse.org/release/path2/updatesite2&lt;/url&gt;
      &lt;layout&gt;p2&lt;/layout&gt;
   &lt;/repository&gt;
&lt;/pre&gt;

And you want to mirror both of them, you could specify the mirror in your settings.xml like that:

&lt;pre&gt;
   &lt;mirror&gt;
      &lt;id&gt;example-mirror&lt;/id&gt;
      &lt;mirrorOf&gt;http://www.eclipse.org/release&lt;/mirrorOf&gt;
      &lt;url&gt;http://mirror.example.com/eclipse-mirror&lt;/url&gt;
      &lt;layout&gt;p2&lt;/layout&gt;
      &lt;mirrorOfLayouts&gt;p2&lt;/mirrorOfLayouts&gt;
   &lt;/mirror&gt;
&lt;/pre&gt;

Having that mirror configured in your settings.xml, your repositories will point to the following URLs:

&lt;tt&gt;http://mirror.example.com/eclipse-mirror/path1/updatesite1&lt;/tt&gt; and

&lt;tt&gt;http://mirror.example.com/eclipse-mirror/path2/updatesite2&lt;/tt&gt;.

Note: For using that kind of mirrors you must use Tycho 0.27.0 or above (see: https://bugs.eclipse.org/bugs/show_bug.cgi?id=501809 Bug 501809)

[[Category:Tycho|Target Platform/Authentication and Mirrors]]</text>
      <sha1>e0nd4s2vl6bllnjtsj6u21e18f4xgwt</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Testing with Surefire</title>
    <ns>0</ns>
    <id>42885</id>
    <revision>
      <id>348787</id>
      <parentid>348770</parentid>
      <timestamp>2013-10-09T10:25:24Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <comment>minor rewording</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8068">Maven doc is available at: http://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html . But this page will cover concepts and advanced features of the tycho-surefire-plugin:

== Dependency resolution and Test Runtime ==

In order to execute tests, Tycho needs an OSGi runtime which contains:
* the test bundle
* dependencies of the test bundle
* (optionally) dependencies added as [http://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#dependencies dependencies] in configuration of tycho-surefire-plugin
* Tycho test harness (org.eclipse.tycho.surefire.osgibooter) and its dependencies

There are various strategies possible for creating the OSGi runtime. They are controlled by the parameter [http://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#testRuntime testRuntime] of tycho-surefire-plugin. For easiest and maximal benefit of testing during build, it's recommended to not set this &lt;tt&gt;testRuntime&lt;/tt&gt; property and leave it to default in the main tycho-surefire-plugin configuration that will run on your &lt;tt&gt;eclipse-test-plugin&lt;/tt&gt;. Other strategies are aimed at allowing &quot;batch&quot; testing and can/should be configured into profiles dedicated to this use-case, not made default.

=== Default behaviour: Create OSGi runtime from target platform ===

By default, Tycho looks inside the [[../Target Platform|target platform]] to resolve the dependencies, and creates an RCP application in &lt;tt&gt;${project.build.directory}/work&lt;/tt&gt; (except if you did override the [http://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#work work] parameter of tycho-surefire-plugin). You can see the application definition in the &lt;tt&gt;work/config&lt;/tt&gt; folder. The list of plugins used in the application can be read in the &lt;tt&gt;osgi.bundles&lt;/tt&gt; property of the &lt;tt&gt;config.ini&lt;/tt&gt; file.

This strategy guarantees that you run your application with the very minimal set of necessary plugins. It ensures better isolation for your test as it avoids side-effects from unnecessary plugins, It also helps to make your tests faster using the minimum number of bundles and referencing existing bundles on the filesystem rather than copying them for test runtime installation. This is why it is the recommended configuration for default tycho-surefire-plugin execution.

Note that this OSGi runtime is not installed using p2. So code that expects any RCP application to be p2-installed may fail with Tycho whereas it works in Eclipse. In such case, it is recommended that you inspect your code and find out whether you can replace usage of p2 to introspect your application by pure usage of OSGi Platform APIs.&lt;br/&gt;
Also, this application doesn't have the standard layout (with a plugins directory) so it may also confuse other pieces of code expecting a standard layout to work well. For example, it makes PDE have an empty target platform by default, leading to failed builds in test workspace: https://bugs.eclipse.org/bugs/show_bug.cgi?id=343156 . Recommended workaround is to make you test set up a good target platform.

=== p2Installed on provisioned RCP application ===

This mode allows you to run the test against an already provisioned p2-friendly RCP application. It is pretty useful as it allows to reuse the configuration of the test defined in your pom.xml, but against an application which is already existing. Use cases for this strategy can be:
* Testing against all the contents of the product you are developing, and see whether some side-effects prevent test from working
* Testing against an older/newer version of the product you are developing
* Testing against another product than the one you are developing

The important parameters to configure such a strategy:
* &lt;tt&gt;&lt;testRuntime&gt;p2Installed&lt;/testRuntime&gt;&lt;/tt&gt; tells surefire that it won't have to create an application, but instead to run inside the chosen application
* &lt;tt&gt;&lt;profileName&gt;...&lt;/profileName&gt;&lt;/tt&gt; is the name of the p2 profile of the application. You can read find the profiles installed in your application in &lt;tt&gt;path/to/application/p2/org.eclipse.equinox.p2.engine/profileRegistry/&lt;/tt&gt;. Default profile can be found in &lt;tt&gt;configuration/config.ini&lt;/tt&gt; as the value of the &lt;tt&gt;eclipse.p2.profile&lt;/tt&gt; property. Some example of profileNames include: ''epp.package.rcp, epp.package.jee, jbds'' ...
* &lt;tt&gt;&lt;work&gt;/path/to/application&lt;/work&gt;&lt;/tt&gt; is the location of the application where to run tests. You can either change the value of this parameter, or decide to populate the default location (&lt;tt&gt;${project.build.directory}/work&lt;/tt&gt;) with your application to test, by copying it or unzipping it there.

What happens in that case is that Tycho will ask p2 to install the necessary dependencies in your application. As it re-uses the p2 profile, it will only install the dependencies that are not already available in your test runtime. Other dependencies will be installed from the module [[../Target Platform|target platform]].

Here is an example of pom file using this
&lt;source lang=&quot;xml&quot;&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
        &lt;parent&gt;
                &lt;groupId&gt;org.jboss.tools.ws&lt;/groupId&gt;
                &lt;artifactId&gt;tests&lt;/artifactId&gt;
                &lt;version&gt;1.5.0-SNAPSHOT&lt;/version&gt;
        &lt;/parent&gt;
        &lt;groupId&gt;org.jboss.tools.ws.tests&lt;/groupId&gt;
        &lt;artifactId&gt;org.jboss.tools.ws.core.test&lt;/artifactId&gt;

        &lt;packaging&gt;eclipse-test-plugin&lt;/packaging&gt;

        &lt;profiles&gt;
                &lt;profile&gt;
                        &lt;id&gt;run-on-jbds&lt;/id&gt;
                        &lt;build&gt;
                                &lt;plugins&gt;
                                        &lt;plugin&gt;
                                                &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
                                                &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
                                                &lt;version&gt;${tychoVersion}&lt;/version&gt;
                                                &lt;configuration&gt;
                                                        &lt;testRuntime&gt;p2Installed&lt;/testRuntime&gt;
                                                        &lt;work&gt;/home/mistria/jbdevstudio-7.1.0.Alpha2/studio&lt;/work&gt;
                                                        &lt;profileName&gt;jbds&lt;/profileName&gt;
                                                &lt;/configuration&gt;
                                        &lt;/plugin&gt;
                                &lt;/plugins&gt;
                        &lt;/build&gt;
                &lt;/profile&gt;
        &lt;/profiles&gt;
&lt;/project&gt;
&lt;/source&gt;
With this example &lt;tt&gt;mvn clean verify -Prun-on-jbds&lt;/tt&gt; will compile test against target platform, then install it inside profile &lt;tt&gt;jbds&lt;/tt&gt; of application located at &lt;tt&gt;/home/mistria/jbdevstudio-7.1.0.Alpha2/studio&lt;/tt&gt; and then run the test there. As the application already contains most of the dependencies for this test to run, they will be reused and no new one will get installed.

As this is quite a different behaviour from the default one and as it as strong assumptions on the pre-existence of the test runtime, it's definitely better to configure this in a profile, as you can still benefit from simplicity and efficiency of default behaviour.

=== p2Installed with reference to a p2 product IU ===

Tycho will use p2 to generate an application available in the [[../Target Platform|target platform]] for the given [http://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#profileName profileName]. This application will be provisioned in the location specified by [http://www.eclipse.org/tycho/sitedocs/tycho-surefire/tycho-surefire-plugin/test-mojo.html#work work] parameter. Then it will perform the steps explained above to install necessary bundle in this application and run tests.

[[Category:Tycho|Testing]]</text>
      <sha1>p7r3qikn9rrlkrk0esrpkv8e9x1lzyt</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho</title>
    <ns>0</ns>
    <id>32433</id>
    <revision>
      <id>444516</id>
      <parentid>444515</parentid>
      <timestamp>2021-12-17T08:23:20Z</timestamp>
      <contributor>
        <username>Mistria.redhat.com</username>
        <id>12101</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="300">This is the Wiki root page of the [https://github.com/eclipse/tycho Tycho project]. An index of all documentation pages is available on the [[:Category:Tycho]] page.

Tycho is hosted at GitHub, see README and CONTRBUTING files in https://github.com/eclipse/tycho for more details.

[[Category:Tycho]]</text>
      <sha1>n8xh21zfq6rvmuxhqptegu8n7pmdt1t</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Plugins Explained</title>
    <ns>0</ns>
    <id>40316</id>
    <revision>
      <id>447957</id>
      <parentid>381749</parentid>
      <timestamp>2023-11-08T11:04:14Z</timestamp>
      <contributor>
        <username>Frederic.gurr.eclipse-foundation.org</username>
        <id>7488</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16813">{{caution|This page is incomplete|Please feel free to continue listing the Tycho plugins found in the eclipse-parent pom.  The goal is to provide a complete description of all the components used in the file.}}

The purpose of this page is to document the various Tycho plugins for Maven and how they are used in the Eclipse build process.  This page is meant to be a landing page (cheat sheet) for the plugins and will not necessarily contain the information directly.  Most of this information is already available in various forum posts and email threads.  This page is merely a centralized location to aggregate (not duplicate) links to and summaries of the information users desire.

The [http://git.eclipse.org/c/platform/eclipse.platform.releng.aggregator.git/tree/eclipse-platform-parent/pom.xml eclipse-parent pom] is the base pom file for most Eclipse projects (not including the [http://maven.apache.org/ref/3-LATEST/maven-model-builder/super-pom.html Super POM]).  It contains many plugins from [http://eclipse.org/tycho/ Tycho] and [http://wiki.eclipse.org/CBI CBI] that are useful in other production environments.  As new information and plugins become available we will try to update this page as best as possible.

== Plugins: ==

==== eclipse-cbi-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        ...
      &lt;/plugin&gt;
    
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;eclipse-cbi-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.0.0&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;goals&gt;
              &lt;goal&gt;generate-api-build-xml&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== eclipse-jarsigner-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;eclipse-sign&lt;/id&gt;
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plguin&gt;
            ...
          &lt;/plugin&gt;
          
          &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;eclipse-jarsigner-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.0.2&lt;/version&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;id&gt;sign&lt;/id&gt;
                &lt;goals&gt;
                  &lt;goal&gt;sign&lt;/goal&gt;
                &lt;/goals&gt;
                &lt;phase&gt;verify&lt;/phase&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== target-platform-configuration ====
Insert Brief Description

References
*see thread: [http://dev.eclipse.org/mhonarc/lists/tycho-user/msg03232.html What's org.eclipse.tycho:target-platform-configuration about?]
*see bug: [https://bugs.eclipse.org/bugs/show_bug.cgi?id=353889 Defer target&amp;dependency resolution to the normal build]

Examples
{| width=&quot;100%&quot; cellspacing=&quot;6&quot; border=&quot;0&quot;
| width=&quot;45%&quot; valign=&quot;top&quot; | 
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        ...
      &lt;/plugin&gt;
    
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;environments&gt;
            &lt;environment&gt;
              &lt;os&gt;linux&lt;/os&gt;
              &lt;ws&gt;gtk&lt;/ws&gt;
              &lt;arch&gt;x86&lt;/arch&gt;
            &lt;/environment&gt;
            &lt;environment&gt;
              &lt;os&gt;linux&lt;/os&gt;
              &lt;ws&gt;gtk&lt;/ws&gt;
              &lt;arch&gt;x86_64&lt;/arch&gt;
            &lt;/environment&gt;
            &lt;environment&gt;
              &lt;os&gt;win32&lt;/os&gt;
              &lt;ws&gt;win32&lt;/ws&gt;
              &lt;arch&gt;x86&lt;/arch&gt;
            &lt;/environment&gt;
            &lt;environment&gt;
              &lt;os&gt;win32&lt;/os&gt;
              &lt;ws&gt;win32&lt;/ws&gt;
              &lt;arch&gt;x86_64&lt;/arch&gt;
            &lt;/environment&gt;
            &lt;environment&gt;
              &lt;os&gt;macosx&lt;/os&gt;
              &lt;ws&gt;cocoa&lt;/ws&gt;
              &lt;arch&gt;x86_64&lt;/arch&gt;
            &lt;/environment&gt;
          &lt;/environments&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;

| width=&quot;10%&quot; valign=&quot;top&quot; | 
  
| width=&quot;45%&quot; valign=&quot;top&quot; | 
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;

  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;eclipse-sign&lt;/id&gt;
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
            &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
            &lt;version&gt;${tycho.version}&lt;/version&gt;
            &lt;configuration&gt;
              &lt;includePackedArtifacts&gt;true&lt;/includePackedArtifacts&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
|}


== Plugins: ==

{{note|Tycho plugin documentation|The information below does not describe the Tycho plugins in general, but only their use in the Eclipse Platform/CBI build. The general Tycho plugin documentation is here: [https://www.eclipse.org/tycho/sitedocs/ Tycho Site Docs], [https://www.eclipse.org/tycho/sitedocs-extras/ Tycho Extras Site Docs]}}

==== tycho-buildtimestamp-jgit ====
Use this plugin to generate stable version qualifiers.  Instead of creating a version qualifier based on the time of the actual build, the version qualifier is based on the most recent commit.  When configured with an associated p2 repository, the same artifact id/version are guaranteed to represent the same artifact contents. The advantage being only those plugins whose contents materially changed are downloaded during a p2 update.

References
[http://wiki.eclipse.org/Tycho/Reproducible_Version_Qualifiers Reproducible Version Qualifiers]
[http://dev.eclipse.org/mhonarc/lists/tycho-user/msg04214.html Re: [tycho-user] build-qualifier-aggregator failed: One of setGitDir or setWorkTree must be called]

Examples
[http://wiki.eclipse.org/Tycho/Reproducible_Version_Qualifiers#Configuration_.28just_copy.26paste.21.29 Reproducible Version Qualifiers - Configuratioin]


====  tycho-compiler-plugin ====
Insert Brief Description

References

Examples
{| width=&quot;100%&quot; cellspacing=&quot;6&quot; border=&quot;0&quot;
| width=&quot;45%&quot; valign=&quot;top&quot; | 
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-compiler-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;org.eclipse.jdt&lt;/groupId&gt;
              &lt;artifactId&gt;org.eclipse.jdt.core&lt;/artifactId&gt;
              &lt;version&gt;${cbi-jdt-version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
          &lt;configuration&gt;
            &lt;showWarnings&gt;true&lt;/showWarnings&gt;
            &lt;compilerArguments&gt;
              &lt;inlineJSR/&gt;
              &lt;enableJavadoc/&gt;
              &lt;encoding&gt;${project.build.sourceEncoding}&lt;/encoding&gt;
              &lt;proceedOnError/&gt;
              &lt;log&gt;${project.build.directory}/@dot.xml&lt;/log&gt;
            &lt;/compilerArguments&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;

| width=&quot;10%&quot; valign=&quot;top&quot; | 
  
| width=&quot;45%&quot; valign=&quot;top&quot; | 
  &lt;code&gt;&lt;nowiki&gt;&lt;profiles&gt;
    &lt;profile&gt;
      ...
    &lt;/profile&gt;
    
    &lt;profile&gt;
      &lt;id&gt;bree-libs&lt;/id&gt;
      &lt;build&gt;
        &lt;pluginManagement&gt;
          &lt;plugins&gt;
            &lt;plugin&gt;
              &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
              &lt;artifactId&gt;tycho-compiler-plugin&lt;/artifactId&gt;
              &lt;version&gt;${tycho.version}&lt;/version&gt;
              &lt;configuration&gt;
                &lt;useJDK&gt;BREE&lt;/useJDK&gt;
              &lt;/configuration&gt;
            &lt;/plugin&gt;
          &lt;/plugins&gt;
        &lt;/pluginManagement&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;&lt;/nowiki&gt;&lt;/code&gt;
|}


==== tycho-custom-bundle-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-custom-bundle-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho-extras.version}&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== tycho-maven-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${tycho.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== tycho-p2-director-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-p2-director-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== tycho-p2-plugin ====
Insert Brief Description

References

Examples
{| width=&quot;100%&quot; cellspacing=&quot;6&quot; border=&quot;0&quot;
| width=&quot;45%&quot; valign=&quot;top&quot; | 
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-p2-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
          &lt;configuration&gt;
            &lt;baselineMode&gt;warn&lt;/baselineMode&gt;
            &lt;baselineReplace&gt;none&lt;/baselineReplace&gt;
            &lt;baselineRepositories&gt;
              &lt;repository&gt;
                &lt;url&gt;${comparator.repo}&lt;/url&gt;
              &lt;/repository&gt;
            &lt;/baselineRepositories&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;
  
| width=&quot;10%&quot; valign=&quot;top&quot; | 

| width=&quot;45%&quot; valign=&quot;top&quot; | 
  &lt;code&gt;&lt;nowiki&gt;&lt;profiles&gt;
    &lt;profile&gt;
      ...
    &lt;/profile&gt;
    
    &lt;profile&gt;
      &lt;id&gt;eclipse-sign&lt;/id&gt;
      &lt;build&gt;
        &lt;pluginManagement&gt;
          &lt;plugins&gt;
            &lt;plugin&gt;
              ...
            &lt;/plugin&gt;
          
            &lt;plugin&gt;
              &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
              &lt;artifactId&gt;tycho-p2-plugin&lt;/artifactId&gt;
              &lt;version&gt;${tycho.version}&lt;/version&gt;
              &lt;executions&gt;
                &lt;execution&gt;
                  &lt;id&gt;p2-metadata&lt;/id&gt;
                  &lt;goals&gt;
                    &lt;goal&gt;p2-metadata&lt;/goal&gt;
                  &lt;/goals&gt;
                  &lt;phase&gt;verify&lt;/phase&gt;
                &lt;/execution&gt;
              &lt;/executions&gt;
              &lt;configuration&gt;
                &lt;defaultP2Metadata&gt;false&lt;/defaultP2Metadata&gt;
              &lt;/configuration&gt;
            &lt;/plugin&gt;
          &lt;/plugins&gt;
        &lt;/pluginManagement&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;&lt;/nowiki&gt;&lt;/code&gt;
|}


==== tycho-p2-repository-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-p2-repository-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== tycho-pack200a-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;eclipse-sign&lt;/id&gt;
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plguin&gt;
            ...
          &lt;/plugin&gt;
          
          &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
            &lt;artifactId&gt;tycho-pack200a-plugin&lt;/artifactId&gt;
            &lt;version&gt;${tycho-extras.version}&lt;/version&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;id&gt;pack200-normalize&lt;/id&gt;
                &lt;goals&gt;
                  &lt;goal&gt;normalize&lt;/goal&gt;
                &lt;/goals&gt;
                &lt;phase&gt;verify&lt;/phase&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== tycho-pack200b-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;eclipse-sign&lt;/id&gt;
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plguin&gt;
            ...
          &lt;/plugin&gt;
          
          &lt;plugin&gt;
            &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
            &lt;artifactId&gt;tycho-pack200b-plugin&lt;/artifactId&gt;
            &lt;version&gt;${tycho-extras.version}&lt;/version&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;id&gt;pack200-pack&lt;/id&gt;
                &lt;goals&gt;
                  &lt;goal&gt;pack&lt;/goal&gt;
                &lt;/goals&gt;
                &lt;phase&gt;verify&lt;/phase&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== tycho-packaging-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-packaging-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
              &lt;artifactId&gt;tycho-buildtimestamp-jgit&lt;/artifactId&gt;
              &lt;version&gt;${tycho-extras.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
              &lt;artifactId&gt;tycho-sourceref-jgit&lt;/artifactId&gt;
              &lt;version&gt;${tycho-extras.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
          &lt;configuration&gt;
            &lt;strictBinIncludes&gt;false&lt;/strictBinIncludes&gt;
            &lt;format&gt;'v'yyyyMMdd-HHmm&lt;/format&gt;
            &lt;timestampProvider&gt;jgit&lt;/timestampProvider&gt;
            &lt;!--jgit.ignore&gt;
        pom.xml
            &lt;/jgit.ignore--&gt;
            &lt;sourceReferences&gt;
              &lt;generate&gt;true&lt;/generate&gt;
            &lt;/sourceReferences&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;


==== tycho-source-feature-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-source-feature-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho-extras.version}&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;
  

==== tycho-source-plugin ====
Insert Brief Description

References

Examples
{| width=&quot;100%&quot; cellspacing=&quot;6&quot; border=&quot;0&quot;
| width=&quot;45%&quot; valign=&quot;top&quot; | 
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        ...
      &lt;/plugin&gt;
    
      &lt;plugin&gt;
        &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-source-plugin&lt;/artifactId&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;plugin-source&lt;/id&gt;
            &lt;goals&gt;
              &lt;goal&gt;plugin-source&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;

| width=&quot;10%&quot; valign=&quot;top&quot; | 
  
| width=&quot;45%&quot; valign=&quot;top&quot; | 
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-source-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
          &lt;configuration&gt;
            &lt;strictSrcIncludes&gt;false&lt;/strictSrcIncludes&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;

|}


==== tycho-surefire-plugin ====
Insert Brief Description

References

Examples
  &lt;code&gt;&lt;nowiki&gt;&lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          ...
        &lt;/plugin&gt;
    
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-surefire-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;&lt;/nowiki&gt;&lt;/code&gt;

  
[[Category:Tycho|Tycho]]</text>
      <sha1>lyc98bgw30dg2ehx3581aqjpom4rvwo</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/How Tos</title>
    <ns>0</ns>
    <id>37439</id>
    <revision>
      <id>303875</id>
      <timestamp>2012-05-30T02:10:45Z</timestamp>
      <contributor>
        <username>Baerrach.gmail.com</username>
        <id>1294</id>
      </contributor>
      <comment>New page: * [[Tycho/How Tos/Dependency on pom-first artifacts]]  [[Category:Tycho]][[Category:Tycho/How To]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="98">* [[Tycho/How Tos/Dependency on pom-first artifacts]]

[[Category:Tycho]][[Category:Tycho/How To]]</text>
      <sha1>iy11muw3oezb7mm93funzohrkr4le2p</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Reproducible Version Qualifiers</title>
    <ns>0</ns>
    <id>38107</id>
    <revision>
      <id>445234</id>
      <parentid>438421</parentid>
      <timestamp>2022-03-15T11:36:57Z</timestamp>
      <contributor>
        <username>Jan.poganski+eclipse.outlook.com</username>
        <id>17942</id>
      </contributor>
      <minor/>
      <comment>/* Feature version qualifiers */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8094">=== &quot;Executive&quot; summary ===

* Only produce new artifact version when there are changes. 
* Generate the same version qualifier when building from the same git commit.
* Guarantee consistent artifact id, version and contents.
* Available since Tycho 0.16

=== Configuration (just copy&amp;paste!) ===

    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-packaging-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;
              &lt;artifactId&gt;tycho-buildtimestamp-jgit&lt;/artifactId&gt;
              &lt;version&gt;${tycho-extras.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
          &lt;configuration&gt;
            &lt;!--
              Generate version qualifier using timestamp of the most recent git commit that touches any file
              under project basedir.
            --&gt;
            &lt;timestampProvider&gt;jgit&lt;/timestampProvider&gt;
            &lt;!--
              Do not consider changes to pom.xml file when calculating most recent git commit. 
              Avoid failure from uncommitted temporary polyglot files. 
            --&gt;
            &lt;jgit.ignore&gt;
              pom.xml
              .polyglot.build.properties
            &lt;/jgit.ignore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
          &lt;artifactId&gt;tycho-p2-plugin&lt;/artifactId&gt;
          &lt;version&gt;${tycho.version}&lt;/version&gt;
          &lt;configuration&gt;
            &lt;!--
              Compare build results with artifacts available from baseline p2 repositories.
              Fail the build if baseline repositories contain artifact with the same id/version but different content.
              Replace build artifacts with baseline versions if id, version and contents are the same.
            --&gt;
            &lt;baselineRepositories&gt;
              &lt;repository&gt;
                &lt;url&gt;[some url]&lt;/url&gt;
              &lt;/repository&gt;
            &lt;/baselineRepositories&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;

=== What does this actually do? ===

Version qualifier is calculated based on timestamp of the most recent commit that touches any file under project base directory.
As of Tycho 0.19.0, by default if any uncommitted changes are detected, the build will fail (see &lt;tt&gt;jgit.dirtyWorkingTree&lt;/tt&gt; option below).
This produces stable version qualifier when building projects from HEAD of a branch and when building projects
from a tagged or any commit in general. To put it differently, version qualifier reflects build contents, not build timestamp. 
Although as of 2012-06-30 this is only implemented for git, it should be possible to provide implementation for other modern version
control systems.

Generated artifacts are then compared to artifacts available from configured baseline repositories.
If baseline repositories contain artifacts with the same id and version and equal contents, the generated artifacts are replaced with baseline version.
If baseline repositories contain artifacts with the same id and version but different contents, depending on &lt;tt&gt;&lt;baselineMode&gt;&lt;/tt&gt;
configuration parameter the build will either fail or generated artifacts will be replaced with baseline version.
If the base repository does not contain artifact with the same id and version, the generated artifacts are used.
In all three cases the same artifact id/version are guaranteed to represent the same artifact contents.

The end result is that build output contains new versions of the artifacts that did change and baseline version of
the artifacts that did not.

=== Rebuilding from tag or, in fact, any commit ===

Use &lt;tt&gt;-Dtycho.baseline.replace=none&lt;/tt&gt; command-line parameter to make sure Tycho does not replace build artifacts with
their corresponding baseline version. Tycho will still validate new build artifacts match corresponding artifacts from
original build and depending on tycho.baseline configuration will either warn or fail the build if there are any 
discrepancies.


=== Dirty working tree behaviour ===

As of Tycho 0.19.0, by default if any uncommitted changes are detected, the build will fail.
Configuration option &lt;tt&gt;jgit.dirtyWorkingTree&lt;/tt&gt; of &lt;tt&gt;tycho-packaging-plugin&lt;/tt&gt; allows to control behaviour in case of uncommitted changes detected for a module:

* &lt;tt&gt;error&lt;/tt&gt; (default): fail the build if git status is not clean. This is useful for production builds to make sure the commit timestamp build qualifier used is really reproducible
* &lt;tt&gt;warning&lt;/tt&gt;: warn about any uncommitted changes and use the current build timestamp as build qualifier for the &quot;dirty&quot; module. This is useful for local builds with uncommitted changes.
* &lt;tt&gt;ignore&lt;/tt&gt;: do not check whether git status is clean and use the timestamp of the last git commit as build qualifier regardless of uncommitted changes done on top. This can be used in case jgit should report a false positive dirty working tree or in case you want to restore pre-0.19.0 behaviour

=== Feature version qualifiers ===

For feature projects, version qualifiers are generated from the last of the timestamp of the most recent commit that touches any file under feature project basedir and timestamps of directly included bundles and features. Timestamps of included bundles and features are derived from their version qualifiers. Besides the configured build qualifier timestamp format, the following timestamp formats occuring anywhere inside the qualifier are recognized since Tycho 0.25.0:

* &lt;code&gt;yyyyMMddHHmm&lt;/code&gt;
* &lt;code&gt;yyyyMMdd-HHmm&lt;/code&gt;
* &lt;code&gt;yyyyMMdd&lt;/code&gt;

Any qualifier that cannot be interpreted as timestamp is ignored.

For the majority of feature projects that generates stable version qualifier that changes when feature contents changes, however manual &quot;bump-version&quot; commit in feature project will be necessary if included bundle/feature changes but its version qualifier cannot be interpreted and therefor ignored.

'''External includes in features'''

Please note that if a feature directly includes bundles or features not part of the same code base but consumed via a target platform, the stability of a reproducible feature version qualifier also depends on the stability of the target platform in addition to the stability of the code base. If a rebuild occurs with a change in target platform, a different feature version qualifier might be generated.

=== Other notes and hints. ===

* Do not use -SNAPSHOT dependencies resolved from Maven repositories. Using RELEASE versions of all external dependencies for Tycho projects
that use reproducible version qualifier this will allow calling any build a fully reproducible release build.
* Maven &lt;tt&gt;-X&lt;/tt&gt; command line option will print list of all files that differ between baseline and build.
* &lt;tt&gt;-Dtycho.debug.artifactcomparator&lt;/tt&gt; can be used to log disassembly of class files that are different between baseline and build. Disassembled class files are written under project target/ directory. The files have &quot;-baseline&quot; and &quot;-build&quot; suffixes and can be compared using 'diff' command line utility of 'Compare with each other' in Eclipse IDE.
* You can optionally use the [https://www.eclipse.org/tycho/sitedocs/tycho-extras/tycho-p2-extras-plugin/compare-version-with-baselines-mojo.html compare-version-with-baselines mojo] on the verify step to add some checks and guarantee that version seems consistent with baselines (either strictly higher or same fully-qualified versions and same content). The baseline set to this mojo is expected to be a ''release'' of your p2 repository.
* If there is more than one file you want to &quot;ignore&quot;, it must be written in a line-delimited &quot;.gitignore&quot; style, with no leading whitespace, as in the following example. But, this may change in a future version, see {{bug|436325}}.
 
&lt;pre&gt;&lt;nowiki&gt;
 &lt;jgit.ignore&gt;pom.xml
 buildnotes_*.html&lt;/jgit.ignore&gt;
&lt;/nowiki&gt;&lt;/pre&gt;


[[Category:Tycho]]</text>
      <sha1>dz9d9tqxhyw4a2r8oboj36ftknoddu5</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho:How to deploy to a Maven repository</title>
    <ns>0</ns>
    <id>61217</id>
    <revision>
      <id>447329</id>
      <parentid>443513</parentid>
      <timestamp>2023-05-11T14:27:01Z</timestamp>
      <contributor>
        <username>Wim.jongman.remainsoftware.com</username>
        <id>4229</id>
      </contributor>
      <comment>/* Organizational */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16594">The typical use case for Tycho builds is to create a p2 Update Site that gets published. In case a project also contains some general artifacts that should be published to a Maven repository like Maven Central via OSSRH, several additional steps are necessary.

== Organizational ==

For deploying to OSSRH it is required that the project has its own Jenkins instance. This is necessary because of the key management.

{{Note|The following information is provided in the [https://wiki.eclipse.org/Jenkins#How_can_artifacts_be_deployed_to_OSSRH_.2F_Maven_Central.3F Jenkins Eclipse Wiki].}}
Deploying artifacts to OSSRH (OSS Repository Hosting provided by Sonatype) requires an account at OSSRH.
It is also required to sign all artifacts with GPG.
The Eclipse IT team will set this up for the project.
For this you need to file a bug via [https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/new the Helpdesk]

The Eclipse IT team will then create a ticket at https://issues.sonatype.org to get a project created so the artifacts can be published to https://oss.sonatype.org

Once the project is setup at https://oss.sonatype.org, the Eclipse IT team will prepare the Jenkins instance of the project. This means the default settings.xml on the server will contain
the necessary information for the server, the credentials and the secret file needed for GPG signing.

You also need to sign up for an account at https://issues.sonatype.org/
This is necessary to comment on the created ticket and to release the artifacts once they are deployed to https://oss.sonatype.org

For the process you should comment on the created OOSRH ticket that you need permission on the created project for deployment and let the Eclipse webmaster add a comment to verify this request.

== Maven Configuration ==

The Maven configuration needs to be extended in order to be able to publish to OSSRH. As not every build should be directly promoted, it is a good practice to have that configuration in a separate profile.

In that profile you need to add the &lt;code&gt;distributionManagement&lt;/code&gt; section and configure the &lt;code&gt;maven-gpg-plugin&lt;/code&gt;.
The &lt;code&gt;distributionManagement&lt;/code&gt; is necessary to configure where to deploy the artifacts. The id 'ossrh' is used in the default settings.xml file in the Jenkins, so it has to be used this way.
The &lt;code&gt;maven-gpg-plugin&lt;/code&gt; is needed to sign the artifacts with the secret provided by Sonatype.

{{Note|Note|With GPG versions &gt; 2.1 the --pinentry-mode loopback needs to be added as gpg argument. If your Jenkins instance is using the migration template, which is needed for example to run UI tests, GPG 2.0.22 is used, which does not know this gpg argument.}}

The following snippet adds the profile &lt;code&gt;maven-publish&lt;/code&gt; to a Jenkins job that is running on centos-7 / migration
&lt;source lang=&quot;xml&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
&lt;profile&gt;
  &lt;id&gt;maven-publish&lt;/id&gt;

  &lt;distributionManagement&gt;
    &lt;snapshotRepository&gt;
      &lt;id&gt;ossrh&lt;/id&gt;
      &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;
    &lt;/snapshotRepository&gt;
    &lt;repository&gt;
      &lt;id&gt;ossrh&lt;/id&gt;
        &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;
      &lt;/repository&gt;
  &lt;/distributionManagement&gt;

  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.6&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;sign-artifacts&lt;/id&gt;
            &lt;phase&gt;verify&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;sign&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/profile&gt;
&lt;/source&gt;

The following snippet adds the profile &lt;code&gt;maven-publish&lt;/code&gt; to a Jenkins job that is running on newer templates
&lt;source lang=&quot;xml&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
&lt;profile&gt;
  &lt;id&gt;maven-publish&lt;/id&gt;

  &lt;distributionManagement&gt;
    &lt;snapshotRepository&gt;
      &lt;id&gt;ossrh&lt;/id&gt;
      &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;
    &lt;/snapshotRepository&gt;
    &lt;repository&gt;
      &lt;id&gt;ossrh&lt;/id&gt;
      &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/distributionManagement&gt;

  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.6&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;sign-artifacts&lt;/id&gt;
            &lt;phase&gt;verify&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;sign&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;gpgArguments&gt;
                &lt;arg&gt;--pinentry-mode&lt;/arg&gt;
                &lt;arg&gt;loopback&lt;/arg&gt;
              &lt;/gpgArguments&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/profile&gt;
&lt;/source&gt;

You also need to add additional meta information sections like &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;scm&lt;/code&gt;, &lt;code&gt;licenses&lt;/code&gt; and &lt;code&gt;developers&lt;/code&gt; to provide more information about the project in Maven Central. This is required to ensure a minimum level of quality of the components available in the Central Repository. Further information can be found [https://central.sonatype.org/pages/requirements.html here].

In a typical PDE project layout you will deploy a lot more artifacts than necessary or even intended. This is because a PDE project layout typically has:
* plugins
* features
* test plugins/fragments
* releng projects (target platform, update site)
* a parent pom
* in a structured environment also connector poms for the sub-folders


Outside the Eclipse universe only the plugins/bundles are interesting for other developers. Features, update sites and target platform are solely used with p2 and typically do not need to be published on Maven Central.
Test plugins/fragments should never be published, as well as connector poms. The parent pom on the other hand is needed to resolve the bundle artifacts that point to the parent pom.

To keep a deployment clean you can configure the &lt;code&gt;maven-deploy-plugin&lt;/code&gt; and set the &lt;code&gt;skip&lt;/code&gt; configuration parameter to &lt;code&gt;true&lt;/code&gt; on projects that should not be promoted.

As the parent pom also needs to be published, it is not possible to skip on parent level and only enable the deployment only for the plugins that should be deployed. Instead you can define Maven profiles that get activated for example if a file exists and then sets the property &lt;code&gt;maven.deploy.skip&lt;/code&gt;.

In the &lt;code&gt;pluginManagement&lt;/code&gt; of the parent pom.xml add the following plugin configuration to configure the version of the &lt;code&gt;maven-deploy-plugin&lt;/code&gt;:

&lt;source lang=&quot;xml&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
&lt;plugin&gt; 
  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
  &lt;version&gt;2.8.2&lt;/version&gt;
&lt;/plugin&gt;
&lt;/source&gt;

If you have added pom.xml files to the plugin projects to specify the dependencies in Maven style, you could then simply add the following profile to the &lt;code&gt;profiles&lt;/code&gt; section, that skips all projects that do '''not''' have a pom.xml file:
&lt;source lang=&quot;xml&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
&lt;profile&gt;
  &lt;id&gt;skip-deploy&lt;/id&gt;
  &lt;activation&gt;
    &lt;file&gt;
      &lt;missing&gt;pom.xml&lt;/missing&gt;
    &lt;/file&gt;
  &lt;/activation&gt;
  &lt;properties&gt;
    &lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;
  &lt;/properties&gt;
&lt;/profile&gt;
&lt;/source&gt;

This of course means that you have to skip the deployment of projects that contain a pom.xml file, but should not be published (e.g. product builds that contain a pom.xml for customization). This can be done by adding the following configuration to that pom.xml:
&lt;source lang=&quot;xml&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
&lt;build&gt;
  &lt;plugins&gt;
    &lt;!-- do not publish this artifact to Maven repositories --&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;skip&gt;true&lt;/skip&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
&lt;/source&gt;

If you want to stick to a pomless build without any additional pom.xml files in your project, you need to have several profiles with different activation patterns, like the following snippet for example:

&lt;source lang=&quot;xml&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
&lt;!-- do not deploy connector pom.xml files --&gt;
&lt;profile&gt;
  &lt;id&gt;skip-deploy-connector-pom&lt;/id&gt;
  &lt;activation&gt;
    &lt;file&gt;
      &lt;exists&gt;.polyglot.pom.tycho&lt;/exists&gt;
    &lt;/file&gt;
  &lt;/activation&gt;
  &lt;properties&gt;
    &lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;
  &lt;/properties&gt;
&lt;/profile&gt;

&lt;!-- do not deploy features --&gt;
&lt;profile&gt;
  &lt;id&gt;skip-deploy-eclipse-feature&lt;/id&gt;
  &lt;activation&gt;
    &lt;file&gt;
      &lt;exists&gt;feature.xml&lt;/exists&gt;
    &lt;/file&gt;
  &lt;/activation&gt;
  &lt;properties&gt;
    &lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;
  &lt;/properties&gt;
&lt;/profile&gt;

&lt;!-- do not deploy update sites --&gt;
&lt;profile&gt;
  &lt;id&gt;skip-deploy-eclipse-updatesite&lt;/id&gt;
  &lt;activation&gt;
    &lt;file&gt;
      &lt;exists&gt;category.xml&lt;/exists&gt;
    &lt;/file&gt;
  &lt;/activation&gt;
  &lt;properties&gt;
    &lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;
  &lt;/properties&gt;
&lt;/profile&gt;

&lt;!-- do not deploy test bundles --&gt;
&lt;profile&gt;
  &lt;id&gt;skip-deploy-eclipse-test&lt;/id&gt;
  &lt;activation&gt;
    &lt;file&gt;
      &lt;exists&gt;no_deploy.txt&lt;/exists&gt;
    &lt;/file&gt;
  &lt;/activation&gt;
  &lt;properties&gt;
    &lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;
  &lt;/properties&gt;
&lt;/profile&gt;

&lt;!-- do not deploy target definitions --&gt;
&lt;profile&gt;
  &lt;id&gt;skip-deploy-eclipse-target&lt;/id&gt;
  &lt;activation&gt;
    &lt;file&gt;
      &lt;exists&gt;[project_file].target&lt;/exists&gt;
    &lt;/file&gt;
  &lt;/activation&gt;
  &lt;properties&gt;
    &lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;
  &lt;/properties&gt;
&lt;/profile&gt;

&lt;!-- do not deploy products --&gt;
&lt;profile&gt;
  &lt;id&gt;skip-deploy-eclipse-product&lt;/id&gt;
  &lt;activation&gt;
    &lt;file&gt;
      &lt;exists&gt;[project_file].product&lt;/exists&gt;
    &lt;/file&gt;
  &lt;/activation&gt;
  &lt;properties&gt;
    &lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;
  &lt;/properties&gt;
&lt;/profile&gt;
&lt;/source&gt;

{{Note|Note|For tests you could also use the pattern &lt;code&gt;target/surefire.properties&lt;/code&gt; which works locally, but fails on Jenkins as the file doesn't seem to exist at the time the check is performed. In such a case you need some marker file to be able identify test plugin projects that should not be deployed, e.g. an empty file named ''no_deploy.txt'' }}

{{Note|Note|For products and target definitions there is no generic pattern for the filename. Wildcards seem to be not supported, so you have to use the concrete filename of your project.}}

To verify which profiles are activated, you can use the following command:
&lt;source lang=&quot;bash&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
mvn help:active-profiles
&lt;/source&gt;

== Jenkins configuration ==

To be able to deploy artifacts to OSSRH, the build needs to be executed on the dedicated JIPP instance. This is because the artifacts need to be signed with GPG, and the keys will be available on your JIPP instance once the Eclipse webmaster has received it from Sonatype and configured the JIPP instance.

You can find the detailed information in [https://wiki.eclipse.org/Jenkins#How_can_artifacts_be_deployed_to_OSSRH_.2F_Maven_Central.3F How can artifacts be deployed to OSSRH / Maven Central?]. The following will only give some hints on the configuration in Jenkins:

* Create a dedicated release build configuration (it is a good practice to separate the release build job from other jobs like Gerrit triggers or SNAPSHOT builds)
* Ensure to checkout the release branch (it is a good practice to have release branches separated from master or develop branches, but if master is the branch you release, than this is your release branch)
* Configure the secrets file as described [https://wiki.eclipse.org/Jenkins#How_can_artifacts_be_deployed_to_OSSRH_.2F_Maven_Central.3F here]
* Add the shell script for GPG signing as build step BEFORE the Maven execution step
* Add the Maven build step &lt;code&gt;mvn clean deploy -DskipTests=true -Pmaven-publish&lt;/code&gt;
** The goal &lt;code&gt;deploy&lt;/code&gt; is the last phase in the Maven build lifecycle and should only be used in the build environment as it copies the final package to the remote repository. Therefore it is discussable if a separate profile is really needed, but a clean separation via profile can be seen as second guard.
** The test execution is skipped via &lt;code&gt;-DskipTests=true&lt;/code&gt;, as usually the tests should be green BEFORE even considering a deployment. Therefore the execution of tests should not be necessary here to safe processing time.
** Via &lt;code&gt;-Pmaven-publish&lt;/code&gt; the profile is activated.


If you use the release build job for Maven deployment AND Eclipse update site deployment, you should also execute the &lt;code&gt;eclipse-jarsigner-plugin&lt;/code&gt; (assuming you already have a dedicated profile for that job named &lt;code&gt;sign&lt;/code&gt;

&lt;source lang=&quot;bash&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
mvn clean deploy -DskipTests=true -Psign,maven-publish
&lt;/source&gt;

{{Note|Note|For testing the deployment without directly publishing, you can set the system property &lt;code&gt;altDeploymentRepository&lt;/code&gt; to point to a folder in your local environment.
&lt;source lang=&quot;bash&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
mvn clean deploy -DaltDeploymentRepository=local-repo::default::file:../../repo_test/releases
&lt;/source&gt;
}}


== Release Process ==
The following section describes a typical release process. It is not mandatory to follow it exactly, but it should give hints on the required steps.

* Create a dedicated release branch &lt;code&gt;releases/VERSION&lt;/code&gt;, e.g. &lt;code&gt;releases/1.0.0&lt;/code&gt;
{{Note|Note|Some projects use their &lt;code&gt;master&lt;/code&gt; branch for the release or have another branch scheme for releases. So &lt;code&gt;releases/VERSION&lt;/code&gt; is just a common pattern that can be used.}}

* Remove &lt;code&gt;-SNAPSHOT&lt;/code&gt; and &lt;code&gt;.qualifier&lt;/code&gt; from any version numbers in the release branch
{{Note|Note|This is necessary for Maven to push the build to the proper Maven Central release staging area. Be careful not to change anything in source code. This should mainly affect:
* category.xml
* pom.xml
* feature.xml
* MANIFEST.MF}}


Using the &lt;code&gt;tycho-versions-plugin&lt;/code&gt; this step should be simple:

&lt;source lang=&quot;bash&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
mvn org.eclipse.tycho:tycho-versions-plugin:set-version -DnewVersion=VERSION
&lt;/source&gt;


* Push the changes to the release branch
* Trigger the build on Jenkins


Once the build finishes successfully, you have deployed the artifacts to the OSSRH staging area. According to the [https://central.sonatype.org/pages/releasing-the-deployment.html documentation] you now need to release the deployment to Maven Central.

* Login to https://oss.sonatype.org/
** In the left menu check for ''Build Promotion - Staging Repositories''
** Select your repository and validate if it meets your expectations
** If everything is correct ''Close'' the repository, otherwise ''Drop'' it and fix any issues
** Once it is closed, press the ''Release'' button to trigger the release to the Central repository
** The sync needs to be enabled manually, so you need to add a comment on the OSSRH ticket that everything worked, so they can enable the sync


* Finally update the version in the master/develop branch

&lt;source lang=&quot;bash&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
mvn org.eclipse.tycho:tycho-versions-plugin:set-version -DnewVersion=NEW_VERSION_NUMBER.qualifier
&lt;/source&gt;


The manual release process by logging into https://oss.sonatype.org/ can be automized by using the Nexus Staging Plugin as described [https://central.sonatype.org/pages/apache-maven.html#nexus-staging-maven-plugin-for-deployment-and-release here].
You need to add the following plugin configuration to the &lt;code&gt;plugins&lt;/code&gt; section of your parent pom.xml. If you have introduced a dedicated profile for the deployment, it is a good place to put the configuration in that profile.

&lt;source lang=&quot;xml&quot; style=&quot;border:1px solid;padding: 5px; margin: 5px;&quot;&gt;
&lt;plugin&gt;
  &lt;groupId&gt;org.sonatype.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;nexus-staging-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;1.6.7&lt;/version&gt;
  &lt;extensions&gt;true&lt;/extensions&gt;
  &lt;configuration&gt;
     &lt;serverId&gt;ossrh&lt;/serverId&gt;
     &lt;nexusUrl&gt;https://oss.sonatype.org/&lt;/nexusUrl&gt;
     &lt;autoReleaseAfterClose&gt;true&lt;/autoReleaseAfterClose&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;/source&gt;

[[Category:Tycho]]</text>
      <sha1>qffb7wa3kr7x37lgcfhvim3olowshq2</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Unzip Plugin Release Notes</title>
    <ns>0</ns>
    <id>40307</id>
    <revision>
      <id>379583</id>
      <parentid>370065</parentid>
      <timestamp>2015-03-09T14:55:03Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <comment>sort under U</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="680">The latest milestone release of Nexus Unzip Plugin is [[Tycho/Unzip Plugin Release Notes/0.14|0.14.0]]. There are no releases as defined by the [http://www.eclipse.org/projects/dev_process/development_process_2011.php Eclipse Development Process] yet.

Unzip Plugin [[Tycho/Unzip Plugin Release Notes/0.15|0.15.0]] is currently under development.

==== List of milestone releases ====

* [[Tycho/Unzip Plugin Release Notes/0.11|0.11]] (2013-02-28)
* [[Tycho/Unzip Plugin Release Notes/0.12|0.12]] (2013-09-13)
* [[Tycho/Unzip Plugin Release Notes/0.13|0.13]] (2014-04-15)
* [[Tycho/Unzip Plugin Release Notes/0.14|0.14]] (2014-08-26)

[[Category:Tycho|Unzip Plugin Release Notes]]</text>
      <sha1>fj0hyn07n1m73l9xrt63b2boq1ac9w0</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Unzip Plugin Release Notes/0.11</title>
    <ns>0</ns>
    <id>40308</id>
    <revision>
      <id>373999</id>
      <parentid>358841</parentid>
      <timestamp>2014-11-20T13:56:34Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="591">&lt;css&gt;
  #bodyContent{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; margin-right: 1em; font-size: 84%; line-height: 1.2em; color: rgb(125, 125, 125); }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot;&gt;&amp;lt; Previous Version | [[Tycho/Unzip Plugin Release Notes/0.12|Next Version &amp;gt;]]&lt;/div&gt; 

Initial milestone release of the [[Tycho/Nexus Unzip Plugin]] based on Nexus 2.3.0.

Although this is the first milestone, the functionally equivalent non open-source predecessor project has been in productive use at SAP for two years.

[[Category:Tycho|Unzip Plugin Release Notes/0.11]]</text>
      <sha1>sjhqbwut9t5k34bnl01hi1zsr533lm5</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Unzip Plugin Release Notes/0.12</title>
    <ns>0</ns>
    <id>42567</id>
    <revision>
      <id>358842</id>
      <parentid>347197</parentid>
      <timestamp>2014-03-27T18:10:11Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <comment>add navigation; fix listing in category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="917">&lt;css&gt;
  #bodyContent{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; margin-right: 1em; font-size: 84%; line-height: 1.2em; color: rgb(125, 125, 125); }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot;&gt;[[Tycho/Unzip Plugin Release Notes/0.11|&amp;lt; Previous Version]] | [[Tycho/Unzip Plugin Release Notes/0.13|Next Version &amp;gt;]]&lt;/div&gt; 

== New and Noteworthy  ==

*Port Unzip Plugin to Nexus 2.6.x ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=411239 bug 411239])&lt;br&gt;'''NOTE''': the plugin now requires Nexus &amp;gt;= 2.6.0, older nexus versions are no longer supported 
*Fix cache for virtual version &quot;SNAPSHOT&quot; ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=405154 bug 405154])

For details, see the [https://bugs.eclipse.org/bugs/buglist.cgi?product=Tycho&amp;component=Nexus%20Plugins&amp;target_milestone=0.12.0 complete list of bugs fixed in release 0.12.0] 

[[Category:Tycho|Unzip Plugin Release Notes/0.12]]</text>
      <sha1>oc9fqw0fi4tiu8rh11mxr40m0pv2kgy</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Unzip Plugin Release Notes/0.13</title>
    <ns>0</ns>
    <id>42638</id>
    <revision>
      <id>369607</id>
      <parentid>359972</parentid>
      <timestamp>2014-08-28T07:28:06Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <comment>installation instructions are now for 0.14.0 -&gt; remove link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="868">&lt;css&gt;
  #bodyContent{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; margin-right: 1em; font-size: 84%; line-height: 1.2em; color: rgb(125, 125, 125); }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot;&gt;[[Tycho/Unzip Plugin Release Notes/0.12|&amp;lt; Previous Version]] | [[Tycho/Unzip Plugin Release Notes/0.14|Next Version &amp;gt;]]&lt;/div&gt; 

== New and Noteworthy  ==

* Port the Nexus Unzip Plugin to Nexus 2.7.x ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=423014 bug 423014])&lt;br&gt;'''NOTE''': The plugin now requires a Nexus with version  2.7.x. Older Nexus versions as well as newer versions (&amp;gt;= 2.8.x) are '''not''' supported.

For details, see the [https://bugs.eclipse.org/bugs/buglist.cgi?product=Tycho&amp;component=Nexus%20Plugins&amp;target_milestone=0.13.0 complete list of bugs fixed in release 0.13.0] 

[[Category:Tycho|Unzip Plugin Release Notes/0.13]]</text>
      <sha1>7muxb2gxc8w2sh7xrn5he6n4urzjei0</sha1>
    </revision>
  </page>
  <page>
    <title>Tycho/Unzip Plugin Release Notes/0.14</title>
    <ns>0</ns>
    <id>45460</id>
    <revision>
      <id>376470</id>
      <parentid>371892</parentid>
      <timestamp>2015-01-15T12:19:22Z</timestamp>
      <contributor>
        <username>Jan.sievers.sap.com</username>
        <id>7303</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="974">&lt;css&gt;
  #bodyContent{ position:relative; }
  #versionNav{ position:absolute; top: 0px; right: 0px; margin-right: 1em; font-size: 84%; line-height: 1.2em; color: rgb(125, 125, 125); }
&lt;/css&gt; 
&lt;div id=&quot;versionNav&quot;&gt;[[Tycho/Unzip Plugin Release Notes/0.13|&amp;lt; Previous Version]] | [[Tycho/Unzip Plugin Release Notes/0.15|Next Version &amp;gt;]]&lt;/div&gt; 

== New and Noteworthy  ==

* Port the Nexus Unzip Plugin to Nexus 2.8.x through 2.11.x ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=432793 bug 432793])&lt;br&gt;'''NOTE''': The plugin now requires a Nexus with version &amp;gt;= 2.8. It was tested to work with both Nexus 2.8.x through 2.11.x. Older Nexus versions (&amp;lt; 2.8) are '''not''' supported.

For details, see the [https://bugs.eclipse.org/bugs/buglist.cgi?product=Tycho&amp;component=Nexus%20Plugins&amp;target_milestone=0.14.0 complete list of bugs fixed in release 0.14.0] 

== How to Install  ==

See [[Tycho/Nexus Unzip Plugin]]

[[Category:Tycho|Unzip Plugin Release Notes/0.14]]</text>
      <sha1>1nl48tv0f99dwmsqjqg65ckkzspeb8p</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Tycho Examples</title>
    <ns>14</ns>
    <id>32441</id>
    <revision>
      <id>263605</id>
      <parentid>259924</parentid>
      <timestamp>2011-08-04T09:41:23Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>List this subcategory under &quot;E&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">[[Category:Tycho|Examples]]</text>
      <sha1>tt4gtketsdzfvgff1xrsyrckx76kmvv</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Tycho Proposals</title>
    <ns>14</ns>
    <id>32845</id>
    <revision>
      <id>267762</id>
      <parentid>263604</parentid>
      <timestamp>2011-09-12T11:01:30Z</timestamp>
      <contributor>
        <username>Tobias.oberlies.sap.com</username>
        <id>7560</id>
      </contributor>
      <minor/>
      <comment>fix typo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="295">This category collects ideas, proposals, and plans for Tycho.

Pages in this category should '''not''' be in the &quot;Tycho&quot; category &amp;ndash; the latter should only contain documetation for features which are already available in Tycho releases or development snapshot.

[[Category:Tycho|Proposals]]</text>
      <sha1>pgrnpy98b7x2uipj5vdpfi3x7g57bk7</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Tycho/How To</title>
    <ns>14</ns>
    <id>37440</id>
    <revision>
      <id>303876</id>
      <timestamp>2012-05-30T02:11:03Z</timestamp>
      <contributor>
        <username>Baerrach.gmail.com</username>
        <id>1294</id>
      </contributor>
      <comment>New page: [[Category:Tycho]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">[[Category:Tycho]]</text>
      <sha1>o5qkkhmpc56fdl8la8nkuf1drbvtpfh</sha1>
    </revision>
  </page>
</mediawiki>
